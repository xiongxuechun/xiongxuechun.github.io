"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[64],{9168:(l,i)=>{i.A=(l,i)=>{const e=l.__vccOpts||l;for(const[l,t]of i)e[l]=t;return e}},4949:(l,i,e)=>{e.r(i),e.d(i,{comp:()=>m,data:()=>f});var t=e(6904);const a=e.p+"assets/img/支付系统业务架构.0a52e6c5.png",p=e.p+"assets/img/支付系统流程1.7b43dc35.png",n=e.p+"assets/img/course-payment流程.07dcbb79.png",r=e.p+"assets/img/支付系统架构设计.109269ce.png",s=e.p+"assets/img/支付模块设计.e1f3f00f.jpg",o=e.p+"assets/img/支付回调设计.86c73283.jpg",d=e.p+"assets/img/退款模块设计.a9d57705.jpg",c=e.p+"assets/img/退款状态机设计.2eb560bc.jpg",g=e.p+"assets/img/系统异常处理设计.aa6b9125.jpg",h=[(0,t.Fv)('<h1 id="支付系统设计-服务端" tabindex="-1"><a class="header-anchor" href="#支付系统设计-服务端"><span>支付系统设计--服务端</span></a></h1><h1 id="一-背景" tabindex="-1"><a class="header-anchor" href="#一-背景"><span>一. 背景</span></a></h1><p>​ 随着业务的快速发展与变化，业务模式由原有的独立 APP 售卖模式调整为以业务为导向，各业务百花齐放，各自建设业务系统模式。原有售卖模式采用的支付方式与独立 APP 耦合，且支付方式仅支持一个AppId，对应一个微信或支付宝商户号，无法满足各业务搭建 App 及独立售卖的模式。需要提供业务统一的支付平台能力，支持业务与支付中心一次对接，即可打通支付整体流程。</p><p>支付中心在现代企业中扮演着至关重要的角色，它不仅是内部业务线之间的支付服务提供者，还是与外部三方支付机构或银行之间的资金流转的桥梁，有助于实现支付流程的标准化、高效化和安全化。</p><ul><li>对内方面：支付中心为各业务线提供统一的支付和退款服务，方便各业务之间的数据交互和整合，有助于简化业务流程，减少重复开发和维护成本，同时提高支付和退款的处理效率；</li><li>对外方面：支付中心需要对接各种三方支付机构或银行服务，实现资金的流转，为企业提供更广泛、更灵活的支付结算服务，满足企业不断增长的业务需求。</li></ul><p>支付中心系统的设计旨在实现对内统一支付和退款服务，对外对接三方支付服务，实现资金流转。</p><h2 id="_1-业务架构" tabindex="-1"><a class="header-anchor" href="#_1-业务架构"><span>1. 业务架构</span></a></h2><p>支付中心是一个支付聚合服务，旨在最大程度减少其他服务对接第三方支付的开发量，并将支付相关功能、信息统一化管理。</p><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-极简支付流程" tabindex="-1"><a class="header-anchor" href="#_2-极简支付流程"><span>2. 极简支付流程</span></a></h2><p>从服务端设计的角度看，一个极简的订单支付的流程如下：</p><img src="'+p+'" style="zoom:80%;"><ol><li>创建订单：用户从客户端下单，创建订单的流程，生成订单记录（通常包括订单号、用户信息、商品详情、总价、支付状态等）；</li><li>生成支付信息：商家服务端会根据订单信息生成支付信息，包括支付金额、支付方式、订单号等，用于后续的支付流程；</li><li>返回支付页面：服务端将支付信息返回给客户端，客户端根据支付信息生成支付页面(包含支付金额、支付方式、订单号等信息)，并引导用户进行支付操作；</li><li>发起支付：用户在支付下单页，点击支付，服务端会组装支付参数请求第三方支付进行下单；</li><li>支付结果通知：用户支付完成后，三方支付平台(如支付宝、微信支付等)会向服务端发送支付结果通知。服务端接收到支付结果通知后，会对支付结果进行处理：如果支付成功，服务端会更新订单状态为已支付，并进行相应的业务处理(如库存扣减、通知卖家发货等)；如果支付失败，服务端会更新订单状态为支付失败，并通知用户重新进行支付。</li><li>支付结果回调：服务端将支付结果返回给客户端并展示给用户。如果支付成功，客户端会展示支付成功页面，并引导用户进行后续操作(如查看订单详情等)，如果支付失败，客户端会展示支付失败页面，并提示用户重新进行支付。</li></ol><p>整体支付流程的时序图可如下所示：</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="二-支付中心系统设计" tabindex="-1"><a class="header-anchor" href="#二-支付中心系统设计"><span>二. 支付中心系统设计</span></a></h1><h2 id="_1-系统架构设计" tabindex="-1"><a class="header-anchor" href="#_1-系统架构设计"><span>1. 系统架构设计</span></a></h2><p>支付中心系统的主要职责是处理业务系统发起的所有交易请求，包含商户系统、支付核心等模块，如图所示，主要分为四个大模块：</p><ol><li><p>应用平台：对外提供API网关接口，供其他业务订单系统调用；</p></li><li><p>业务中台：主要包括商户系统和支付系统；</p><ul><li><p>商户系统：主要关注的是与商户相关的所有业务和功能，包括但不限于商户配置、支付配置、通知配置、交易对账等。商户系统通过提供统一、高效、安全的服务接口，帮助商户更好地管理自己的业务，提高运营效率，降低运营成本；</p></li><li><p>支付系统：主要负责与外部支付通道统一打通，包括但不限于交易支付、退款、回调通知、订单补偿、差错处理、异常通知，包括对业务中台各项服务的配置、监控等；</p></li><li><p>支付通道：用于和三方支付进行对接及管理；</p></li></ul></li><li><p>技术架构：用于实现整个系统功能的技术架构；</p></li></ol><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-详细设计" tabindex="-1"><a class="header-anchor" href="#_2-详细设计"><span>2. 详细设计</span></a></h2><h3 id="_2-1-支付模块设计" tabindex="-1"><a class="header-anchor" href="#_2-1-支付模块设计"><span>2.1. 支付模块设计</span></a></h3><p>业务商户系统在支付时通过统一接口请求支付，对第三方支付平台无感知，由支付系统做统一处理。在进行对接之前，业务商户系统需要在支付系统填写商户信息以便后续支付，整体执行顺序和模块主要包含三部分：</p><ol><li><strong>生成预支付订单</strong>：业务系统调用支付中心之后，支付中心校验商户信息、权限校验，生成支付中心全局唯一支付单号，生成支付订单记录；</li><li><strong>三方支付交互</strong>：支付中心根据支付类型和交易类型以及对应的三方支付接口，生成接口交互签名，组装成统一的支付请求与三方支付交互；</li><li><strong>支付后置处理</strong>：支付中心根据当前支付请求和三方接口响应，落库记录支付订单信息；</li></ol><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p><strong>生成预支付订单的主要步骤</strong></p><p>​ a. 校验商户信息：支付中心从数据库中获取商户信息，并校验商户号、商户状态和交易类型等信息；</p><p>​ b. 权限校验：校验商户是否有权限进行当前支付操作，确保商户有权限进行当前支付操作；</p><p>​ c. 生成支付中心订单号；</p><p>​ d. 创建支付订单对象：根据支付请求信息和商户信息，创建支付订单对象。</p></li></ul><p>支付中心唯一支付订单号的生成方法如下：</p><ol><li><p>获取当前时间戳：以秒为单位获取当前时间戳。</p></li><li><p>生成 Redis 键：</p><ul><li><p>使用 <code>pay:order_id:</code> 作为前缀，加上当前时间戳，生成 Redis 键。</p></li><li><p>使用 Redis 中 <code>setIfAbsent</code> 设置键值对，如果键不存在则设置成功，并设置过期时间为 10 秒。</p></li><li><p>如果 Redis 中已经有该键，使用 <code>increment</code> 方法对键值进行自增，并将结果转换为字符串。</p></li><li><p>如果 Redis 操作失败，使用备用方案生成 6 位随机数作为订单号计数部分。</p></li></ul></li><li><p>格式化订单号：将订单号序列格式化为 6 位数字，不足位数前面补零。</p></li><li><p>拼接订单号：将支付类型编号、当前时间戳、订单号计数和 4 位随机数拼接在一起，生成最终的支付单号；</p></li></ol><ul><li><p>例如：订单号：4 1732690422 000001 7403 ，其中 4 是指支付宝支付；1732690422 是时间戳；000001 为订单号计数器；7403 是四位随机数。</p></li><li><p><strong>三方支付交互</strong></p></li></ul><p>支付中心根据支付类型和交易类型，选择对应的三方支付接口，生成接口交互签名，组装成统一的支付请求与三方支付交互，三方支付交互的主要步骤如下：</p><ol><li>根据支付类型和交易类型，选择对应的三方支付接口；</li><li>使用三方支付接口所需的参数和加密方法，生成签名；</li><li>将签名和其他必要参数组装成统一的支付请求；</li><li>调用三方支付接口，发送支付请求；</li><li>接收并处理三方支付接口的响应结果；</li></ol><ul><li><strong>支付后置处理</strong></li></ul><p>支付后置处理主要是根据当前支付请求和三方支付的接口响应，落库记录支付订单信息，主要步骤如下：</p><ol><li>根据支付请求和三方支付接口响应结果，更新当前支付订单的状态、三方平台的交易流水号等信息；</li><li>如果当前订单是首次支付，则将订单信息插入数据库；否则，更新已有订单信息；</li><li>在支付订单落库的同时，添加订单超时触发器，将支付订单放入到延时队列中，延时任务的执行时间为订单的支付过期时间；</li><li>如果系统压测流量，根据实际情况调用 mockCallbackGateway 进行模拟回调；</li></ol><h3 id="_2-2-支付回调设计" tabindex="-1"><a class="header-anchor" href="#_2-2-支付回调设计"><span>2.2. 支付回调设计</span></a></h3><p>​ 第三方支付平台支付成功后，会回调支付中心，由支付中心系统进行统一处理后再回调业务商户系统，具体流程如图所示：</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>支付中心系统支付回调具体步骤如下：</p><ol><li><p>第三方支付平台通过HTTP请求通知支付中心支付结果，支付中心接收到请求后，校验回调的支付订单：</p><ul><li><p>如果订单已经被处理过，或者订单不存在，则直接返回处理结果；</p></li><li><p>如果订单存在且未被处理过，则校验商户信息、签名和金额；</p></li><li><p>如果验证不通过，则返回处理失败；如果验证通过，则更新订单状态，并异步回调商户系统通知支付结果；</p></li><li><p>如果回调商户系统失败，会放入延时队列，进行失败重试，如果回调商户系统成功，则修改支付订单表中支付回调状态</p></li></ul></li></ol><p>其中，支付中心在收到三方支付回调后异步回调商户系统，将三方支付与商户系统完全解耦，并在回调失败的24小时内不断重试，直至回调成功；</p><p>商户在接收到支付中心发送的回调后只需要处理自身后续逻辑即可，无需考虑安全效验等问题。</p><p><strong>支付核心状态通过CAS方式修改</strong>，解决并发情况下数据一致性问题。</p><p>对于回调商户通知结果现有两种方式，通过接口回调或通过kafka发送消息，选择哪种或两者皆由具体业务场景决定。</p><table><thead><tr><th><strong>方案</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th><th><strong>采用情况</strong></th></tr></thead><tbody><tr><td>接口回调</td><td>接入简单，不受内部服务限制</td><td>性能较低，存在丢失消息风险</td><td>本系统采用</td></tr><tr><td>消息队列</td><td>性能较高，保证消息一定能被消费</td><td>需调用方共同维护消息队列，且只能内部使用</td><td>否</td></tr></tbody></table><p>​ 退款模块主要负责处理商户发起的退款请求。退款流程依赖于支付功能，支持全额退款和部分退款，但无论何种退款，一个订单的退款金额总和不能超过支付金额。接入退款流程必须接入支付流程，退款功能依赖于支付功能。</p><p>整体执行顺序和模块主要包含三部分：</p><ol><li>退款请求校验：业务系统调用支付中心退款接口之后，支付中心校验商户信息、退款金额等，根据请求查询支付单信息和退款记录，查询是否已退款；</li><li>三方退款交互：支付中心根据支付类型选择对应的三方退款接口，生成接口交互签名，组装成统一的退款请求与三方支付交互；</li><li>退款后置处理：支付中心根据当前退款请求和三方接口响应，落库记录退款订单信息；</li></ol><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>退款请求校验</strong></li></ul><ol><li>退款请求入参校验：对退款请求的字段进行校验，比如退款金额最多两位小数；</li><li>校验商户信息：支付中心从数据库中获取商户信息，并校验商户号、商户状态和交易类型等信息；</li><li>校验退款记录：查询支付订单，查询该订单的已退金额，查询退款记录，检查是否已经退款成功或正在退款中，做幂等处理，防止重复请求退款；</li></ol><p>​ 其中，一个退款请求后，除退款失败外，不能重复提交请求。**一笔退款失败后重新提交，请不要更换退款单号，请使用原商户退款单号。**退款记录表中的状态流转如图：</p><img src="'+c+'" style="zoom:50%;"><ul><li><strong>三方退款交互</strong></li></ul><p>支付中心根据支付类型，选择对应的三方支付接口，生成接口交互签名，组装成统一的退款请求与三方退款交互；</p><ul><li><strong>退款后置处理</strong></li></ul><p>退款后置处理主要是根据当前退款请求和三方退款的接口响应，落库记录退款订单信息；</p><p>ⅰ. 根据退款请求和三方退款接口响应结果，更新当前退款订单的退款状态；</p><p>ⅱ. 如果当前订单是首次退款，则将退款订单信息插入数据库；否则，更新已有退款订单信息；</p><h3 id="_2-4-退款回调设计" tabindex="-1"><a class="header-anchor" href="#_2-4-退款回调设计"><span>2.4. 退款回调设计</span></a></h3><p>​ 第三方支付平台退款成功后，会回调支付中心，由支付中心系统进行统一处理后再回调业务商户系统。退款回调的和支付回调类似，具体步骤如下：</p><ol><li>第三方支付平台通过HTTP请求通知支付中心退款结果，支付中心接收到请求后，根据配置的商户信息，对退款回调进行解密；</li><li>通过支付单号和退款单号查询退款记录，如果退款记录不存在或者退款回调已经处理过，则直接返回处理结果；</li><li>如果订单存在且未被处理过，则校验商户信息、签名和金额；</li><li>如果验证不通过，则返回处理失败；如果验证通过，则更新支付订单表记录，然后更新退款记录订单状态；</li><li>异步回调商户系统通知退款结果；如果回调商户系统失败，会放入延时队列，进行失败重试，直至回调成功，重复支付退款回调不进行通知商户；</li></ol><h3 id="_2-5-系统异常处理设计" tabindex="-1"><a class="header-anchor" href="#_2-5-系统异常处理设计"><span>2.5. 系统异常处理设计</span></a></h3><p>​ 异常分为两种，内部异常和外部异常，支付中心系统只能对内部异常进行处理，对于外部异常，如第三方支付返回结果异常，由业务商户系统进行处理。而对于支付系统内部异常，如非阻塞主流程的异常则放入异常队列，等待后续处理，如影响主流程异常，则抛出由商户处理。异常处理流程图如下：</p><img src="'+g+'" alt="系统异常处理设计" style="zoom:50%;"><ul><li><p>非阻塞主流程的异常：</p><ul><li>用户支付成功后，数据库异常导致修改支付订单状态失败，此等异常不应影响支付流程的进行，等待后续处理即可。</li></ul></li><li><p>回调后服务器异常</p><ul><li>退款成功后，修改数据库异常</li></ul></li></ul><h3 id="_2-6-数据库设计" tabindex="-1"><a class="header-anchor" href="#_2-6-数据库设计"><span>2.6. 数据库设计</span></a></h3><h4 id="商户表-pay-merchant" tabindex="-1"><a class="header-anchor" href="#商户表-pay-merchant"><span>商户表（pay_merchant）</span></a></h4>',67)],u={},m=(0,e(9168).A)(u,[["render",function(l,i){return(0,t.uX)(),(0,t.CE)("div",null,h)}]]),f=JSON.parse('{"path":"/%E9%A1%B9%E7%9B%AE/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/%E6%94%AF%E4%BB%98%E6%B8%A0%E9%81%93%E8%81%9A%E5%90%88%E7%B3%BB%E7%BB%9F.html","title":"详解支付系统","lang":"zh-CN","frontmatter":{"title":"详解支付系统","category":["项目"],"tag":["项目 支付系统"],"order":-10,"description":"支付系统设计--服务端 一. 背景 ​ 随着业务的快速发展与变化，业务模式由原有的独立 APP 售卖模式调整为以业务为导向，各业务百花齐放，各自建设业务系统模式。原有售卖模式采用的支付方式与独立 APP 耦合，且支付方式仅支持一个AppId，对应一个微信或支付宝商户号，无法满足各业务搭建 App 及独立售卖的模式。需要提供业务统一的支付平台能力，支持业...","head":[["meta",{"property":"og:url","content":"https://www.codenook.cn/%E9%A1%B9%E7%9B%AE/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F/%E6%94%AF%E4%BB%98%E6%B8%A0%E9%81%93%E8%81%9A%E5%90%88%E7%B3%BB%E7%BB%9F.html"}],["meta",{"property":"og:site_name","content":"知识体系"}],["meta",{"property":"og:title","content":"详解支付系统"}],["meta",{"property":"og:description","content":"支付系统设计--服务端 一. 背景 ​ 随着业务的快速发展与变化，业务模式由原有的独立 APP 售卖模式调整为以业务为导向，各业务百花齐放，各自建设业务系统模式。原有售卖模式采用的支付方式与独立 APP 耦合，且支付方式仅支持一个AppId，对应一个微信或支付宝商户号，无法满足各业务搭建 App 及独立售卖的模式。需要提供业务统一的支付平台能力，支持业..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-16T09:31:05.000Z"}],["meta",{"property":"article:author","content":"XIONG XUECHUN"}],["meta",{"property":"article:tag","content":"项目 支付系统"}],["meta",{"property":"article:modified_time","content":"2024-12-16T09:31:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"详解支付系统\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-16T09:31:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"XIONG XUECHUN\\",\\"url\\":\\"https://www.codenook.cn/\\",\\"email\\":\\"15293191747@163.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 业务架构","slug":"_1-业务架构","link":"#_1-业务架构","children":[]},{"level":2,"title":"2. 极简支付流程","slug":"_2-极简支付流程","link":"#_2-极简支付流程","children":[]},{"level":2,"title":"1. 系统架构设计","slug":"_1-系统架构设计","link":"#_1-系统架构设计","children":[]},{"level":2,"title":"2. 详细设计","slug":"_2-详细设计","link":"#_2-详细设计","children":[{"level":3,"title":"2.1. 支付模块设计","slug":"_2-1-支付模块设计","link":"#_2-1-支付模块设计","children":[]},{"level":3,"title":"2.2. 支付回调设计","slug":"_2-2-支付回调设计","link":"#_2-2-支付回调设计","children":[]},{"level":3,"title":"2.4. 退款回调设计","slug":"_2-4-退款回调设计","link":"#_2-4-退款回调设计","children":[]},{"level":3,"title":"2.5. 系统异常处理设计","slug":"_2-5-系统异常处理设计","link":"#_2-5-系统异常处理设计","children":[]},{"level":3,"title":"2.6. 数据库设计","slug":"_2-6-数据库设计","link":"#_2-6-数据库设计","children":[]}]}],"git":{"createdTime":1726223192000,"updatedTime":1734341465000,"contributors":[{"name":"xiongxc","email":"xiongxc@rd.netease.com","commits":3}]},"readingTime":{"minutes":13.46,"words":4037},"filePathRelative":"项目/支付系统/支付渠道聚合系统.md","localizedDate":"2024年9月13日","excerpt":"\\n<h1>一. 背景</h1>\\n<p>​\\t随着业务的快速发展与变化，业务模式由原有的独立 APP 售卖模式调整为以业务为导向，各业务百花齐放，各自建设业务系统模式。原有售卖模式采用的支付方式与独立 APP 耦合，且支付方式仅支持一个AppId，对应一个微信或支付宝商户号，无法满足各业务搭建 App 及独立售卖的模式。需要提供业务统一的支付平台能力，支持业务与支付中心一次对接，即可打通支付整体流程。</p>\\n<p>支付中心在现代企业中扮演着至关重要的角色，它不仅是内部业务线之间的支付服务提供者，还是与外部三方支付机构或银行之间的资金流转的桥梁，有助于实现支付流程的标准化、高效化和安全化。</p>","autoDesc":true}')}}]);
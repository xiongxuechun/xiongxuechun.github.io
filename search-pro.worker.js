const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":180,\"nextId\":180,\"documentIds\":{\"0\":\"0\",\"1\":\"0#✨-初衷\",\"2\":\"0#🧱-笔记结构\",\"3\":\"0#🍥-搭建-learndata\",\"4\":\"0#🔣-配置-learndata\",\"5\":\"0#文档结构\",\"6\":\"0#看板娘\",\"7\":\"0#读书笔记\",\"8\":\"0#本地图片引用\",\"9\":\"0#🖥️-网站部署\",\"10\":\"0#同步到服务器\",\"11\":\"0#部署到-vercel\",\"12\":\"0#🤔-常见问题\",\"13\":\"0#网页显示异常\",\"14\":\"0#同步服务器报错\",\"15\":\"0#get-counter-failed-with-403\",\"16\":\"0#err-module\",\"17\":\"0#本地运行-learndata\",\"18\":\"2\",\"19\":\"2@0\",\"20\":\"2@1\",\"21\":\"3\",\"22\":\"3@0\",\"23\":\"3@1\",\"24\":\"4\",\"25\":\"4#三大特性\",\"26\":\"4#封装\",\"27\":\"4#继承\",\"28\":\"4#多态\",\"29\":\"4#类图\",\"30\":\"4#泛化关系-generalization\",\"31\":\"4#实现关系-realization\",\"32\":\"4#聚合关系-aggregation\",\"33\":\"4#组合关系-composition\",\"34\":\"4#关联关系-association\",\"35\":\"4#依赖关系-dependency\",\"36\":\"4#参考资料\",\"37\":\"4@0\",\"38\":\"4@1\",\"39\":\"5\",\"40\":\"5#数据类型\",\"41\":\"5#包装类型\",\"42\":\"5#缓存池\",\"43\":\"5#string\",\"44\":\"5#概览\",\"45\":\"5#不可变的好处\",\"46\":\"5#string-stringbuffer-and-stringbuilder\",\"47\":\"5#string-intern\",\"48\":\"5#运算\",\"49\":\"5#参数传递\",\"50\":\"5#float-与-double\",\"51\":\"5#隐式类型转换\",\"52\":\"5#switch\",\"53\":\"5#继承\",\"54\":\"5#访问权限\",\"55\":\"5#抽象类与接口\",\"56\":\"5#super\",\"57\":\"5#重写与重载\",\"58\":\"5#object-通用方法\",\"59\":\"5#概览-1\",\"60\":\"5#equals\",\"61\":\"5#hashcode\",\"62\":\"5#tostring\",\"63\":\"5#clone\",\"64\":\"5#关键字\",\"65\":\"5#final\",\"66\":\"5#static\",\"67\":\"5#反射\",\"68\":\"5#异常\",\"69\":\"5#泛型\",\"70\":\"5#注解\",\"71\":\"5#特性\",\"72\":\"5#java-各版本的新特性\",\"73\":\"5#java-与-c-的区别\",\"74\":\"5#jre-or-jdk\",\"75\":\"5#参考资料\",\"76\":\"5@0\",\"77\":\"5@1\",\"78\":\"6\",\"79\":\"6#三大特性\",\"80\":\"6#封装\",\"81\":\"6#继承\",\"82\":\"6#多态\",\"83\":\"6#类图\",\"84\":\"6#泛化关系-generalization\",\"85\":\"6#实现关系-realization\",\"86\":\"6#聚合关系-aggregation\",\"87\":\"6#组合关系-composition\",\"88\":\"6#关联关系-association\",\"89\":\"6#依赖关系-dependency\",\"90\":\"6#参考资料\",\"91\":\"6@0\",\"92\":\"6@1\",\"93\":\"7\",\"94\":\"7#相关文章\",\"95\":\"8\",\"96\":\"8#入门推荐\",\"97\":\"8#进阶推荐\",\"98\":\"8#参考文章\",\"99\":\"9\",\"100\":\"10\",\"101\":\"10#mooncake-gate\",\"102\":\"10#主要功能\",\"103\":\"10#主要类\",\"104\":\"10#提供的接口\",\"105\":\"10#时序图\",\"106\":\"10#topic\",\"107\":\"10#发送到不同topic的逻辑\",\"108\":\"10#不同topic的处理逻辑\",\"109\":\"10#mooncake-producer\",\"110\":\"10#提供的接口-1\",\"111\":\"10#系统时序图解释\",\"112\":\"10#主要流程总结\",\"113\":\"10#mooncake-consumer\",\"114\":\"10#代码分析\",\"115\":\"10#提供的接口-2\",\"116\":\"10#系统时序图\",\"117\":\"10#主要流程总结-1\",\"118\":\"10#mooncake-watcher\",\"119\":\"10#代码分析-1\",\"120\":\"10#提供的接口-3\",\"121\":\"10#系统时序图-1\",\"122\":\"10#主要流程总结-2\",\"123\":\"10#mooncake-模块分析及主要流程\",\"124\":\"10#主要模块\",\"125\":\"10#主要流程\",\"126\":\"10#流程图\",\"127\":\"10#时序图-1\",\"128\":\"10#主要实现细节\",\"129\":\"11\",\"130\":\"11#_1-业务架构\",\"131\":\"11#_2-极简支付流程\",\"132\":\"11#_1-系统架构设计\",\"133\":\"11#_2-详细设计\",\"134\":\"11#_2-1-支付模块设计\",\"135\":\"11#_2-2-支付回调设计\",\"136\":\"11#_2-4-退款回调设计\",\"137\":\"11#_2-5-系统异常处理设计\",\"138\":\"11#_2-6-数据库设计\",\"139\":\"11#商户表-pay-merchant\",\"140\":\"11@0\",\"141\":\"11@1\",\"142\":\"12\",\"143\":\"13\",\"144\":\"13#引入\",\"145\":\"13#代理的创建\",\"146\":\"13#获取所有的advisor\",\"147\":\"13#创建代理的入口方法\",\"148\":\"13#依据条件创建代理-jdk或cglib\",\"149\":\"14\",\"150\":\"14#引入\",\"151\":\"14#beanfactory中getbean的主体思路\",\"152\":\"14#初步的思考\",\"153\":\"14#spring中getbean的主体思路\",\"154\":\"14#重点-spring如何解决循环依赖问题\",\"155\":\"14#spring单例模式下的属性依赖\",\"156\":\"14#spring为何不能解决非单例属性之外的循环依赖\",\"157\":\"14#spring为什么不能解决构造器的循环依赖\",\"158\":\"14#spring为什么不能解决prototype作用域循环依赖\",\"159\":\"14#spring为什么不能解决多例的循环依赖\",\"160\":\"14#那么其它循环依赖如何解决\",\"161\":\"14#重点-spring中bean的生命周期\",\"162\":\"14#spring-bean生命周期流程\",\"163\":\"14#spring-bean生命周期案例\",\"164\":\"14#spring-bean生命周期源码\",\"165\":\"14#参考文章\",\"166\":\"15\",\"167\":\"16\",\"168\":\"17\",\"169\":\"18\",\"170\":\"19\",\"171\":\"20\",\"172\":\"21\",\"173\":\"22\",\"174\":\"23\",\"175\":\"24\",\"176\":\"25\",\"177\":\"26\",\"178\":\"27\",\"179\":\"28\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,3],\"1\":[2,32],\"2\":[2,29],\"3\":[3,116],\"4\":[3],\"5\":[1,102],\"6\":[1,48],\"7\":[1,47],\"8\":[1,23],\"9\":[2,32],\"10\":[1,28],\"11\":[2,59],\"12\":[2],\"13\":[1,42],\"14\":[1,53],\"15\":[5,26],\"16\":[2,27],\"17\":[2,35],\"18\":[1,7],\"19\":[null,null,1],\"20\":[null,null,2],\"21\":[1,7],\"22\":[null,null,1],\"23\":[null,null,2],\"24\":[3,24],\"25\":[1],\"26\":[1,79],\"27\":[1,28],\"28\":[1,51],\"29\":[1,8],\"30\":[3,15],\"31\":[3,16],\"32\":[3,13],\"33\":[3,15],\"34\":[3,22],\"35\":[3,28],\"36\":[1,44],\"37\":[null,null,2],\"38\":[null,null,2],\"39\":[3,48],\"40\":[1],\"41\":[1,23],\"42\":[1,122],\"43\":[1],\"44\":[1,32],\"45\":[1,48],\"46\":[4,19],\"47\":[3,95],\"48\":[1],\"49\":[1,51],\"50\":[3,17],\"51\":[1,30],\"52\":[1,56],\"53\":[1],\"54\":[1,71],\"55\":[1,138],\"56\":[1,37],\"57\":[1,24],\"58\":[2],\"59\":[1,29],\"60\":[2,68],\"61\":[2,71],\"62\":[2,20],\"63\":[2,93],\"64\":[1],\"65\":[1,37],\"66\":[1,96],\"67\":[1,224],\"68\":[1,27],\"69\":[1,19],\"70\":[1,11],\"71\":[1],\"72\":[2,59],\"73\":[4,48],\"74\":[3,28],\"75\":[1,16],\"76\":[null,null,2],\"77\":[null,null,2],\"78\":[3,24],\"79\":[1],\"80\":[1,79],\"81\":[1,28],\"82\":[1,51],\"83\":[1,8],\"84\":[3,15],\"85\":[3,16],\"86\":[3,13],\"87\":[3,15],\"88\":[3,22],\"89\":[3,28],\"90\":[1,44],\"91\":[null,null,2],\"92\":[null,null,2],\"93\":[2,6],\"94\":[1,119],\"95\":[2,275],\"96\":[1,21],\"97\":[1,6],\"98\":[1,19],\"99\":[1,242],\"100\":[1],\"101\":[2],\"102\":[1,5],\"103\":[1,33],\"104\":[1,12],\"105\":[1,38],\"106\":[1,11],\"107\":[1,11],\"108\":[1,16],\"109\":[2,66],\"110\":[1,40],\"111\":[1,48],\"112\":[1,82],\"113\":[2,8],\"114\":[1,105],\"115\":[1,14],\"116\":[1,41],\"117\":[1,25],\"118\":[2,9],\"119\":[1,84],\"120\":[1,14],\"121\":[1,49],\"122\":[1,22],\"123\":[2],\"124\":[1,24],\"125\":[1,22],\"126\":[1,39],\"127\":[1,49],\"128\":[1,61],\"129\":[1,38],\"130\":[2,5],\"131\":[2,52],\"132\":[2,37],\"133\":[2],\"134\":[3,111],\"135\":[2,108],\"136\":[3,28],\"137\":[3,21],\"138\":[3],\"139\":[4],\"140\":[null,null,1],\"141\":[null,null,2],\"142\":[1,16],\"143\":[4,19],\"144\":[1,42],\"145\":[1,94],\"146\":[1,115],\"147\":[1,151],\"148\":[3,64],\"149\":[6,36],\"150\":[1,18],\"151\":[1,17],\"152\":[1,28],\"153\":[1,191],\"154\":[2,5],\"155\":[1,155],\"156\":[2,3],\"157\":[2,10],\"158\":[2,6],\"159\":[2,4],\"160\":[2,22],\"161\":[2,38],\"162\":[2,131],\"163\":[2,151],\"164\":[2],\"165\":[1,12],\"166\":[1,3],\"167\":[1],\"168\":[2],\"169\":[1],\"170\":[2],\"171\":[1],\"172\":[1],\"173\":[1],\"174\":[1],\"175\":[2],\"176\":[1],\"177\":[1],\"178\":[1],\"179\":[1]},\"averageFieldLength\":[1.6560996388895086,45.99405130003488,0.4376634465987791],\"storedFields\":{\"0\":{\"h\":\"达伽马\",\"t\":[\"开源工具、效率方法、心理学探索的自我提升笔记\"]},\"1\":{\"h\":\"✨ 初衷\",\"t\":[\"曾经，我采用了 Notion、Obsidian 和 飞书 等多款知识管理工具来存储我的心得与笔记。然而，这种方式导致我的资料分散，难以管理和分享。\",\"更重要的是，笔记里的知识并不属于你，只有经过消化、应用，才会成为我们的财富。\",\"为此，我基于 VuePress 和 vuepress-theme-hope 构建了 LearnData 开源笔记，将我所有的笔记与文章聚合到同一页面形成知识库，便于集中管理和分享。\",\"笔记 + 文章 = LearnData 知识库\",\"笔记/博客自动化发布\"]},\"2\":{\"h\":\"🧱 笔记结构\",\"t\":[\"置顶：日常习惯、健身、阅读；\",\"软件应用：常用应用、Chrome 扩展和相关教程；\",\"Docker 服务：NAS 和服务器上的后端应用，以 Docker 容器为主；\",\"系统问题：Windows 系统优化和相关问题；\",\"代码编程：常用代码的学习和使用笔记，页面开发攻略和网站相关的工具和知识收集；\",\"生活角落：说明书、生活记录和小技巧；\",\"博客汇总：聚合所有博客文章，以分类、标签、时间轴等方式进行组合。\"]},\"3\":{\"h\":\"🍥 搭建 LearnData\",\"t\":[\"首先，访问 LearnData 项目页面，然后点击页面右上角的「Use this template」按钮。在弹出的页面中选择「Create a new repository」以创建一个基于此模板的新仓库。\",\"进入你的项目仓库，点击「Settings」>「Actions」>「General」，找到页面底部的 Workflow permissions 设置。选中 Read and write permissions 选项，并点击保存。这一步骤是确保 GitHub Page 在部署时能够正确访问和修改你的仓库内容，避免因权限不足导致部署失败（报错 failed with exit code 128）。\",\"然后，请进入菜单栏顶部的「Actions」页签，选择最新的 workflow。在页面右上方点击「Re-run jobs」>「Re-run all jobs」，这样做可以触发 GitHub 自动重新生成并部署网页。如果设置无误，GitHub 会自动创建一个名为 gh-page 的分支，并在其中部署你的页面。\",\"接下来，返回「Settings」页面，修改 Repository name 为 你的用户名.github.io。例如，如果你的仓库链接是 https://github.com/xxx/LearnData，那么 xxx 就是你的 GitHub 用户名。若该名称已被其他项目使用，系统会显示红色错误提示。此时，你可以选择任意其他名称，例如 LearnData，部署页面路径将变为 你的用户名.github.io/LearnData。如果页面样式显示不正常，可能需要设置子域名，具体方法可以参考页面底部的常见问题 - 网页显示异常。\",\"在「Settings」>「Pages」>「Build and deployment」>「Branch」中，将 gh-page 分支设置为 GitHub Pages 的源。大部分情况下，网站运行目录保持默认的 /(root) 即可。完成设置后，不要忘记点击「Save」保存。如果在此步骤中未找到 gh-pages 分支，请回到第三步重新触发一次 workflow，或尝试修改仓库中的任意文件以手动启动 GitHub Action。\",\"设置完成后，稍等几分钟再刷新页面，你将看到一个新的访问链接提示：https://你的用户名.github.io/。此时，你的个人知识库已经成功搭建，并且可以通过此链接访问了。\"]},\"4\":{\"h\":\"🔣 配置 LearnData\"},\"5\":{\"h\":\"文档结构\",\"t\":[\"LearnData 网站的配置和文本都存放在 docs 文件夹中。文章和页面的配置可参考主目录下的 samplepage.md。其中，order 参数表示侧边栏的顺序，数字越小越靠前，支持非整数和负数。我个人的偏好是将非干货或随想短文的 order 设置在 -0.01 到 -0.99，将干货类长文的 order 设置在 -1 到负无穷。每次新增文章都会在上一篇的基础上递减 order 值。这种设置使我能随时记录低于 1000 字的短文，同时不会影响那些寻求干货文章的用户体验，因为干货文章的排序始终保持在最上方。\",\"docs 目录结构如下：\",\"docs |── .vuepress # 网站配置 │ ├── config.ts # 网站环境依赖和网站属性 │ ├── sidebar.ts # 侧边栏 │ ├── navbar.ts # 导航栏 │ ├── theme.ts # 主题和插件 │ └── templateBuild.html # 网页模板，网站关键词和统计 |── _posts # 博客文章目录 ├── _temp # 草稿箱 ├── reading # 读书笔记 ├── anyname # 自定义笔记 ├── blog.md # 博客页面 └── intro.md # 博主个人介绍\",\"docs/.vuepress 路径下是网站的配置文件，我已添加了详细的注释。你可以参考注释和 vuepress-theme-hope 配置案例来调整配置。请在 docs/.vuepress/sidebar.ts 文件中修改文件夹路径，后台会自动抓取路径下的 md 文件来生成侧边栏。docs/.vuepress/theme.ts 有评论插件的相关配置。\",\"注意：\",\"LearnData 默认采用 algolia 进行全文检索。如果你没用 algolia，可在 docs/.vuepress/theme.ts 文件的 plugins 部分删除 docsearch 区块，并激活 searchPro。这样，网站将转用本地全文索引来进行搜索。\",\"docs/_temp 文件夹默认不同步到 GitHub 上。你可以手动在本地建立 _temp 文件夹，用来存放草稿。\",\"自 VuePress2 的 beta.54 版本开始，文件夹名前缀为 _ 在生成链接时将被省略，例如文章路径为 /_posts/，但网页链接路径会是 /posts/。\"]},\"6\":{\"h\":\"看板娘\",\"t\":[\"LearnData 集成了看板娘 Live2D Widget，支持随机对话、切换人物服饰和玩打飞机游戏，能提升网站美观度和趣味性。如果不需要看板娘，可以删除 docs\\\\.vuepress\\\\public 下的 live2d-widget 文件夹。\",\"如果网站部署在子页面 https://xxx.github.io/yyy，则需将子页面路径 yyy 加入到以下两个文件：\",\"将 docs\\\\.vuepress\\\\public\\\\live2d-widget\\\\autoload.js 文件第三行的 const live2d_path = \\\"/live2d-widget/\\\" 修改为 const live2d_path = \\\"/yyy/live2d-widget/\\\"。\",\"将 docs\\\\.vuepress\\\\templateBuild.html 文件中看板娘区块代码 <script src=\\\"/live2d-widget/autoload.js\\\"> 修改为 <script src=\\\"/yyy/live2d-widget/autoload.js\\\">。\",\"如果你想要修改看板娘模型，请参考 docs\\\\.vuepress\\\\public\\\\live2d-widget 路径下的 README 和修改说明。如果你想在服务器上自建 live2d api，请注意添加跨域配置，否则可能会出现只显示文字而不显示看板娘图片的情况。\"]},\"7\":{\"h\":\"读书笔记\",\"t\":[\"读书笔记中可能会有大量的原文引用，这与 LearnData 精简化知识点的初衷并不相符。因此，我们使用 docsify 来构建读书笔记，并将其放置于 docs/reading 目录下。在生成静态页面后，该路径下的文件不会被转换为 HTML 文件，而是将被自动复制到静态网站下，完成 docsify 页面构建和独立的读书笔记搜索索引。\",\"由于读书笔记架构更换到 docsify，不能使用相对链接。请调整 docs\\\\.vuepress\\\\sidebar.ts 的 { text: \\\"读书笔记\\\", icon: \\\"read\\\", link: \\\"https://newzone.top/reading/\\\" }，将 newzone.top 替换为你的博客域名。\",\"如果你没有部署 Waline，或不需统计阅读量和评论功能，可移除 docs\\\\reading\\\\index.html 中的 Waline 代码块。\",\"waline: { serverURL: \\\"https://waline.newzone.top\\\", ... }\"]},\"8\":{\"h\":\"本地图片引用\",\"t\":[\"为了避免在生成静态页面时出现 Rollup failed to resolve import 错误，本地图片必须保存在 docs/.vuepress/public 路径下。如果图片名称为 1.png，保存在 docs/.vuepress/public/imgs 路径下，则可以使用以下链接来引用该图片：/imgs/1.png 或使用 Markdown 图片链接：![](/imgs/1.png)。本方法也适用于将附件部署到网站上。\"]},\"9\":{\"h\":\"🖥️ 网站部署\",\"t\":[\"在将 LearnData 推送到 GitHub 后，会自动生成可访问的网页。但由于国内访问 GitHub Pages 的速度不稳定，为了确保网站能够正常访问，建议增加国内的访问节点。\",\"很多人选择使用 Gitee Pages 作为国内节点，通过 GitHub Actions 将新文档同步到 Gitee 上，从而生成位于国内的静态页面 Gitee Pages。但是，Gitee Pages 有很多限制，例如必须实名认证、免费版无法自定义域名，近期也发生过下架风波。因此，我没有选择 Gitee，而是将文档同步到国内服务器（域名需要备案）或 Vercel（国外服务可能会出现断网）。\"]},\"10\":{\"h\":\"同步到服务器\",\"t\":[\"如果你的项目已经搭建好，但出现了红色的叉叉提示，这可能是 GitHub Actions 同步到服务器时发生了错误。你需要进入项目仓库的「Setting」>「Secrets」>「Action」，并添加 FTP_HOST、FTP_PORT、FTP_USERNAME 和 FTP_PASSWORD 的密钥。之后，每当文件发生变化时，GitHub Actions 就会将修改推送到服务器的 FTP 上。\",\"你也可以参考文章 GitHub 同步到 OSS，将网页部署到云存储上。\"]},\"11\":{\"h\":\"部署到 Vercel\",\"t\":[\"Vercel 的速度相对 GitHub Pages 更快，但 *.vercel.app 域名已受 DNS 污染影响。为保证国内用户访问稳定，需绑定自定义域名。\",\"Vercel 部署步骤如下：\",\"点击 或将 https://vercel.com/new/clone?repository-url=https://github.com/rockbenben/LearnData/tree/gh-pages 中的 rockbenben/LearnData 改为 你的用户名/仓库名，然后会跳转至 Vercel 进行网页部署。如果你未登录，Vercel 提示你注册或登录，请使用 GitHub 账户进行快捷登录。\",\"输入一个你喜欢的 Vercel 项目名称，默认 private 即可，然后点击 Create。\",\"创建 Vercel 项目\",\"接着，Vercel 会基于 LearnData 模板帮助你新建并初始化仓库，仓库名为你之前输入的项目名。几十秒后，满屏的烟花会庆祝你部署成功。此时，点击 Go to Dashboard 跳转到应用的控制台。\",\"Vercel 部署成功提示\"]},\"12\":{\"h\":\"🤔 常见问题\"},\"13\":{\"h\":\"网页显示异常\",\"t\":[\"如果你的网站仅显示文本而不正常加载样式和脚本，可能是因为网站路径设置错误。这通常发生在将仓库作为子路径部署时，例如 https://xxx.github.io/LearnData/。\",\"解决步骤如下：\",\"找到配置文件：在你的项目中，打开 docs/.vuepress/config.ts。\",\"修改 base 设置：将 base 配置项的值更改为你的子路径 /LearnData/。\",\"export default defineUserConfig({ base: '/LearnData/', // 其他配置... });\",\"提交并推送更改。等待 GitHub Actions 自动重新部署网站。\",\"部署后，刷新网站应能正常显示。\",\"通过正确配置 base 路径，你的网站将能够加载所有必要的资源文件，从而正确显示样式和功能。如果你的网站是部署在根路径（如 https://xxx.github.io/），那么 base 应保留默认值 /。\"]},\"14\":{\"h\":\"同步服务器报错\",\"t\":[\"Error: Input required and not supplied: server 表示服务器配置错误，请按照上方的网站部署步骤检查配置。如果你不需要将网页部署同步到服务器，可以删除 .github/workflows/main.yml 中 Sync files 区块的代码。\",\"FTPError: 530 Login authentication failed 指 FTP 密码错误或账号不存在，可使用 FileZilla 来测试 FTP 的有效性。\",\"Error: Timeout (control socket) 指同步服务器出现超时报错。如果出现该错误，可以进入 Actions 页面，点击右侧按钮「Re-run all jobs」，重新进行部署。如果错误连续出现，可以尝试关闭服务器防火墙，检查 GitHub 服务器 IP 是否屏蔽了。\"]},\"15\":{\"h\":\"Get counter failed with 403\",\"t\":[\"Get counter failed with 403 错误仅在本地运行 pnpm docs:dev 时使用非 localhost 域名会发生，静态构建过程中不会出现。这是由评论插件 Waline 引起的。要解决这个问题，只需在 docs/.vuepress/theme.ts 文件中的 plugins 部分删除 Waline 配置。\"]},\"16\":{\"h\":\"ERR_MODULE\",\"t\":[\"如果出现 Error [ERR_MODULE_NOT_FOUND]: Cannot find module 的报错，可能是第三方插件或 pacakge.json 环境依赖未正确配置。此报错出现的几率极低，如果遇到，可以使用最新版本的 package.json 和 pnpm-lock.yaml 来覆盖本地设置，或者删除主目录下的 .npmrc 文件。\"]},\"17\":{\"h\":\"本地运行 LearnData\",\"t\":[\"为了本地运行，你需要安装 npm 和 pnpm 环境，可参考环境部署教程。\",\"将 LearnData 项目下载到本地后，在项目目录下打开终端，输入命令 pnpm i 安装依赖。\",\"在终端中输入命令 pnpm docs:dev，若成功则会提示访问链接，默认为 http://localhost:8080/。\",\"本地服务运行后，修改文件时页面会同步更新预览。若需停止本地服务器，可在终端中按下 Ctrl + C。\",\"如果你想深入了解 LearnData 的高级技巧，请浏览 LearnData 博客：高效知识管理和进阶应用技巧。\"]},\"18\":{\"h\":\"博客文章样例\",\"t\":[\"博客文章内容，支持 Markdown 和 HTML 语言。\"]},\"19\":{\"c\":[\"使用指南\"]},\"20\":{\"c\":[\"页面配置\",\"使用指南\"]},\"21\":{\"h\":\"博客文章样例2\",\"t\":[\"博客文章内容，支持 Markdown 和 HTML 语言。\"]},\"22\":{\"c\":[\"工具\"]},\"23\":{\"c\":[\"页面配置\",\"使用指南\"]},\"24\":{\"h\":\"Java 基础-面向对象\",\"t\":[\"本文主要介绍Java OOP 面向对象基础和相关类图。\",\"Java 基础 - 面向对象\",\"三大特性\",\"封装\",\"继承\",\"多态\",\"类图\",\"泛化关系 (Generalization)\",\"实现关系 (Realization)\",\"聚合关系 (Aggregation)\",\"组合关系 (Composition)\",\"关联关系 (Association)\",\"依赖关系 (Dependency)\",\"参考资料\"]},\"25\":{\"h\":\"三大特性\"},\"26\":{\"h\":\"封装\",\"t\":[\"利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口来访问该对象。\",\"优点:\",\"减少耦合: 可以独立地开发、测试、优化、使用、理解和修改\",\"减轻维护的负担: 可以更容易被程序员理解，并且在调试的时候可以不影响其他模块\",\"有效地调节性能: 可以通过剖析确定哪些模块影响了系统的性能\",\"提高软件的可重用性\",\"降低了构建大型系统的风险: 即使整个系统不可用，但是这些独立的模块却有可能是可用的\",\"以下 Person 类封装 name、gender、age 等属性，外界只能通过 get() 方法获取一个 Person 对象的 name 属性和 gender 属性，而无法获取 age 属性，但是 age 属性可以供 work() 方法使用。\",\"注意到 gender 属性使用 int 数据类型进行存储，封装使得用户注意不到这种实现细节。并且在需要修改 gender 属性使用的数据类型时，也可以在不影响客户端代码的情况下进行。\",\"public class Person { private String name; private int gender; private int age; public String getName() { return name; } public String getGender() { return gender == 0 ? \\\"man\\\" : \\\"woman\\\"; } public void work() { if (18 <= age && age <= 50) { System.out.println(name + \\\" is working very hard!\\\"); } else { System.out.println(name + \\\" can't work any more!\\\"); } } }\"]},\"27\":{\"h\":\"继承\",\"t\":[\"继承实现了 IS-A 关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。\",\"继承应该遵循里氏替换原则，子类对象必须能够替换掉所有父类对象。\",\"Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为 向上转型 。\",\"Animal animal = new Cat();\"]},\"28\":{\"h\":\"多态\",\"t\":[\"多态分为编译时多态和运行时多态:\",\"编译时多态主要指方法的重载\",\"运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定\",\"运行时多态有三个条件:\",\"继承\",\"覆盖(重写)\",\"向上转型\",\"的代码中，乐器类(Instrument)有两个子类: Wind 和 Percussion，它们都覆盖了父类的 play() 方法，并且在 main() 方法中使用父类 Instrument 来引用 Wind 和 Percussion 对象。在 Instrument 引用调用 play() 方法时，会执行实际引用对象所在类的 play() 方法，而不是 Instrument 类的方法。\",\"public class Instrument { public void play() { System.out.println(\\\"Instrument is playing...\\\"); } } public class Wind extends Instrument { public void play() { System.out.println(\\\"Wind is playing...\\\"); } } public class Percussion extends Instrument { public void play() { System.out.println(\\\"Percussion is playing...\\\"); } } public class Music { public static void main(String[] args) { List<Instrument> instruments = new ArrayList<>(); instruments.add(new Wind()); instruments.add(new Percussion()); for(Instrument instrument : instruments) { instrument.play(); } } }\"]},\"29\":{\"h\":\"类图\",\"t\":[\"以下类图使用 PlantUML在新窗口打开 绘制，更多语法及使用请参考: http://plantuml.com/ 。\"]},\"30\":{\"h\":\"泛化关系 (Generalization)\",\"t\":[\"用来描述继承关系，在 Java 中使用 extends 关键字。\",\"@startuml title Generalization class Vehical class Car class Truck Vehical <|-- Car Vehical <|-- Truck @enduml\"]},\"31\":{\"h\":\"实现关系 (Realization)\",\"t\":[\"用来实现一个接口，在 Java 中使用 implements 关键字。\",\"@startuml title Realization interface MoveBehavior class Fly class Run MoveBehavior <|.. Fly MoveBehavior <|.. Run @enduml\"]},\"32\":{\"h\":\"聚合关系 (Aggregation)\",\"t\":[\"表示整体由部分组成，但是整体和部分不是强依赖的，整体不存在了部分还是会存在。\",\"@startuml title Aggregation class Computer class Keyboard class Mouse class Screen Computer o-- Keyboard Computer o-- Mouse Computer o-- Screen @enduml\"]},\"33\":{\"h\":\"组合关系 (Composition)\",\"t\":[\"和聚合不同，组合中整体和部分是强依赖的，整体不存在了部分也不存在了。比如公司和部门，公司没了部门就不存在了。但是公司和员工就属于聚合关系了，因为公司没了员工还在。\",\"@startuml title Composition class Company class DepartmentA class DepartmentB Company *-- DepartmentA Company *-- DepartmentB @enduml\"]},\"34\":{\"h\":\"关联关系 (Association)\",\"t\":[\"表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示。比如学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。\",\"@startuml title Association class School class Student School \\\"1\\\" - \\\"n\\\" Student @enduml\"]},\"35\":{\"h\":\"依赖关系 (Dependency)\",\"t\":[\"和关联关系不同的是，依赖关系是在运行过程中起作用的。A 类和 B 类是依赖关系主要有三种形式:\",\"A 类是 B 类中的(某中方法的)局部变量；\",\"A 类是 B 类方法当中的一个参数；\",\"A 类向 B 类发送消息，从而影响 B 类发生变化；\",\"@startuml title Dependency class Vehicle { move(MoveBehavior) } interface MoveBehavior { move() } note \\\"MoveBehavior.move()\\\" as N Vehicle ..> MoveBehavior Vehicle .. N @enduml\"]},\"36\":{\"h\":\"参考资料\",\"t\":[\"Java 编程思想\",\"敏捷软件开发: 原则、模式与实践\",\"面向对象设计的 SOLID 原则在新窗口打开\",\"看懂 UML 类图和时序图在新窗口打开\",\"UML 系列——时序图(顺序图)sequence diagram在新窗口打开\",\"面向对象编程三大特性 ------ 封装、继承、多态在新窗口打开\",\"javaoop基础知识总结 https://blog.csdn.net/weixin_38173324/article/details/70037927\",\"Java实现OOP(面向对象编程) https://www.cnblogs.com/AlanLee/p/6475334.html\",\"Java 抽象类与oop三大特征 http://www.cnblogs.com/wujing-hubei/p/6012105.html\"]},\"37\":{\"c\":[\"Java 基础\"]},\"38\":{\"c\":[\"Java 基础\"]},\"39\":{\"h\":\"Java 基础-知识点\",\"t\":[\"本文主要对Java基础知识点进行总结。 @pdai\",\"Java 基础 - 知识点\",\"数据类型\",\"包装类型\",\"缓存池\",\"String\",\"概览\",\"不可变的好处\",\"String, StringBuffer and StringBuilder\",\"String.intern()\",\"运算\",\"参数传递\",\"float 与 double\",\"隐式类型转换\",\"switch\",\"继承\",\"访问权限\",\"抽象类与接口\",\"super\",\"重写与重载\",\"Object 通用方法\",\"概览\",\"equals()\",\"hashCode()\",\"toString()\",\"clone()\",\"关键字\",\"final\",\"static\",\"反射\",\"异常\",\"泛型\",\"注解\",\"特性\",\"Java 各版本的新特性\",\"Java 与 C++ 的区别\",\"JRE or JDK\",\"参考资料\"]},\"40\":{\"h\":\"数据类型\"},\"41\":{\"h\":\"包装类型\",\"t\":[\"八个基本类型:\",\"boolean/1\",\"byte/8\",\"char/16\",\"short/16\",\"int/32\",\"float/32\",\"long/64\",\"double/64\",\"基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。\",\"Integer x = 2; // 装箱 int y = x; // 拆箱\"]},\"42\":{\"h\":\"缓存池\",\"t\":[\"new Integer(123) 与 Integer.valueOf(123) 的区别在于:\",\"new Integer(123) 每次都会新建一个对象\",\"Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。\",\"Integer x = new Integer(123); Integer y = new Integer(123); System.out.println(x == y); // false Integer z = Integer.valueOf(123); Integer k = Integer.valueOf(123); System.out.println(z == k); // true\",\"valueOf() 方法的实现比较简单，就是先判断值是否在缓存池中，如果在的话就直接返回缓存池的内容。\",\"public static Integer valueOf(int i) { if (i >= IntegerCache.low && i <= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)]; return new Integer(i); }\",\"在 Java 8 中，Integer 缓存池的大小默认为 -128~127。\",\"static final int low = -128; static final int high; static final Integer cache[]; static { // high value may be configured by property int h = 127; String integerCacheHighPropValue = sun.misc.VM.getSavedProperty(\\\"java.lang.Integer.IntegerCache.high\\\"); if (integerCacheHighPropValue != null) { try { int i = parseInt(integerCacheHighPropValue); i = Math.max(i, 127); // Maximum array size is Integer.MAX_VALUE h = Math.min(i, Integer.MAX_VALUE - (-low) -1); } catch( NumberFormatException nfe) { // If the property cannot be parsed into an int, ignore it. } } high = h; cache = new Integer[(high - low) + 1]; int j = low; for(int k = 0; k < cache.length; k++) cache[k] = new Integer(j++); // range [-128, 127] must be interned (JLS7 5.1.7) assert IntegerCache.high >= 127; }\",\"编译器会在缓冲池范围内的基本类型自动装箱过程调用 valueOf() 方法，因此多个 Integer 实例使用自动装箱来创建并且值相同，那么就会引用相同的对象。\",\"Integer m = 123; Integer n = 123; System.out.println(m == n); // true\",\"基本类型对应的缓冲池如下:\",\"boolean values true and false\",\"all byte values\",\"short values between -128 and 127\",\"int values between -128 and 127\",\"char in the range \\\\u0000 to \\\\u007F\",\"在使用这些基本类型对应的包装类型时，就可以直接使用缓冲池中的对象。\",\"如果在缓冲池之外：\",\"Integer m = 323; Integer n = 323; System.out.println(m == n); // false\"]},\"43\":{\"h\":\"String\"},\"44\":{\"h\":\"概览\",\"t\":[\"String 被声明为 final，因此它不可被继承。\",\"内部使用 char 数组存储数据，该数组被声明为 final，这意味着 value 数组初始化之后就不能再引用其它数组。并且 String 内部没有改变 value 数组的方法，因此可以保证 String 不可变。\",\"public final class String implements java.io.Serializable, Comparable<String>, CharSequence { /** The value is used for character storage. */ private final char value[];\"]},\"45\":{\"h\":\"不可变的好处\",\"t\":[\"1. 可以缓存 hash 值\",\"因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。不可变的特性可以使得 hash 值也不可变，因此只需要进行一次计算。\",\"2. String Pool 的需要\",\"如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。\",\"3. 安全性\",\"String 经常作为参数，String 不可变性可以保证参数不可变。例如在作为网络连接参数的情况下如果 String 是可变的，那么在网络连接过程中，String 被改变，改变 String 对象的那一方以为现在连接的是其它主机，而实际情况却不一定是。\",\"4. 线程安全\",\"String 不可变性天生具备线程安全，可以在多个线程中安全地使用。\",\"Program Creek : Why String is immutable in Java?在新窗口打开\"]},\"46\":{\"h\":\"String, StringBuffer and StringBuilder\",\"t\":[\"1. 可变性\",\"String 不可变\",\"StringBuffer 和 StringBuilder 可变\",\"2. 线程安全\",\"String 不可变，因此是线程安全的\",\"StringBuilder 不是线程安全的\",\"StringBuffer 是线程安全的，内部使用 synchronized 进行同步\",\"StackOverflow : String, StringBuffer, and StringBuilder在新窗口打开\"]},\"47\":{\"h\":\"String.intern()\",\"t\":[\"使用 String.intern() 可以保证相同内容的字符串变量引用同一的内存对象。\",\"下面示例中，s1 和 s2 采用 new String() 的方式新建了两个不同对象，而 s3 是通过 s1.intern() 方法取得一个对象引用。intern() 首先把 s1 引用的对象放到 String Pool(字符串常量池)中，然后返回这个对象引用。因此 s3 和 s1 引用的是同一个字符串常量池的对象。\",\"String s1 = new String(\\\"aaa\\\"); String s2 = new String(\\\"aaa\\\"); System.out.println(s1 == s2); // false String s3 = s1.intern(); System.out.println(s1.intern() == s3); // true\",\"如果是采用 \\\"bbb\\\" 这种使用双引号的形式创建字符串实例，会自动地将新建的对象放入 String Pool 中。\",\"String s4 = \\\"bbb\\\"; String s5 = \\\"bbb\\\"; System.out.println(s4 == s5); // true\",\"HotSpot中字符串常量池保存哪里？永久代？方法区还是堆区？\",\"运行时常量池（Runtime Constant Pool）是虚拟机规范中是方法区的一部分，在加载类和结构到虚拟机后，就会创建对应的运行时常量池；而字符串常量池是这个过程中常量字符串的存放位置。所以从这个角度，字符串常量池属于虚拟机规范中的方法区，它是一个逻辑上的概念；而堆区，永久代以及元空间是实际的存放位置。\",\"不同的虚拟机对虚拟机的规范（比如方法区）是不一样的，只有 HotSpot 才有永久代的概念。\",\"HotSpot也是发展的，由于一些问题在新窗口打开的存在，HotSpot考虑逐渐去永久代，对于不同版本的JDK，实际的存储位置是有差异的，具体看如下表格：\",\"JDK版本\",\"是否有永久代，字符串常量池放在哪里？\",\"方法区逻辑上规范，由哪些实际的部分实现的？\",\"jdk1.6及之前\",\"有永久代，运行时常量池（包括字符串常量池），静态变量存放在永久代上\",\"这个时期方法区在HotSpot中是由永久代来实现的，以至于这个时期说方法区就是指永久代\",\"jdk1.7\",\"有永久代，但已经逐步“去永久代”，字符串常量池、静态变量移除，保存在堆中；\",\"这个时期方法区在HotSpot中由永久代（类型信息、字段、方法、常量）和堆（字符串常量池、静态变量）共同实现\",\"jdk1.8及之后\",\"取消永久代，类型信息、字段、方法、常量保存在本地内存的元空间，但字符串常量池、静态变量仍在堆中\",\"这个时期方法区在HotSpot中由本地内存的元空间（类型信息、字段、方法、常量）和堆（字符串常量池、静态变量）共同实现\"]},\"48\":{\"h\":\"运算\"},\"49\":{\"h\":\"参数传递\",\"t\":[\"Java 的参数是以值传递的形式传入方法中，而不是引用传递。\",\"以下代码中 Dog dog 的 dog 是一个指针，存储的是对象的地址。在将一个参数传入一个方法时，本质上是将对象的地址以值的方式传递到形参中。因此在方法中改变指针引用的对象，那么这两个指针此时指向的是完全不同的对象，一方改变其所指向对象的内容对另一方没有影响。\",\"public class Dog { String name; Dog(String name) { this.name = name; } String getName() { return this.name; } void setName(String name) { this.name = name; } String getObjectAddress() { return super.toString(); } }\",\"public class PassByValueExample { public static void main(String[] args) { Dog dog = new Dog(\\\"A\\\"); System.out.println(dog.getObjectAddress()); // Dog@4554617c func(dog); System.out.println(dog.getObjectAddress()); // Dog@4554617c System.out.println(dog.getName()); // A } private static void func(Dog dog) { System.out.println(dog.getObjectAddress()); // Dog@4554617c dog = new Dog(\\\"B\\\"); System.out.println(dog.getObjectAddress()); // Dog@74a14482 System.out.println(dog.getName()); // B } }\",\"但是如果在方法中改变对象的字段值会改变原对象该字段值，因为改变的是同一个地址指向的内容。\",\"class PassByValueExample { public static void main(String[] args) { Dog dog = new Dog(\\\"A\\\"); func(dog); System.out.println(dog.getName()); // B } private static void func(Dog dog) { dog.setName(\\\"B\\\"); } }\",\"StackOverflow: Is Java “pass-by-reference” or “pass-by-value”?在新窗口打开\"]},\"50\":{\"h\":\"float 与 double\",\"t\":[\"1.1 字面量属于 double 类型，不能直接将 1.1 直接赋值给 float 变量，因为这是向下转型。Java 不能隐式执行向下转型，因为这会使得精度降低。\",\"// float f = 1.1;\",\"1.1f 字面量才是 float 类型。\",\"float f = 1.1f;\"]},\"51\":{\"h\":\"隐式类型转换\",\"t\":[\"因为字面量 1 是 int 类型，它比 short 类型精度要高，因此不能隐式地将 int 类型下转型为 short 类型。\",\"short s1 = 1; // s1 = s1 + 1;\",\"但是使用 += 运算符可以执行隐式类型转换。\",\"s1 += 1;\",\"上面的语句相当于将 s1 + 1 的计算结果进行了向下转型:\",\"s1 = (short) (s1 + 1);\",\"StackOverflow : Why don't Java's +=, -=, *=, /= compound assignment operators require casting?在新窗口打开\"]},\"52\":{\"h\":\"switch\",\"t\":[\"从 Java 7 开始，可以在 switch 条件判断语句中使用 String 对象。\",\"String s = \\\"a\\\"; switch (s) { case \\\"a\\\": System.out.println(\\\"aaa\\\"); break; case \\\"b\\\": System.out.println(\\\"bbb\\\"); break; }\",\"switch 不支持 long，是因为 switch 的设计初衷是对那些只有少数的几个值进行等值判断，如果值过于复杂，那么还是用 if 比较合适。\",\"// long x = 111; // switch (x) { // Incompatible types. Found: 'long', required: 'char, byte, short, int, Character, Byte, Short, Integer, String, or an enum' // case 111: // System.out.println(111); // break; // case 222: // System.out.println(222); // break; // }\",\"StackOverflow : Why can't your switch statement data type be long, Java?在新窗口打开\"]},\"53\":{\"h\":\"继承\"},\"54\":{\"h\":\"访问权限\",\"t\":[\"Java 中有三个访问权限修饰符: private、protected 以及 public，如果不加访问修饰符，表示包级可见。\",\"可以对类或类中的成员(字段以及方法)加上访问修饰符。\",\"类可见表示其它类可以用这个类创建实例对象。\",\"成员可见表示其它类可以用这个类的实例对象访问到该成员；\",\"protected 用于修饰成员，表示在继承体系中成员对于子类可见，但是这个访问修饰符对于类没有意义。\",\"设计良好的模块会隐藏所有的实现细节，把它的 API 与它的实现清晰地隔离开来。模块之间只通过它们的 API 进行通信，一个模块不需要知道其他模块的内部工作情况，这个概念被称为信息隐藏或封装。因此访问权限应当尽可能地使每个类或者成员不被外界访问。\",\"如果子类的方法重写了父类的方法，那么子类中该方法的访问级别不允许低于父类的访问级别。这是为了确保可以使用父类实例的地方都可以使用子类实例，也就是确保满足里氏替换原则。\",\"字段决不能是公有的，因为这么做的话就失去了对这个字段修改行为的控制，客户端可以对其随意修改。例如下面的例子中，AccessExample 拥有 id 共有字段，如果在某个时刻，我们想要使用 int 去存储 id 字段，那么就需要去修改所有的客户端代码。\",\"public class AccessExample { public String id; }\",\"可以使用公有的 getter 和 setter 方法来替换公有字段，这样的话就可以控制对字段的修改行为。\",\"public class AccessExample { private int id; public String getId() { return id + \\\"\\\"; } public void setId(String id) { this.id = Integer.valueOf(id); } }\",\"但是也有例外，如果是包级私有的类或者私有的嵌套类，那么直接暴露成员不会有特别大的影响。\",\"public class AccessWithInnerClassExample { private class InnerClass { int x; } private InnerClass innerClass; public AccessWithInnerClassExample() { innerClass = new InnerClass(); } public int getValue() { return innerClass.x; // 直接访问 } }\"]},\"55\":{\"h\":\"抽象类与接口\",\"t\":[\"1. 抽象类\",\"抽象类和抽象方法都使用 abstract 关键字进行声明。抽象类一般会包含抽象方法，抽象方法一定位于抽象类中。\",\"抽象类和普通类最大的区别是，抽象类不能被实例化，需要继承抽象类才能实例化其子类。\",\"public abstract class AbstractClassExample { protected int x; private int y; public abstract void func1(); public void func2() { System.out.println(\\\"func2\\\"); } }\",\"public class AbstractExtendClassExample extends AbstractClassExample { @Override public void func1() { System.out.println(\\\"func1\\\"); } }\",\"// AbstractClassExample ac1 = new AbstractClassExample(); // 'AbstractClassExample' is abstract; cannot be instantiated AbstractClassExample ac2 = new AbstractExtendClassExample(); ac2.func1();\",\"2. 接口\",\"接口是抽象类的延伸，在 Java 8 之前，它可以看成是一个完全抽象的类，也就是说它不能有任何的方法实现。\",\"从 Java 8 开始，接口也可以拥有默认的方法实现，这是因为不支持默认方法的接口的维护成本太高了。在 Java 8 之前，如果一个接口想要添加新的方法，那么要修改所有实现了该接口的类。\",\"接口的成员(字段 + 方法)默认都是 public 的，并且不允许定义为 private 或者 protected。\",\"接口的字段默认都是 static 和 final 的。\",\"public interface InterfaceExample { void func1(); default void func2(){ System.out.println(\\\"func2\\\"); } int x = 123; // int y; // Variable 'y' might not have been initialized public int z = 0; // Modifier 'public' is redundant for interface fields // private int k = 0; // Modifier 'private' not allowed here // protected int l = 0; // Modifier 'protected' not allowed here // private void fun3(); // Modifier 'private' not allowed here }\",\"public class InterfaceImplementExample implements InterfaceExample { @Override public void func1() { System.out.println(\\\"func1\\\"); } }\",\"// InterfaceExample ie1 = new InterfaceExample(); // 'InterfaceExample' is abstract; cannot be instantiated InterfaceExample ie2 = new InterfaceImplementExample(); ie2.func1(); System.out.println(InterfaceExample.x);\",\"3. 比较\",\"从设计层面上看，抽象类提供了一种 IS-A 关系，那么就必须满足里式替换原则，即子类对象必须能够替换掉所有父类对象。而接口更像是一种 LIKE-A 关系，它只是提供一种方法实现契约，并不要求接口和实现接口的类具有 IS-A 关系。\",\"从使用上来看，一个类可以实现多个接口，但是不能继承多个抽象类。\",\"接口的字段只能是 static 和 final 类型的，而抽象类的字段没有这种限制。\",\"接口的成员只能是 public 的，而抽象类的成员可以有多种访问权限。\",\"4. 使用选择\",\"使用接口:\",\"需要让不相关的类都实现一个方法，例如不相关的类都可以实现 Compareable 接口中的 compareTo() 方法；\",\"需要使用多重继承。\",\"使用抽象类:\",\"需要在几个相关的类中共享代码。\",\"需要能控制继承来的成员的访问权限，而不是都为 public。\",\"需要继承非静态和非常量字段。\",\"在很多情况下，接口优先于抽象类，因为接口没有抽象类严格的类层次结构要求，可以灵活地为一个类添加行为。并且从 Java 8 开始，接口也可以有默认的方法实现，使得修改接口的成本也变的很低。\",\"深入理解 abstract class 和 interface在新窗口打开\",\"When to Use Abstract Class and Interface在新窗口打开\"]},\"56\":{\"h\":\"super\",\"t\":[\"访问父类的构造函数: 可以使用 super() 函数访问父类的构造函数，从而委托父类完成一些初始化的工作。\",\"访问父类的成员: 如果子类重写了父类的中某个方法的实现，可以通过使用 super 关键字来引用父类的方法实现。\",\"public class SuperExample { protected int x; protected int y; public SuperExample(int x, int y) { this.x = x; this.y = y; } public void func() { System.out.println(\\\"SuperExample.func()\\\"); } }\",\"public class SuperExtendExample extends SuperExample { private int z; public SuperExtendExample(int x, int y, int z) { super(x, y); this.z = z; } @Override public void func() { super.func(); System.out.println(\\\"SuperExtendExample.func()\\\"); } }\",\"SuperExample e = new SuperExtendExample(1, 2, 3); e.func();\",\"SuperExample.func() SuperExtendExample.func()\",\"Using the Keyword super在新窗口打开\"]},\"57\":{\"h\":\"重写与重载\",\"t\":[\"1. 重写(Override)\",\"存在于继承体系中，指子类实现了一个与父类在方法声明上完全相同的一个方法。\",\"为了满足里式替换原则，重写有以下两个限制:\",\"子类方法的访问权限必须大于等于父类方法；\",\"子类方法的返回类型必须是父类方法返回类型或为其子类型。\",\"使用 @Override 注解，可以让编译器帮忙检查是否满足上面的两个限制条件。\",\"2. 重载(Overload)\",\"存在于同一个类中，指一个方法与已经存在的方法名称上相同，但是参数类型、个数、顺序至少有一个不同。\",\"应该注意的是，返回值不同，其它都相同不算是重载。\"]},\"58\":{\"h\":\"Object 通用方法\"},\"59\":{\"h\":\"概览\",\"t\":[\"public final native Class<?> getClass() public native int hashCode() public boolean equals(Object obj) protected native Object clone() throws CloneNotSupportedException public String toString() public final native void notify() public final native void notifyAll() public final native void wait(long timeout) throws InterruptedException public final void wait(long timeout, int nanos) throws InterruptedException public final void wait() throws InterruptedException protected void finalize() throws Throwable {}\"]},\"60\":{\"h\":\"equals()\",\"t\":[\"1. 等价关系\",\"(一)自反性\",\"x.equals(x); // true\",\"(二)对称性\",\"x.equals(y) == y.equals(x); // true\",\"(三)传递性\",\"if (x.equals(y) && y.equals(z)) x.equals(z); // true;\",\"(四)一致性\",\"多次调用 equals() 方法结果不变\",\"x.equals(y) == x.equals(y); // true\",\"(五)与 null 的比较\",\"对任何不是 null 的对象 x 调用 x.equals(null) 结果都为 false\",\"x.equals(null); // false;\",\"2. equals() 与 ==\",\"对于基本类型，== 判断两个值是否相等，基本类型没有 equals() 方法。\",\"对于引用类型，== 判断两个变量是否引用同一个对象，而 equals() 判断引用的对象是否等价。\",\"Integer x = new Integer(1); Integer y = new Integer(1); System.out.println(x.equals(y)); // true System.out.println(x == y); // false\",\"3. 实现\",\"检查是否为同一个对象的引用，如果是直接返回 true；\",\"检查是否是同一个类型，如果不是，直接返回 false；\",\"将 Object 对象进行转型；\",\"判断每个关键域是否相等。\",\"public class EqualExample { private int x; private int y; private int z; public EqualExample(int x, int y, int z) { this.x = x; this.y = y; this.z = z; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; EqualExample that = (EqualExample) o; if (x != that.x) return false; if (y != that.y) return false; return z == that.z; } }\"]},\"61\":{\"h\":\"hashCode()\",\"t\":[\"hashCode() 返回散列值，而 equals() 是用来判断两个对象是否等价。等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价。\",\"在覆盖 equals() 方法时应当总是覆盖 hashCode() 方法，保证等价的两个对象散列值也相等。\",\"下面的代码中，新建了两个等价的对象，并将它们添加到 HashSet 中。我们希望将这两个对象当成一样的，只在集合中添加一个对象，但是因为 EqualExample 没有实现 hasCode() 方法，因此这两个对象的散列值是不同的，最终导致集合添加了两个等价的对象。\",\"EqualExample e1 = new EqualExample(1, 1, 1); EqualExample e2 = new EqualExample(1, 1, 1); System.out.println(e1.equals(e2)); // true HashSet<EqualExample> set = new HashSet<>(); set.add(e1); set.add(e2); System.out.println(set.size()); // 2\",\"理想的散列函数应当具有均匀性，即不相等的对象应当均匀分布到所有可能的散列值上。这就要求了散列函数要把所有域的值都考虑进来，可以将每个域都当成 R 进制的某一位，然后组成一个 R 进制的整数。R 一般取 31，因为它是一个奇素数，如果是偶数的话，当出现乘法溢出，信息就会丢失，因为与 2 相乘相当于向左移一位。\",\"一个数与 31 相乘可以转换成移位和减法: 31*x == (x<<5)-x，编译器会自动进行这个优化。\",\"@Override public int hashCode() { int result = 17; result = 31 * result + x; result = 31 * result + y; result = 31 * result + z; return result; }\"]},\"62\":{\"h\":\"toString()\",\"t\":[\"默认返回 ToStringExample@4554617c 这种形式，其中 @ 后面的数值为散列码的无符号十六进制表示。\",\"public class ToStringExample { private int number; public ToStringExample(int number) { this.number = number; } }\",\"ToStringExample example = new ToStringExample(123); System.out.println(example.toString());\",\"ToStringExample@4554617c\"]},\"63\":{\"h\":\"clone()\",\"t\":[\"1. cloneable\",\"clone() 是 Object 的 protected 方法，它不是 public，一个类不显式去重写 clone()，其它类就不能直接去调用该类实例的 clone() 方法。\",\"public class CloneExample { private int a; private int b; }\",\"CloneExample e1 = new CloneExample(); // CloneExample e2 = e1.clone(); // 'clone()' has protected access in 'java.lang.Object'\",\"重写 clone() 得到以下实现:\",\"public class CloneExample { private int a; private int b; @Override protected CloneExample clone() throws CloneNotSupportedException { return (CloneExample)super.clone(); } }\",\"CloneExample e1 = new CloneExample(); try { CloneExample e2 = e1.clone(); } catch (CloneNotSupportedException e) { e.printStackTrace(); }\",\"java.lang.CloneNotSupportedException: CloneExample\",\"以上抛出了 CloneNotSupportedException，这是因为 CloneExample 没有实现 Cloneable 接口。\",\"应该注意的是，clone() 方法并不是 Cloneable 接口的方法，而是 Object 的一个 protected 方法。Cloneable 接口只是规定，如果一个类没有实现 Cloneable 接口又调用了 clone() 方法，就会抛出 CloneNotSupportedException。\",\"public class CloneExample implements Cloneable { private int a; private int b; @Override protected Object clone() throws CloneNotSupportedException { return super.clone(); } }\",\"2. 浅拷贝\",\"拷贝对象和原始对象的引用类型引用同一个对象。\",\"public class ShallowCloneExample implements Cloneable { private int[] arr; public ShallowCloneExample() { arr = new int[10]; for (int i = 0; i < arr.length; i++) { arr[i] = i; } } public void set(int index, int value) { arr[index] = value; } public int get(int index) { return arr[index]; } @Override protected ShallowCloneExample clone() throws CloneNotSupportedException { return (ShallowCloneExample) super.clone(); } }\",\"ShallowCloneExample e1 = new ShallowCloneExample(); ShallowCloneExample e2 = null; try { e2 = e1.clone(); } catch (CloneNotSupportedException e) { e.printStackTrace(); } e1.set(2, 222); System.out.println(e2.get(2)); // 222\",\"3. 深拷贝\",\"拷贝对象和原始对象的引用类型引用不同对象。\",\"public class DeepCloneExample implements Cloneable { private int[] arr; public DeepCloneExample() { arr = new int[10]; for (int i = 0; i < arr.length; i++) { arr[i] = i; } } public void set(int index, int value) { arr[index] = value; } public int get(int index) { return arr[index]; } @Override protected DeepCloneExample clone() throws CloneNotSupportedException { DeepCloneExample result = (DeepCloneExample) super.clone(); result.arr = new int[arr.length]; for (int i = 0; i < arr.length; i++) { result.arr[i] = arr[i]; } return result; } }\",\"DeepCloneExample e1 = new DeepCloneExample(); DeepCloneExample e2 = null; try { e2 = e1.clone(); } catch (CloneNotSupportedException e) { e.printStackTrace(); } e1.set(2, 222); System.out.println(e2.get(2)); // 2\",\"4. clone() 的替代方案\",\"使用 clone() 方法来拷贝一个对象即复杂又有风险，它会抛出异常，并且还需要类型转换。Effective Java 书上讲到，最好不要去使用 clone()，可以使用拷贝构造函数或者拷贝工厂来拷贝一个对象。\",\"public class CloneConstructorExample { private int[] arr; public CloneConstructorExample() { arr = new int[10]; for (int i = 0; i < arr.length; i++) { arr[i] = i; } } public CloneConstructorExample(CloneConstructorExample original) { arr = new int[original.arr.length]; for (int i = 0; i < original.arr.length; i++) { arr[i] = original.arr[i]; } } public void set(int index, int value) { arr[index] = value; } public int get(int index) { return arr[index]; } }\",\"CloneConstructorExample e1 = new CloneConstructorExample(); CloneConstructorExample e2 = new CloneConstructorExample(e1); e1.set(2, 222); System.out.println(e2.get(2)); // 2\"]},\"64\":{\"h\":\"关键字\"},\"65\":{\"h\":\"final\",\"t\":[\"1. 数据\",\"声明数据为常量，可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量。\",\"对于基本类型，final 使数值不变；\",\"对于引用类型，final 使引用不变，也就不能引用其它对象，但是被引用的对象本身是可以修改的。\",\"final int x = 1; // x = 2; // cannot assign value to final variable 'x' final A y = new A(); y.a = 1;\",\"2. 方法\",\"声明方法不能被子类重写。\",\"private 方法隐式地被指定为 final，如果在子类中定义的方法和基类中的一个 private 方法签名相同，此时子类的方法不是重写基类方法，而是在子类中定义了一个新的方法。\",\"3. 类\",\"声明类不允许被继承。\"]},\"66\":{\"h\":\"static\",\"t\":[\"1. 静态变量\",\"静态变量: 又称为类变量，也就是说这个变量属于类的，类所有的实例都共享静态变量，可以直接通过类名来访问它；静态变量在内存中只存在一份。\",\"实例变量: 每创建一个实例就会产生一个实例变量，它与该实例同生共死。\",\"public class A { private int x; // 实例变量 private static int y; // 静态变量 public static void main(String[] args) { // int x = A.x; // Non-static field 'x' cannot be referenced from a static context A a = new A(); int x = a.x; int y = A.y; } }\",\"2. 静态方法\",\"静态方法在类加载的时候就存在了，它不依赖于任何实例。所以静态方法必须有实现，也就是说它不能是抽象方法(abstract)。\",\"public abstract class A { public static void func1(){ } // public abstract static void func2(); // Illegal combination of modifiers: 'abstract' and 'static' }\",\"只能访问所属类的静态字段和静态方法，方法中不能有 this 和 super 关键字。\",\"public class A { private static int x; private int y; public static void func1(){ int a = x; // int b = y; // Non-static field 'y' cannot be referenced from a static context // int b = this.y; // 'A.this' cannot be referenced from a static context } }\",\"3. 静态语句块\",\"静态语句块在类初始化时运行一次。\",\"public class A { static { System.out.println(\\\"123\\\"); } public static void main(String[] args) { A a1 = new A(); A a2 = new A(); } }\",\"123\",\"4. 静态内部类\",\"非静态内部类依赖于外部类的实例，而静态内部类不需要。\",\"public class OuterClass { class InnerClass { } static class StaticInnerClass { } public static void main(String[] args) { // InnerClass innerClass = new InnerClass(); // 'OuterClass.this' cannot be referenced from a static context OuterClass outerClass = new OuterClass(); InnerClass innerClass = outerClass.new InnerClass(); StaticInnerClass staticInnerClass = new StaticInnerClass(); } }\",\"静态内部类不能访问外部类的非静态的变量和方法。\",\"5. 静态导包\",\"在使用静态变量和方法时不用再指明 ClassName，从而简化代码，但可读性大大降低。\",\"import static com.xxx.ClassName.*\",\"6. 初始化顺序\",\"静态变量和静态语句块优先于实例变量和普通语句块，静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序。\",\"public static String staticField = \\\"静态变量\\\";\",\"static { System.out.println(\\\"静态语句块\\\"); }\",\"public String field = \\\"实例变量\\\";\",\"{ System.out.println(\\\"普通语句块\\\"); }\",\"最后才是构造函数的初始化。\",\"public InitialOrderTest() { System.out.println(\\\"构造函数\\\"); }\",\"存在继承的情况下，初始化顺序为:\",\"父类(静态变量、静态语句块)\",\"子类(静态变量、静态语句块)\",\"父类(实例变量、普通语句块)\",\"父类(构造函数)\",\"子类(实例变量、普通语句块)\",\"子类(构造函数)\"]},\"67\":{\"h\":\"反射\",\"t\":[\"每个类都有一个 Class 对象，包含了与类有关的信息。当编译一个新类时，会产生一个同名的 .class 文件，该文件内容保存着 Class 对象。\",\"类加载相当于 Class 对象的加载。类在第一次使用时才动态加载到 JVM 中，可以使用 Class.forName(\\\"com.mysql.jdbc.Driver\\\") 这种方式来控制类的加载，该方法会返回一个 Class 对象。\",\"反射可以提供运行时的类信息，并且这个类可以在运行时才加载进来，甚至在编译时期该类的 .class 不存在也可以加载进来。\",\"Class 和 java.lang.reflect 一起对反射提供了支持，java.lang.reflect 类库主要包含了以下三个类:\",\"Field : 可以使用 get() 和 set() 方法读取和修改 Field 对象关联的字段；\",\"Method : 可以使用 invoke() 方法调用与 Method 对象关联的方法；\",\"Constructor : 可以用 Constructor 创建新的对象。\",\"Advantages of Using Reflection:\",\"Extensibility Features : An application may make use of external, user-defined classes by creating instances of extensibility objects using their fully-qualified names.\",\"Class Browsers and Visual Development Environments : A class browser needs to be able to enumerate the members of classes. Visual development environments can benefit from making use of type information available in reflection to aid the developer in writing correct code.\",\"Debuggers and Test Tools : Debuggers need to be able to examine private members on classes. Test harnesses can make use of reflection to systematically call a discoverable set APIs defined on a class, to insure a high level of code coverage in a test suite.\",\"Drawbacks of Reflection:\",\"Reflection is powerful, but should not be used indiscriminately. If it is possible to perform an operation without using reflection, then it is preferable to avoid using it. The following concerns should be kept in mind when accessing code via reflection.\",\"Performance Overhead : Because reflection involves types that are dynamically resolved, certain Java virtual machine optimizations can not be performed. Consequently, reflective operations have slower performance than their non-reflective counterparts, and should be avoided in sections of code which are called frequently in performance-sensitive applications.\",\"Security Restrictions : Reflection requires a runtime permission which may not be present when running under a security manager. This is in an important consideration for code which has to run in a restricted security context, such as in an Applet.\",\"Exposure of Internals :Since reflection allows code to perform operations that would be illegal in non-reflective code, such as accessing private fields and methods, the use of reflection can result in unexpected side-effects, which may render code dysfunctional and may destroy portability. Reflective code breaks abstractions and therefore may change behavior with upgrades of the platform.\",\"相关文章：Java 基础 - 反射机制详解\"]},\"68\":{\"h\":\"异常\",\"t\":[\"Throwable 可以用来表示任何可以作为异常抛出的类，分为两种: Error 和 Exception。其中 Error 用来表示 JVM 无法处理的错误，Exception 分为两种:\",\"受检异常 : 需要用 try...catch... 语句捕获并进行处理，并且可以从异常中恢复；\",\"非受检异常 : 是程序运行时错误，例如除 0 会引发 Arithmetic Exception，此时程序崩溃并且无法恢复。\",\"相关文章：Java 基础 - 异常机制详解\"]},\"69\":{\"h\":\"泛型\",\"t\":[\"public class Box<T> { // T stands for \\\"Type\\\" private T t; public void set(T t) { this.t = t; } public T get() { return t; } }\",\"相关文章：Java 基础 - 泛型机制详解\"]},\"70\":{\"h\":\"注解\",\"t\":[\"Java 注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。注解不会也不能影响代码的实际逻辑，仅仅起到辅助性的作用。\",\"相关文章：Java 基础 - 注解机制详解\"]},\"71\":{\"h\":\"特性\"},\"72\":{\"h\":\"Java 各版本的新特性\",\"t\":[\"New highlights in Java SE 8\",\"Lambda Expressions\",\"Pipelines and Streams\",\"Date and Time API\",\"Default Methods\",\"Type Annotations\",\"Nashhorn JavaScript Engine\",\"Concurrent Accumulators\",\"Parallel operations\",\"PermGen Error Removed\",\"New highlights in Java SE 7\",\"Strings in Switch Statement\",\"Type Inference for Generic Instance Creation\",\"Multiple Exception Handling\",\"Support for Dynamic Languages\",\"Try with Resources\",\"Java nio Package\",\"Binary Literals, Underscore in literals\",\"Diamond Syntax\",\"Difference between Java 1.8 and Java 1.7?在新窗口打开\",\"Java 8 特性在新窗口打开\"]},\"73\":{\"h\":\"Java 与 C++ 的区别\",\"t\":[\"Java 是纯粹的面向对象语言，所有的对象都继承自 java.lang.Object，C++ 为了兼容 C 即支持面向对象也支持面向过程。\",\"Java 通过虚拟机从而实现跨平台特性，但是 C++ 依赖于特定的平台。\",\"Java 没有指针，它的引用可以理解为安全指针，而 C++ 具有和 C 一样的指针。\",\"Java 支持自动垃圾回收，而 C++ 需要手动回收。\",\"Java 不支持多重继承，只能通过实现多个接口来达到相同目的，而 C++ 支持多重继承。\",\"Java 不支持操作符重载，虽然可以对两个 String 对象支持加法运算，但是这是语言内置支持的操作，不属于操作符重载，而 C++ 可以。\",\"Java 的 goto 是保留字，但是不可用，C++ 可以使用 goto。\",\"Java 不支持条件编译，C++ 通过 #ifdef #ifndef 等预处理命令从而实现条件编译。\",\"What are the main differences between Java and C++?在新窗口打开\"]},\"74\":{\"h\":\"JRE or JDK\",\"t\":[\"JRE is the JVM program, Java application need to run on JRE.\",\"JDK is a superset of JRE, JRE + tools for developing java programs. e.g, it provides the compiler \\\"javac\\\"\"]},\"75\":{\"h\":\"参考资料\",\"t\":[\"Eckel B. Java 编程思想[M]. 机械工业出版社, 2002.\",\"Bloch J. Effective java[M]. Addison-Wesley Professional, 2017.\"]},\"76\":{\"c\":[\"Java 基础\"]},\"77\":{\"c\":[\"Java 基础\"]},\"78\":{\"h\":\"Java 基础-面向对象\",\"t\":[\"本文主要介绍Java OOP 面向对象基础和相关类图。\",\"Java 基础 - 面向对象\",\"三大特性\",\"封装\",\"继承\",\"多态\",\"类图\",\"泛化关系 (Generalization)\",\"实现关系 (Realization)\",\"聚合关系 (Aggregation)\",\"组合关系 (Composition)\",\"关联关系 (Association)\",\"依赖关系 (Dependency)\",\"参考资料\"]},\"79\":{\"h\":\"三大特性\"},\"80\":{\"h\":\"封装\",\"t\":[\"利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口来访问该对象。\",\"优点:\",\"减少耦合: 可以独立地开发、测试、优化、使用、理解和修改\",\"减轻维护的负担: 可以更容易被程序员理解，并且在调试的时候可以不影响其他模块\",\"有效地调节性能: 可以通过剖析确定哪些模块影响了系统的性能\",\"提高软件的可重用性\",\"降低了构建大型系统的风险: 即使整个系统不可用，但是这些独立的模块却有可能是可用的\",\"以下 Person 类封装 name、gender、age 等属性，外界只能通过 get() 方法获取一个 Person 对象的 name 属性和 gender 属性，而无法获取 age 属性，但是 age 属性可以供 work() 方法使用。\",\"注意到 gender 属性使用 int 数据类型进行存储，封装使得用户注意不到这种实现细节。并且在需要修改 gender 属性使用的数据类型时，也可以在不影响客户端代码的情况下进行。\",\"public class Person { private String name; private int gender; private int age; public String getName() { return name; } public String getGender() { return gender == 0 ? \\\"man\\\" : \\\"woman\\\"; } public void work() { if (18 <= age && age <= 50) { System.out.println(name + \\\" is working very hard!\\\"); } else { System.out.println(name + \\\" can't work any more!\\\"); } } }\"]},\"81\":{\"h\":\"继承\",\"t\":[\"继承实现了 IS-A 关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。\",\"继承应该遵循里氏替换原则，子类对象必须能够替换掉所有父类对象。\",\"Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为 向上转型 。\",\"Animal animal = new Cat();\"]},\"82\":{\"h\":\"多态\",\"t\":[\"多态分为编译时多态和运行时多态:\",\"编译时多态主要指方法的重载\",\"运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定\",\"运行时多态有三个条件:\",\"继承\",\"覆盖(重写)\",\"向上转型\",\"下面的代码中，乐器类(Instrument)有两个子类: Wind 和 Percussion，它们都覆盖了父类的 play() 方法，并且在 main() 方法中使用父类 Instrument 来引用 Wind 和 Percussion 对象。在 Instrument 引用调用 play() 方法时，会执行实际引用对象所在类的 play() 方法，而不是 Instrument 类的方法。\",\"public class Instrument { public void play() { System.out.println(\\\"Instrument is playing...\\\"); } } public class Wind extends Instrument { public void play() { System.out.println(\\\"Wind is playing...\\\"); } } public class Percussion extends Instrument { public void play() { System.out.println(\\\"Percussion is playing...\\\"); } } public class Music { public static void main(String[] args) { List<Instrument> instruments = new ArrayList<>(); instruments.add(new Wind()); instruments.add(new Percussion()); for(Instrument instrument : instruments) { instrument.play(); } } }\"]},\"83\":{\"h\":\"类图\",\"t\":[\"以下类图使用 PlantUML在新窗口打开 绘制，更多语法及使用请参考: http://plantuml.com/ 。\"]},\"84\":{\"h\":\"泛化关系 (Generalization)\",\"t\":[\"用来描述继承关系，在 Java 中使用 extends 关键字。\",\"@startuml title Generalization class Vehical class Car class Truck Vehical <|-- Car Vehical <|-- Truck @enduml\"]},\"85\":{\"h\":\"实现关系 (Realization)\",\"t\":[\"用来实现一个接口，在 Java 中使用 implements 关键字。\",\"@startuml title Realization interface MoveBehavior class Fly class Run MoveBehavior <|.. Fly MoveBehavior <|.. Run @enduml\"]},\"86\":{\"h\":\"聚合关系 (Aggregation)\",\"t\":[\"表示整体由部分组成，但是整体和部分不是强依赖的，整体不存在了部分还是会存在。\",\"@startuml title Aggregation class Computer class Keyboard class Mouse class Screen Computer o-- Keyboard Computer o-- Mouse Computer o-- Screen @enduml\"]},\"87\":{\"h\":\"组合关系 (Composition)\",\"t\":[\"和聚合不同，组合中整体和部分是强依赖的，整体不存在了部分也不存在了。比如公司和部门，公司没了部门就不存在了。但是公司和员工就属于聚合关系了，因为公司没了员工还在。\",\"@startuml title Composition class Company class DepartmentA class DepartmentB Company *-- DepartmentA Company *-- DepartmentB @enduml\"]},\"88\":{\"h\":\"关联关系 (Association)\",\"t\":[\"表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。因此也可以用 1 对 1、多对 1、多对多这种关联关系来表示。比如学生和学校就是一种关联关系，一个学校可以有很多学生，但是一个学生只属于一个学校，因此这是一种多对一的关系，在运行开始之前就可以确定。\",\"@startuml title Association class School class Student School \\\"1\\\" - \\\"n\\\" Student @enduml\"]},\"89\":{\"h\":\"依赖关系 (Dependency)\",\"t\":[\"和关联关系不同的是，依赖关系是在运行过程中起作用的。A 类和 B 类是依赖关系主要有三种形式:\",\"A 类是 B 类中的(某中方法的)局部变量；\",\"A 类是 B 类方法当中的一个参数；\",\"A 类向 B 类发送消息，从而影响 B 类发生变化；\",\"@startuml title Dependency class Vehicle { move(MoveBehavior) } interface MoveBehavior { move() } note \\\"MoveBehavior.move()\\\" as N Vehicle ..> MoveBehavior Vehicle .. N @enduml\"]},\"90\":{\"h\":\"参考资料\",\"t\":[\"Java 编程思想\",\"敏捷软件开发: 原则、模式与实践\",\"面向对象设计的 SOLID 原则在新窗口打开\",\"看懂 UML 类图和时序图在新窗口打开\",\"UML 系列——时序图(顺序图)sequence diagram在新窗口打开\",\"面向对象编程三大特性 ------ 封装、继承、多态在新窗口打开\",\"javaoop基础知识总结 https://blog.csdn.net/weixin_38173324/article/details/70037927\",\"Java实现OOP(面向对象编程) https://www.cnblogs.com/AlanLee/p/6475334.html\",\"Java 抽象类与oop三大特征 http://www.cnblogs.com/wujing-hubei/p/6012105.html\"]},\"91\":{\"c\":[\"Java 基础\"]},\"92\":{\"c\":[\"Java 基础\"]},\"93\":{\"h\":\"# ♥Spring框架知识体系详解♥\",\"t\":[\"提示\",\"本系列主要介绍Spring框架整体架构，Spring的核心IOC，AOP的案例和具体实现机制；以及SpringMVC框架的案例和实现机制。@pdai\"]},\"94\":{\"h\":\"相关文章\",\"t\":[\"首先， 从Spring框架的整体架构和组成对整体框架有个认知。\",\"Spring基础 - Spring和Spring框架组成\",\"Spring是什么？它是怎么诞生的？有哪些主要的组件和核心功能呢? 本文通过这几个问题帮助你构筑Spring和Spring Framework的整体认知。\",\"其次，通过案例引出Spring的核心（IoC和AOP），同时对IoC和AOP进行案例使用分析。\",\"Spring基础 - Spring简单例子引入Spring的核心\",\"上文中我们简单介绍了Spring和Spring Framework的组件，那么这些Spring Framework组件是如何配合工作的呢？本文主要承接上文，向你展示Spring Framework组件的典型应用场景和基于这个场景设计出的简单案例，并以此引出Spring的核心要点，比如IOC和AOP等；在此基础上还引入了不同的配置方式， 如XML，Java配置和注解方式的差异。\",\"Spring基础 - Spring核心之控制反转(IOC)\",\"在Spring基础 - Spring简单例子引入Spring的核心中向你展示了IoC的基础含义，同时以此发散了一些IoC相关知识点; 本节将在此基础上进一步解读IOC的含义以及IOC的使用方式\",\"Spring基础 - Spring核心之面向切面编程(AOP)\",\"在Spring基础 - Spring简单例子引入Spring的核心中向你展示了AOP的基础含义，同时以此发散了一些AOP相关知识点; 本节将在此基础上进一步解读AOP的含义以及AOP的使用方式。\",\"基于Spring框架和IOC，AOP的基础，为构建上层web应用，需要进一步学习SpringMVC。\",\"Spring基础 - SpringMVC请求流程和案例\",\"前文我们介绍了Spring框架和Spring框架中最为重要的两个技术点（IOC和AOP），那我们如何更好的构建上层的应用呢（比如web 应用），这便是SpringMVC；Spring MVC是Spring在Spring Container Core和AOP等技术基础上，遵循上述Web MVC的规范推出的web开发框架，目的是为了简化Java栈的web开发。 本文主要介绍SpringMVC的请求流程和基础案例的编写和运行。\",\"Spring进阶 - IoC，AOP以及SpringMVC的源码分析\",\"Spring进阶 - Spring IOC实现原理详解之IOC体系结构设计\",\"在对IoC有了初步的认知后，我们开始对IOC的实现原理进行深入理解。本文将帮助你站在设计者的角度去看IOC最顶层的结构设计\",\"Spring进阶 - Spring IOC实现原理详解之IOC初始化流程\",\"上文，我们看了IOC设计要点和设计结构；紧接着这篇，我们可以看下源码的实现了：Spring如何实现将资源配置（以xml配置为例）通过加载，解析，生成BeanDefination并注册到IoC容器中的\",\"Spring进阶 - Spring IOC实现原理详解之Bean实例化(生命周期,循环依赖等)\",\"上文，我们看了IOC设计要点和设计结构；以及Spring如何实现将资源配置（以xml配置为例）通过加载，解析，生成BeanDefination并注册到IoC容器中的；容器中存放的是Bean的定义即BeanDefinition放到beanDefinitionMap中，本质上是一个ConcurrentHashMap<String, Object>；并且BeanDefinition接口中包含了这个类的Class信息以及是否是单例等。那么如何从BeanDefinition中实例化Bean对象呢，这是本文主要研究的内容？\",\"Spring进阶 - Spring AOP实现原理详解之切面实现\",\"前文，我们分析了Spring IOC的初始化过程和Bean的生命周期等，而Spring AOP也是基于IOC的Bean加载来实现的。本文主要介绍Spring AOP原理解析的切面实现过程(将切面类的所有切面方法根据使用的注解生成对应Advice，并将Advice连同切入点匹配器和切面类等信息一并封装到Advisor，为后续交给代理增强实现做准备的过程)。\",\"Spring进阶 - Spring AOP实现原理详解之AOP代理\",\"上文我们介绍了Spring AOP原理解析的切面实现过程(将切面类的所有切面方法根据使用的注解生成对应Advice，并将Advice连同切入点匹配器和切面类等信息一并封装到Advisor)。本文在此基础上继续介绍，代理（cglib代理和JDK代理）的实现过程。\",\"Spring进阶 - Spring AOP实现原理详解之Cglib代理实现\",\"我们在前文中已经介绍了SpringAOP的切面实现和创建动态代理的过程，那么动态代理是如何工作的呢？本文主要介绍Cglib动态代理的案例和SpringAOP实现的原理。\",\"Spring进阶 - Spring AOP实现原理详解之JDK代理实现\",\"上文我们学习了SpringAOP Cglib动态代理的实现，本文主要是SpringAOP JDK动态代理的案例和实现部分。\",\"Spring进阶 - SpringMVC实现原理之DispatcherServlet初始化的过程\",\"前文我们有了IOC的源码基础以及SpringMVC的基础，我们便可以进一步深入理解SpringMVC主要实现原理，包含DispatcherServlet的初始化过程和DispatcherServlet处理请求的过程的源码解析。本文是第一篇：DispatcherServlet的初始化过程的源码解析。\",\"Spring进阶 - SpringMVC实现原理之DispatcherServlet处理请求的过程\",\"前文我们有了IOC的源码基础以及SpringMVC的基础，我们便可以进一步深入理解SpringMVC主要实现原理，包含DispatcherServlet的初始化过程和DispatcherServlet处理请求的过程的源码解析。本文是第二篇：DispatcherServlet处理请求的过程的源码解析。\"]},\"95\":{\"h\":\"# ♥数据结构基础知识体系详解♥\",\"t\":[\"提示\",\"对于数据结构这种基础内容，在构建其知识体系时要避免自己再造轮子，需要高一点层次整体上去理解它(格局要大一点，不要盯着代码)，要了解算法思想，性能及适用场景，用一些工具和别人梳理的结果帮助自己构建知识体系等。@pdai\",\"知识体系\",\"入门推荐\",\"进阶推荐\",\"参考文章# 知识体系\",\"知识体系系统性梳理\",\"学习思路\",\"避免孤立的学习知识点，要关联学习。比如实际应用当中，我们经常使用的是查找和排序操作，这在我们的各种管理系统、数据库系统、操作系统等当中，十分常用，我们通过这个线索将知识点串联起来：\",\"数组的下标寻址十分迅速，但计算机的内存是有限的，故数组的长度也是有限的，实际应用当中的数据往往十分庞大；而且无序数组的查找最坏情况需要遍历整个数组；后来人们提出了二分查找，二分查找要求数组的构造一定有序，二分法查找解决了普通数组查找复杂度过高的问题。任何一种数组无法解决的问题就是插入、删除操作比较复杂，因此，在一个增删查改比较频繁的数据结构中，数组不会被优先考虑\",\"普通链表由于它的结构特点被证明根本不适合进行查找\",\"哈希表是数组和链表的折中，同时它的设计依赖散列函数的设计，数组不能无限长、链表也不适合查找，所以也不适合大规模的查找\",\"二叉查找树因为可能退化成链表，同样不适合进行查找\",\"AVL树是为了解决可能退化成链表问题，但是AVL树的旋转过程非常麻烦，因此插入和删除很慢，也就是构建AVL树比较麻烦\",\"红黑树是平衡二叉树和AVL树的折中，因此是比较合适的。集合类中的Map、关联数组具有较高的查询效率，它们的底层实现就是红黑树。\",\"多路查找树 是大规模数据存储中，实现索引查询这样一个实际背景下，树节点存储的元素数量是有限的(如果元素数量非常多的话，查找就退化成节点内部的线性查找了)，这样导致二叉查找树结构由于树的深度过大而造成磁盘I/O读写过于频繁，进而导致查询效率低下。\",\"B树与自平衡二叉查找树不同，B树适用于读写相对大的数据块的存储系统，例如磁盘。它的应用是文件系统及部分非关系型数据库索引。\",\"B+树在B树基础上，为叶子结点增加链表指针(B树+叶子有序链表)，所有关键字都在叶子结点 中出现，非叶子结点作为叶子结点的索引；B+树总是到叶子结点才命中。通常用于关系型数据库(如Mysql)和操作系统的文件系统中。\",\"B*树是B+树的变体，在B+树的非根和非叶子结点再增加指向兄弟的指针, 在B+树基础上，为非叶子结点也增加链表指针，将结点的最低利用率从1/2提高到2/3。\",\"R树是用来做空间数据存储的树状数据结构。例如给地理位置，矩形和多边形这类多维数据建立索引。\",\"Trie树是自然语言处理中最常用的数据结构，很多字符串处理任务都会用到。Trie树本身是一种有限状态自动机，还有很多变体。什么模式匹配、正则表达式，都与这有关。\",\"相关文章\",\"A. 数据结构 知识点：数据结构是基础中的基础，任何进阶都逃不开这些知识点。\",\"数据结构 - Overview\",\"B. 数据结构之 线性结构：首先理解数据结构中线性结构及其延伸：数组和矩阵，链表，栈和队列等。\",\"线性表 - 数组和矩阵\",\"数组是一种连续存储线性结构，元素类型相同，大小相等，数组是多维的，通过使用整型索引值来访问他们的元素，数组尺寸不能改变\",\"线性表 - 链表\",\"n个节点离散分配，彼此通过指针相连，每个节点只有一个前驱节点，每个节点只有一个后续节点，首节点没有前驱节点，尾节点没有后续节点。确定一个链表我们只需要头指针，通过头指针就可以把整个链表都能推出来\",\"线性表(散列) - 哈希表\",\"散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。@pdai\",\"线性表 - 栈和队列\",\"数组和链表都是线性存储结构的基础，栈和队列都是线性存储结构的应用\",\"C. 数据结构之 逻辑结构：树：然后理解数据结构中逻辑结构之树：二叉搜索树(BST)，平衡二叉树(AVL)，红黑树(R-B Tree)，哈夫曼树，前缀树(Trie)等。\",\"树 - 基础和Overview\",\"树在数据结构中至关重要，这里展示树的整体知识体系结构和几种常见树类型\",\"树 - 二叉搜索树(BST)\",\"本文主要介绍 二叉树中最基本的二叉查找树（Binary Search Tree），（又：二叉搜索树，二叉排序树）它或者是一棵空树，或者是具有下列性质的二叉树： 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。\",\"树 - 平衡二叉树(AVL)\",\"平衡二叉树（Balanced Binary Tree）具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等。 最小二叉平衡树的节点的公式如下 F(n)=F(n-1)+F(n-2)+1 这个类似于一个递归的数列，可以参考Fibonacci数列，1是根节点，F(n-1)是左子树的节点数量，F(n-2)是右子树的节点数量。\",\"树 - 红黑树(R-B Tree)\",\"红黑树（Red Black Tree） 是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组，是平衡二叉树和AVL树的折中。\",\"树 - 哈夫曼树\",\"哈夫曼又称最优二叉树, 是一种带权路径长度最短的二叉树。\",\"树 - 前缀树(Trie)\",\"Trie，又称字典树、单词查找树或键树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。\",\"D. 数据结构之 逻辑结构：图：最后理解数据结构中逻辑结构之图：图基础，图的遍历，最小生成树(Prim & Kruskal)，最短路径(Dijkstra & Frolyd)，拓扑排序(Topological sort)，AOE & 关键路径等。\",\"图 - 基础和Overview\",\"图(Graph)是由顶点和连接顶点的边构成的离散结构。在计算机科学中，图是最灵活的数据结构之一，很多问题都可以使用图模型进行建模求解。例如: 生态环境中不同物种的相互竞争、人与人之间的社交与关系网络、化学上用图区分结构不同但分子式相同的同分异构体、分析计算机网络的拓扑结构确定两台计算机是否可以通信、找到两个城市之间的最短路径等等。\",\"图 - 遍历(BFS & DFS)\",\"图的深度优先搜索(Depth First Search)，和树的先序遍历比较类似; 广度优先搜索算法(Breadth First Search)，又称为\\\"宽度优先搜索\\\"或\\\"横向优先搜索\\\"\",\"图 - 最小生成树(Prim & Kruskal)\",\"Kruskal算法是从最小权重边着手，将森林里的树逐渐合并；prim算法是从顶点出发，在根结点的基础上建起一棵树\",\"图 - 最短路径(Dijkstra & Frolyd)\",\"最短路径有着广泛的应用，比如地图两点间距离计算，公交查询系统，路由选择等\",\"图 - 拓扑排序(Topological sort)\",\"拓扑排序主要用来解决有向图中的依赖解析(dependency resolution)问题\",\"图 - AOE & 关键路径\",\"关键路径在项目管理计算工期等方面有广泛等应用，提升工期就是所见缩减所有关键路径上的工期，并且在实现时需要应用到之前拓扑排序的算法(前提: 有向无环图，有依赖关系)\"]},\"96\":{\"h\":\"入门推荐\",\"t\":[\"强烈推荐用动画学习算法 Data Structure Visualizations在新窗口打开\",\"推荐一个学习数据结构的英文网站 Java Point - DS在新窗口打开\",\"推荐Github上java算法集合 TheAlgorithms - Java在新窗口打开\",\"推荐@skywang12345写的数据结构 skywang12345 - DS在新窗口打开\",\"推荐@QG-whz数据结构图画的好(本章节中有部分图源于这位作者) QG-whz在新窗口打开\",\"推荐@亦海数据结构的文章，写的很清晰 亦海 - DS在新窗口打开\"]},\"97\":{\"h\":\"进阶推荐\",\"t\":[\"首推@July结构之法 算法之道 July - 结构之法 算法之道在新窗口打开\"]},\"98\":{\"h\":\"参考文章\",\"t\":[\"https://www.cnblogs.com/small-boy/p/8039007.html\",\"https://www.jianshu.com/p/5c84f7b6c354\",\"https://blog.csdn.net/flowing_wind/article/details/81431354\"]},\"99\":{\"h\":\"\",\"t\":[\"订单管理系统（OMS，Order Management System）\",\"一. 业务现状\",\"多渠道、多店铺运营\",\"随着公司业务的发展，商品销售涉及的电商平台不断增加，目前已在9大电商平台上共运营38个店铺，多个直播平台、多个直播账号、多个直播间带货。\",\"低效的店铺管理方式\",\"当前采用**“人工巡店”**的方式进行店铺和直播间管理，周期性地在各个店铺直播间轮训，查看平台店铺是否有客服问题需要处理，查看运营数据。\",\"https://gitmind.cn/app/docs/mjshbdij\",\"数据碎片化与人工统计依赖\",\"各个店铺的运营数据散布在各个电商平台上，没有集中的数据视角。精细化运营分析依赖人工统计，使得数据分析工作困难重重。\",\"二. 存在问题\",\"工作效率问题\",\"处理电商问题需要在9个电商后台的50+个店铺间切换，盲巡方式导致工作效率低下。\",\"客服团队在处理问题后还需填写线下表格，增加了工作负担。\",\"时效性和团队管理问题\",\"影响用户问题处理时效，从而对用户体验和店铺相关运营指标产生负面影响。\",\"电商售后团队工作情况难以追踪，团队管理受到限制。\",\"数据孤岛问题\",\"数据出口多、口径多，业务布局涉及多个平台系统，获取数据难度大，一线人力投入成本高，且业务数据流转关系相对不清晰，难以及时聚焦、运营投放增长问题；\",\"缺乏数据层面上及时、全面的把控和纠偏；\",\"各渠道电商模式不尽相同，各个系统中存放了各自割裂的数据，指标不统一，需要人工统一的工作较多；且数据出口多，各方均需要反复确认及核对业务数据，口径统一不规范；\",\"现在的渠道系统：渠道接入与订单下游业务紧密耦合\",\"随着业务需求的增多，渠道服务变得越来越庞大，渠道接入与订单下游业务紧密耦合，存在的问题如下：\",\"现有系统中商户信息通过配置文件进行配置，由开发人员进行维护，而下游业务服务（如售后单、物流单回传）则依赖于渠道服务配置文件。\",\"对日益增长的系统迭代开发需求，如售后管理、数据分析、仓储分销管理等，目前渠道接入系统与订单下游业务紧密耦合，如订单同步（精品课、硬件）、物流发货、人工灌单、售后（退、换货等）单处理、服务单（客户问题工单）处理、财务对账等；\",\"代码耦合度过高，业务逻辑和三方交互代码夹杂在一起，每次改动牵一发而动全身，改动影响面难以评估；\",\"面向需求开发的方式，导致系统耦合严重，缺乏整体的方案设计；\",\"三. 目标&收益\",\"3.1 目标\",\"提高工作效率，降低成本： \",\"提供统一的电商售后管理工具，解决需要在多个电商平台、店铺间切换带来的工作效率问题；\",\"提供统一的销售数据指标词典和统一的数据出口，解决周期性报表重复输出的问题；\",\"通过优化流程和提高效率，降低运营成本，降低数据获取成本；\",\"优化运营管理：实现订单、直播数据化业务管理，提供数据支持，推动精细化运营，在数据层面上及时、全面的把控和纠偏；\",\"提高客户满意度：通过提高问题处理时效和优化运营管理，提高客户满意度。\",\"3.2 收益\",\"业务收益：\",\"集成性和数据一致性：通过整合各个业务、各个渠道功能和模块，实现电商数据信息在系统内部自动流动，避免数据冗余和信息孤岛\",\"一体化管理系统可提高工作效率，减少人为错误，提供准确、可靠的数据基础。\",\"增强业务监控与决策支持：集中化的数据视角有利于对业务进行全面监控，为业务决策提供有力支持。\",\"提升团队协同效果：多渠道整合后的系统便于团队成员之间的沟通与协作，提升团队工作效果。\",\"沉淀中台服务能力\",\"系统开发收益：\",\"多平台多渠道统一渠道对接流程提高开发效率\",\"将渠道的接入与业务系统进行解耦，避免“牵一发而动全身”的问题，多个模块之间不存在系统入侵，提高系统稳定性；\",\"服务解耦，提供系统稳定性\",\"四. 初步解决方案\",\"4.1 架构设计\",\"**服务解耦 + 标准化数据交互 + 业务系统服务模块化：**将渠道的接入与业务系统进行解耦，渠道网关只负责与外部电商渠道进行对接，一切与外部渠道服务交互（正逆向）走渠道网关；\",\"![](../../.vuepress/public/imgs/流程图 (2).png)\",\"4.2 模块设计\",\"渠道网关\",\"**定位：**统一渠道对接流程，负责与各渠道对接，进行标准化数据接入，聚合所有与外部渠道相关的交互，将外部电商与有道业务系统隔离。\",\"核心功能：\",\"多平台交易订单获取\",\"标准化渠道接入接口\",\"订单数据标准化\",\"标准化订单信息同步\",\"现有的系统设计文档：https://confluence.inner.youdao.com/pages/viewpage.action?pageId=247627340\",\"店铺管理\",\"多渠道多平台店铺可视化配置与管理\",\"售后管理\",\"定位：多渠道、多类型的售后订单处理工具\",\"核心功能：\",\"各渠道售后（退、换货等）单处理、服务单（客户问题工单）处理统一处理\",\"售后单时效、流程管理与提醒\",\"操作记录\",\"财务、物流、业务退款同步\",\"需求PRD：PRD-电商渠道管理平台-售后管理1期-抖店\",\"数据分析\",\"定位：多渠道数据标准化存储、输出和分析\",\"核心功能：\",\"各平台多店铺销售、退款、运费、交易费用等经营数据自动汇总；精细到商品规格维度的数据统计和分析， 为促销活动提供依据；\",\"固定周期的售后数据，以统计电商平台售后单量、进行颓废原因分析、对一线客服工作量进行售后单维度统计；\",\"直播数据获取：获取API接口数据：如抖音订单表、抖音退费表、千川消耗表、千川直播间数据表，抖音佣金表；利用数据抓取技术补充数据等；\",\"数据标准化：建立数据指标词典，统一指标命名、拉齐指标定义和口径；\",\"数据消费：数据实时同步至数据中台，搭建线上数据看板等方式统一数据出口；\",\"财务、物流同步\",\"订单管理\",\"定位：以订单维度进行根据不同的业务需求进行处理，各个模块互相隔离\",\"**订单同步：**与教务系统对接的精品课订单生成等\",\"**物流发货同步：**同步电商渠道物流信息等\",\"退款、精品课/硬件同步等\",\"订单数据沉淀\"]},\"100\":{\"h\":\"\"},\"101\":{\"h\":\"mooncake-gate\"},\"102\":{\"h\":\"主要功能\",\"t\":[\"客户端提交任务，根据任务的过期时间，判断是否需要进行持久化，然后分发到不同的topic。\"]},\"103\":{\"h\":\"主要类\",\"t\":[\"OpenController 类\",\"submit 方法：接收外部任务请求，生成UUID（如果未提供），并调用 submitInner 方法提交任务。\",\"submitInner 方法：将任务分发到相应的处理器（如Kafka），并返回提交结果。\",\"uuid 方法：生成并返回一个新的UUID。\",\"markTaskDone 方法：标记任务为完成状态。\",\"Dispatcher 接口\",\"定义了 dispatch 方法，用于将任务发送到相应的处理器或持久化存储。\",\"DispatcherImpl 类\",\"实现了 Dispatcher 接口，具体实现了任务分发逻辑。\",\"dispatch 方法：根据任务的过期时间，将任务发送到不同的Kafka topic。\",\"send 方法：将任务发送到指定的Kafka topic。\",\"needStore 方法：判断任务是否需要持久化存储。\"]},\"104\":{\"h\":\"提供的接口\",\"t\":[\"POST /submit：提交延时任务。\",\"POST /inner/submit：内部提交任务接口。\",\"GET /uuid：生成UUID。\",\"POST /api/task/done：标记任务完成\"]},\"105\":{\"h\":\"时序图\",\"t\":[\"sequenceDiagram participant 客户端 participant OpenController participant UidGenerator participant Dispatcher participant Kafka 客户端->>OpenController: POST /submit OpenController->>UidGenerator: fetchRandomId (如果UUID为空) UidGenerator-->>OpenController: 返回UUID OpenController->>OpenController: 创建任务 (createTask) OpenController->>Dispatcher: dispatch(task) Dispatcher->>Kafka: 发送到持久化Topic (如果需要) Dispatcher->>Kafka: 发送到触发持久化Topic Dispatcher->>Kafka: 发送到触发Topic Dispatcher-->>OpenController: 返回分发结果 OpenController-->>客户端: ResultDTO<SubmitResultVo> 客户端->>OpenController: GET /uuid OpenController->>UidGenerator: fetchRandomId UidGenerator-->>OpenController: 返回UUID OpenController-->>客户端: ResultDTO<UuidResultVo> 客户端->>OpenController: POST /api/task/done OpenController->>ConsumerClient: done(appId, uuid) ConsumerClient-->>OpenController: 返回结果 OpenController-->>客户端: ResultDTO<?>\"]},\"106\":{\"h\":\"topic\",\"t\":[\"trigger-topic: course_mooncake_trigger trigger-persistent-topic: course_mooncake_persistent triggered-persistent-topic: course_mooncake_triggered_persistent\",\"persistentTask：用于持久化任务的Topic。\",\"triggeredPersistentTask：用于触发任务的Topic。\"]},\"107\":{\"h\":\"发送到不同Topic的逻辑\",\"t\":[\"持久化任务： \",\"当有新的任务需要持久化时，任务会被发送到persistentTask Topic。\",\"这些任务通常是需要在未来某个时间点执行的任务。\",\"触发任务： \",\"当持久化任务的执行时间到达时，任务会被发送到triggeredPersistentTask Topic。\",\"这些任务是已经到达执行时间，需要立即处理的任务。\"]},\"108\":{\"h\":\"不同Topic的处理逻辑\",\"t\":[\"persistentTask Topic的处理逻辑：\",\"消费任务：PersistentConsumer会从persistentTask Topic中消费消息。\",\"保存到数据库：消费到的任务会被保存到数据库中，记录任务的详细信息和状态。\",\"提交偏移量：任务保存成功后，提交Kafka的消费偏移量，确保消息不会被重复消费。\",\"triggeredPersistentTask Topic的处理逻辑：\",\"消费任务：PersistentConsumer会从triggeredPersistentTask Topic中消费消息。\",\"保存到数据库：消费到的任务会被保存到数据库中，更新任务的状态为“待执行”。\",\"提交偏移量：任务保存成功后，提交Kafka的消费偏移量，确保消息不会被重复消费\"]},\"109\":{\"h\":\"mooncake-producer\",\"t\":[\"Timer 类\",\"Timer 类负责管理时间轮的拨动和任务的添加。\",\"start 方法：启动定时任务，每隔一定时间拨动时间轮。\",\"add 方法：将任务添加到时间轮中。\",\"TimerService 类\",\"TimerService 类负责管理任务的触发和消费。\",\"afterPropertiesSet 方法：初始化服务，启动检查点服务和触发器，并启动Kafka消费者。\",\"doTrigger 方法：从队列中获取任务并发送到Kafka的执行器Topic。\",\"doConsume 方法：从Kafka的触发Topic中消费任务，并将任务添加到检查点服务中。\",\"doConsumerInner 方法：具体的消费逻辑，包括分区的分配和撤销处理。\",\"createLoad 方法：从Kafka记录中创建任务负载对象。\",\"TimeWheel 类\",\"TimeWheel 类实现了时间轮的核心逻辑，包括任务的添加和时间的推进。\",\"add 方法：将任务添加到时间轮中。\",\"pointTo 方法：推进时间轮到指定时间点，并触发过期任务。\",\"Load 类\",\"Load 类表示一个任务负载，包含任务的相关信息。\",\"getExpireTime 方法：获取任务的过期时间。\",\"Expired 接口\",\"Expired 接口定义了获取过期时间的方法。\",\"CheckPointService 类\",\"CheckPointService 类负责管理检查点，确保任务的正确处理和提交。\",\"start 方法：启动检查点服务。\",\"register 方法：注册检查点。\",\"deregister 方法：注销检查点。\",\"add 方法：添加任务到检查点。\",\"remove 方法：从检查点移除任务。\",\"doConsume 方法：处理检查点的添加和移除操作。\",\"CheckPoint 类\",\"CheckPoint 类表示一个检查点，管理任务的提交和标记。\",\"add 方法：添加任务到检查点。\",\"tryMark 方法：尝试标记任务为已处理。\",\"tryUpdateCommitOffset 方法：更新提交偏移量。\",\"Bucket 类\",\"Bucket 类表示一个任务桶，管理任务的计数和最大偏移量。\",\"merge 方法：合并任务到桶中。\",\"decrement 方法：减少桶中的任务计数。\"]},\"110\":{\"h\":\"提供的接口\",\"t\":[\"TimerService 类提供了任务触发和消费的核心逻辑，通过Kafka进行任务的分发和消费。\",\"CheckPointService 类提供了检查点的管理接口，确保任务的正确处理和提交。\",\"sequenceDiagram participant 客户端 participant TimerService participant Timer participant TimeWheel participant CheckPointService participant Kafka 客户端->>TimerService: 提交任务 TimerService->>Timer: add(task) Timer->>TimeWheel: add(task) TimerService->>TimerService: afterPropertiesSet() TimerService->>CheckPointService: start() TimerService->>Kafka: 启动消费者 (doConsume) TimerService->>Kafka: 启动触发器 (doTrigger) loop 每隔一定时间 Timer->>TimeWheel: pointTo(currentTime) end loop 消费任务 Kafka->>TimerService: 消费任务 (doConsume) TimerService->>CheckPointService: add(load) end loop 触发任务 TimerService->>Queue: take() Queue-->>TimerService: load TimerService->>Kafka: 发送任务到执行器 (doTrigger) Kafka-->>TimerService: 发送成功 TimerService->>CheckPointService: remove(load) end\"]},\"111\":{\"h\":\"系统时序图解释\",\"t\":[\"该系统时序图展示了延时任务调度系统的主要流程，包括任务的提交、时间轮的拨动、任务的消费和触发。以下是主要流程的详细描述：\",\"任务提交\",\"客户端向 TimerService 提交任务。\",\"TimerService 调用 Timer 的 add 方法，将任务添加到时间轮中。\",\"Timer 调用 TimeWheel 的 add 方法，将任务添加到具体的时间槽中。\",\"系统初始化\",\"TimerService 调用 afterPropertiesSet 方法，初始化服务。\",\"TimerService 启动 CheckPointService，调用其 start 方法。\",\"TimerService 启动 Kafka 消费者，调用 doConsume 方法。\",\"TimerService 启动触发器，调用 doTrigger 方法。\",\"时间轮拨动\",\"Timer 每隔一定时间调用 TimeWheel 的 pointTo 方法，推进时间轮到当前时间点。\",\"TimeWheel 检查并触发过期任务。\",\"任务消费\",\"Kafka 消费者从 Kafka 的触发 Topic 中消费任务，调用 TimerService 的 doConsume 方法。\",\"TimerService 调用 CheckPointService 的 add 方法，将任务添加到检查点服务中。\",\"任务触发\",\"TimerService 从队列中获取任务，调用 doTrigger 方法。\",\"TimerService 将任务发送到 Kafka 的执行器 Topic。\",\"Kafka 确认任务发送成功。\",\"TimerService 调用 CheckPointService 的 remove 方法，从检查点服务中移除任务。\"]},\"112\":{\"h\":\"主要流程总结\",\"t\":[\"任务提交：客户端提交任务，任务被添加到时间轮中。\",\"系统初始化：初始化服务，启动检查点服务、Kafka 消费者和触发器。\",\"时间轮拨动：定时拨动时间轮，检查并触发过期任务。\",\"任务消费：Kafka 消费者消费任务，将任务添加到检查点服务中。\",\"任务触发：从队列中获取任务，发送到执行器，确认发送成功后从检查点服务中移除任务。\",\"Timer 类\",\"Timer 类负责管理时间轮的拨动和任务的添加。\",\"start 方法：启动定时任务，每隔一定时间拨动时间轮。\",\"add 方法：将任务添加到时间轮中。\",\"TimerService 类\",\"TimerService 类负责管理任务的触发和消费。\",\"afterPropertiesSet 方法：初始化服务，启动检查点服务和触发器，并启动Kafka消费者。\",\"doTrigger 方法：从队列中获取任务并发送到Kafka的执行器Topic。\",\"doConsume 方法：从Kafka的触发Topic中消费任务，并将任务添加到检查点服务中。\",\"doConsumerInner 方法：具体的消费逻辑，包括分区的分配和撤销处理。\",\"createLoad 方法：从Kafka记录中创建任务负载对象。\",\"TimeWheel 类\",\"TimeWheel 类实现了时间轮的核心逻辑，包括任务的添加和时间的推进。\",\"add 方法：将任务添加到时间轮中。\",\"pointTo 方法：推进时间轮到指定时间点，并触发过期任务。\",\"Load 类\",\"Load 类表示一个任务负载，包含任务的相关信息。\",\"getExpireTime 方法：获取任务的过期时间。\",\"Expired 接口\",\"Expired 接口定义了获取过期时间的方法。\",\"CheckPointService 类\",\"CheckPointService 类负责管理检查点，确保任务的正确处理和提交。\",\"start 方法：启动检查点服务。\",\"register 方法：注册检查点。\",\"deregister 方法：注销检查点。\",\"add 方法：添加任务到检查点。\",\"remove 方法：从检查点移除任务。\",\"doConsume 方法：处理检查点的添加和移除操作。\",\"CheckPoint 类\",\"CheckPoint 类表示一个检查点，管理任务的提交和标记。\",\"add 方法：添加任务到检查点。\",\"tryMark 方法：尝试标记任务为已处理。\",\"tryUpdateCommitOffset 方法：更新提交偏移量。\",\"Bucket 类\",\"Bucket 类表示一个任务桶，管理任务的计数和最大偏移量。\",\"merge 方法：合并任务到桶中。\",\"decrement 方法：减少桶中的任务计数。\"]},\"113\":{\"h\":\"mooncake-consumer\",\"t\":[\"主要实现了延时任务的消费、执行和管理。它包括了任务的HTTP请求处理、任务状态管理、任务重试机制、Redis缓存管理、以及与其他服务的通信等功能。\"]},\"114\":{\"h\":\"代码分析\",\"t\":[\"TomcatAccessLogCustomizer 类\",\"该类实现了 WebServerFactoryCustomizer<TomcatServletWebServerFactory> 接口，用于自定义 Tomcat 的访问日志配置。\",\"customize 方法：获取 Tomcat 的 AccessLogValve 并设置日志保留天数为1天。\",\"Stage 枚举\",\"该枚举定义了任务的不同阶段，包括 TODO、INIT 和 DONE。\",\"提供了获取阶段值的方法 getValue 和根据值获取阶段的方法 of。\",\"Props 类\",\"该类用于读取配置文件中的 Redis 配置信息。\",\"包含一个内部静态类 Redis，用于存储 Redis 地址列表。\",\"InternalController 类\",\"该类是一个 Spring MVC 控制器，提供了两个接口用于执行任务和标记任务完成。\",\"executeTask 方法：接收任务并调用 CakeExecutor 执行任务。\",\"interceptTask 方法：接收任务标识并调用 CakeExecutor 标记任务完成。\",\"GateClient 接口\",\"该接口使用 FeignClient 与 mooncake-gate 服务通信，提供了提交任务和获取 UUID 的接口。\",\"包含一个内部静态类 Fallback，用于处理服务调用失败的情况。\",\"CoreConfig 类\",\"该类是一个 Spring 配置类，提供了 OkHttpClient 和 JedisCluster 的 Bean 配置。\",\"okHttpClient 方法：配置 OkHttpClient。\",\"getJedisCluster 方法：配置 JedisCluster。\",\"TaskHandlers 类\",\"该类用于查找并创建任务处理器。\",\"find 方法：根据任务创建 HttpTaskHandler。\",\"TaskHandler 接口\",\"该接口定义了任务处理器的基本方法，包括异步执行和同步执行。\",\"HttpTaskHandler 类\",\"该类实现了 TaskHandler 接口，负责处理 HTTP 任务。\",\"executeAsync 方法：异步执行任务。\",\"execute 方法：同步执行任务。\",\"httpRequest 方法：创建 HTTP 请求。\",\"handleHttpTaskResponse 方法：处理 HTTP 响应。\",\"CakeExecutor 类\",\"该类实现了 TaskManager 接口，负责任务的执行和管理。\",\"mooncakeExecutor 方法：Kafka 消费者，接收并处理任务。\",\"tryRunTask 方法：尝试执行任务。\",\"handleAfterExecution 方法：处理任务执行后的逻辑。\",\"executeTask 方法：执行任务。\",\"markTaskDone 方法：标记任务完成。\",\"OkHttpService 类\",\"该类提供了 OkHttpClient 的管理和配置。\",\"client 方法：根据超时时间获取 OkHttpClient。\"]},\"115\":{\"h\":\"提供的接口\",\"t\":[\"InternalController\",\"提供了两个接口：\",\"/execute：执行任务。\",\"/done：标记任务完成。\",\"GateClient\",\"提供了两个接口：\",\"/inner/submit：提交任务。\",\"/uuid：获取 UUID。\"]},\"116\":{\"h\":\"系统时序图\",\"t\":[\"sequenceDiagram participant 客户端 participant InternalController participant CakeExecutor participant TaskHandlers participant HttpTaskHandler participant GateClient participant Redis participant Kafka 客户端->>InternalController: 提交任务 (executeTask) InternalController->>CakeExecutor: executeTask(task) CakeExecutor->>Redis: tryRunTask(task) Redis-->>CakeExecutor: 返回结果 CakeExecutor->>TaskHandlers: find(task) TaskHandlers->>HttpTaskHandler: 创建 HttpTaskHandler HttpTaskHandler->>CakeExecutor: executeAsync(commitCallback) HttpTaskHandler->>HttpTaskHandler: 发送 HTTP 请求 HttpTaskHandler->>CakeExecutor: handleAfterExecution(success, task) CakeExecutor->>Redis: markTaskDone(appId, uuid) 客户端->>InternalController: 标记任务完成 (interceptTask) InternalController->>CakeExecutor: markTaskDone(appId, uuid) CakeExecutor->>Redis: markTaskDone(appId, uuid) Kafka->>CakeExecutor: 消费任务 (mooncakeExecutor) CakeExecutor->>Redis: tryRunTask(task) Redis-->>CakeExecutor: 返回结果 CakeExecutor->>TaskHandlers: find(task) TaskHandlers->>HttpTaskHandler: 创建 HttpTaskHandler HttpTaskHandler->>CakeExecutor: executeAsync(commitCallback) HttpTaskHandler->>HttpTaskHandler: 发送 HTTP 请求 HttpTaskHandler->>CakeExecutor: handleAfterExecution(success, task) CakeExecutor->>Redis: markTaskDone(appId, uuid) loop 重试任务 CakeExecutor->>GateClient: 提交任务 (retryNextTask) GateClient-->>CakeExecutor: 返回结果 end\"]},\"117\":{\"h\":\"主要流程总结\",\"t\":[\"任务提交：客户端提交任务，任务被添加到时间轮中。\",\"系统初始化：初始化服务，启动检查点服务、Kafka 消费者和触发器。\",\"时间轮拨动：定时拨动时间轮，检查并触发过期任务。\",\"任务消费：Kafka 消费者消费任务，将任务添加到检查点服务中。\",\"任务触发：从队列中获取任务，发送到执行器，确认发送成功后从检查点服务中移除任务。\",\"任务执行：通过 HTTP 请求执行任务，处理任务执行后的逻辑，包括重试机制和任务状态管理。\"]},\"118\":{\"h\":\"mooncake-watcher\",\"t\":[\"主要实现了延时任务的持久化、分片管理、任务生命周期管理以及与其他服务的通信。它包括了任务的持久化、任务的分片管理、任务的触发和执行、任务的状态管理、以及与其他服务的通信等功能。\"]},\"119\":{\"h\":\"代码分析\",\"t\":[\"InternalController 类\",\"该类是一个 Spring MVC 控制器，提供了三个接口用于分片管理。\",\"flush 方法：刷新所有分片。\",\"pop 方法：获取指定分片的任务。\",\"createShard 方法：创建或更新分片总数。\",\"PersistentConsumer 类\",\"该类实现了 InitializingBean 接口，用于消费 Kafka 中的持久化任务并将其保存到数据库中。\",\"afterPropertiesSet 方法：启动持久化任务和触发任务的消费线程。\",\"persistentTask 方法：消费持久化任务并保存到数据库中。\",\"triggeredPersistentTask 方法：消费触发任务并保存到数据库中。\",\"ShardManager 接口\",\"该接口定义了分片管理的基本方法，包括获取分片配置、获取分片、填充分片和创建或更新分片总数。\",\"ShardManagerImpl 类\",\"该类实现了 ShardManager 接口，负责分片的管理。\",\"afterPropertiesSet 方法：初始化分片配置。\",\"getShard 方法：获取指定分片的任务。\",\"fillShards 方法：填充分片。\",\"createOrUpdateShardTotal 方法：创建或更新分片总数。\",\"TaskLifeCycleManager 接口\",\"该接口定义了任务生命周期管理的基本方法，包括刷新任务到触发器、刷新任务到消费者和清除过期任务。\",\"TaskLifeCycleManagerImpl 类\",\"该类实现了 TaskLifeCycleManager 接口，负责任务的生命周期管理。\",\"flushToTrigger 方法：定期将持久化任务发送到触发器。\",\"flushToConsumer 方法：定期将持久化任务发送到消费者。\",\"flushToBin 方法：定期清除过期任务。\",\"TaskRepository 接口\",\"该接口继承了 JpaRepository，用于操作数据库中的任务实体。\",\"提供了根据状态和过期时间查询任务的方法。\",\"TaskRepositoryHelper 类\",\"该类提供了批量更新任务状态的方法。\",\"Shard 类\",\"该类表示一个分片，包含分片总数和当前分片。\",\"提供了分片的有效性检查和分片命中判断的方法。\",\"ShardConfigValue 类\",\"该类表示分片配置的值，包含分片总数和分片键。\",\"TaskEntity 类\",\"该类表示任务实体，包含任务的基本信息和状态。\",\"提供了初始化任务和触发任务的方法。\",\"TaskId 类\",\"该类表示任务的唯一标识，包含应用ID和任务ID。\",\"ConsumerClient 接口\",\"该接口使用 FeignClient 与 mooncake-consumer 服务通信，提供了执行任务的接口。\",\"包含一个内部静态类 Fallback，用于处理服务调用失败的情况。\"]},\"120\":{\"h\":\"提供的接口\",\"t\":[\"InternalController\",\"提供了三个接口：\",\"/shard/fill：刷新所有分片。\",\"/shard/pop：获取指定分片的任务。\",\"/shard/create：创建或更新分片总数。\",\"ConsumerClient\",\"提供了一个接口：\",\"/execute：执行任务。\"]},\"121\":{\"h\":\"系统时序图\",\"t\":[\"sequenceDiagram participant 客户端 participant InternalController participant ShardManager participant PersistentConsumer participant TaskRepository participant Kafka participant TaskLifeCycleManager participant ConsumerClient 客户端->>InternalController: 刷新分片 (flush) InternalController->>ShardManager: fillShards(id) ShardManager->>ShardManager: 填充分片 客户端->>InternalController: 获取分片任务 (pop) InternalController->>ShardManager: getShard(id) ShardManager->>InternalController: 返回分片任务 客户端->>InternalController: 创建分片 (createShard) InternalController->>ShardManager: createOrUpdateShardTotal(k, total) ShardManager->>ShardManager: 创建或更新分片总数 Kafka->>PersistentConsumer: 消费持久化任务 (persistentTask) PersistentConsumer->>TaskRepository: 保存任务到数据库 TaskRepository-->>PersistentConsumer: 返回结果 PersistentConsumer->>Kafka: 提交消费偏移量 Kafka->>PersistentConsumer: 消费触发任务 (triggeredPersistentTask) PersistentConsumer->>TaskRepository: 保存任务到数据库 TaskRepository-->>PersistentConsumer: 返回结果 PersistentConsumer->>Kafka: 提交消费偏移量 TaskLifeCycleManager->>TaskRepository: 查询需要触发的任务 TaskRepository-->>TaskLifeCycleManager: 返回任务列表 TaskLifeCycleManager->>Kafka: 发送任务到触发器 (flushToTrigger) Kafka-->>TaskLifeCycleManager: 返回结果 TaskLifeCycleManager->>TaskRepository: 查询需要执行的任务 TaskRepository-->>TaskLifeCycleManager: 返回任务列表 TaskLifeCycleManager->>ConsumerClient: 执行任务 (flushToConsumer) ConsumerClient-->>TaskLifeCycleManager: 返回结果 TaskLifeCycleManager->>TaskRepository: 查询过期任务 TaskRepository-->>TaskLifeCycleManager: 返回任务列表 TaskLifeCycleManager->>TaskRepository: 删除过期任务 (flushToBin) TaskRepository-->>TaskLifeCycleManager: 返回结果\"]},\"122\":{\"h\":\"主要流程总结\",\"t\":[\"分片管理：通过 ShardManager 实现分片的创建、更新和填充。\",\"任务持久化：通过 PersistentConsumer 消费 Kafka 中的持久化任务并保存到数据库中。\",\"任务生命周期管理：通过 TaskLifeCycleManager 定期刷新任务到触发器和消费者，并清除过期任务。\",\"任务执行：通过 ConsumerClient 与 mooncake-consumer 服务通信，执行任务。\"]},\"123\":{\"h\":\"Mooncake 模块分析及主要流程\"},\"124\":{\"h\":\"主要模块\",\"t\":[\"InternalController：提供分片管理的接口。\",\"PersistentConsumer：消费 Kafka 中的持久化任务并保存到数据库。\",\"ShardManager：管理分片，包括获取、填充和创建/更新分片。\",\"TaskLifeCycleManager：管理任务的生命周期，包括刷新任务到触发器、消费者和清除过期任务。\",\"TaskRepository：操作数据库中的任务实体。\",\"ConsumerClient：与 mooncake-consumer 服务通信，执行任务。\"]},\"125\":{\"h\":\"主要流程\",\"t\":[\"分片管理： \",\"创建或更新分片总数。\",\"获取指定分片的任务。\",\"刷新所有分片。\",\"任务持久化： \",\"消费 Kafka 中的持久化任务并保存到数据库。\",\"消费 Kafka 中的触发任务并保存到数据库。\",\"任务生命周期管理： \",\"定期将持久化任务发送到触发器。\",\"定期将持久化任务发送到消费者。\",\"定期清除过期任务。\",\"任务执行： \",\"通过 ConsumerClient 与 mooncake-consumer 服务通信，执行任务。\"]},\"126\":{\"h\":\"流程图\",\"t\":[\"flowchart TD A[客户端] -->|刷新分片| B[InternalController] B -->|fillShards| C[ShardManager] C -->|填充分片| C A -->|获取分片任务| B B -->|getShard| C C -->|返回分片任务| B B -->|返回分片任务| A A -->|创建分片| B B -->|createOrUpdateShardTotal| C C -->|创建或更新分片总数| C D[Kafka] -->|消费持久化任务| E[PersistentConsumer] E -->|保存任务到数据库| F[TaskRepository] F -->|返回结果| E E -->|提交消费偏移量| D D -->|消费触发任务| E E -->|保存任务到数据库| F F -->|返回结果| E E -->|提交消费偏移量| D G[TaskLifeCycleManager] -->|查询需要触发的任务| F F -->|返回任务列表| G G -->|发送任务到触发器| D D -->|返回结果| G G -->|查询需要执行的任务| F F -->|返回任务列表| G G -->|执行任务| H[ConsumerClient] H -->|返回结果| G G -->|查询过期任务| F F -->|返回任务列表| G G -->|删除过期任务| F F -->|返回结果| G\"]},\"127\":{\"h\":\"时序图\",\"t\":[\"sequenceDiagram participant 客户端 participant InternalController participant ShardManager participant PersistentConsumer participant TaskRepository participant Kafka participant TaskLifeCycleManager participant ConsumerClient 客户端->>InternalController: 刷新分片 (flush) InternalController->>ShardManager: fillShards(id) ShardManager->>ShardManager: 填充分片 客户端->>InternalController: 获取分片任务 (pop) InternalController->>ShardManager: getShard(id) ShardManager->>InternalController: 返回分片任务 客户端->>InternalController: 创建分片 (createShard) InternalController->>ShardManager: createOrUpdateShardTotal(k, total) ShardManager->>ShardManager: 创建或更新分片总数 Kafka->>PersistentConsumer: 消费持久化任务 (persistentTask) PersistentConsumer->>TaskRepository: 保存任务到数据库 TaskRepository-->>PersistentConsumer: 返回结果 PersistentConsumer->>Kafka: 提交消费偏移量 Kafka->>PersistentConsumer: 消费触发任务 (triggeredPersistentTask) PersistentConsumer->>TaskRepository: 保存任务到数据库 TaskRepository-->>PersistentConsumer: 返回结果 PersistentConsumer->>Kafka: 提交消费偏移量 TaskLifeCycleManager->>TaskRepository: 查询需要触发的任务 TaskRepository-->>TaskLifeCycleManager: 返回任务列表 TaskLifeCycleManager->>Kafka: 发送任务到触发器 (flushToTrigger) Kafka-->>TaskLifeCycleManager: 返回结果 TaskLifeCycleManager->>TaskRepository: 查询需要执行的任务 TaskRepository-->>TaskLifeCycleManager: 返回任务列表 TaskLifeCycleManager->>ConsumerClient: 执行任务 (flushToConsumer) ConsumerClient-->>TaskLifeCycleManager: 返回结果 TaskLifeCycleManager->>TaskRepository: 查询过期任务 TaskRepository-->>TaskLifeCycleManager: 返回任务列表 TaskLifeCycleManager->>TaskRepository: 删除过期任务 (flushToBin) TaskRepository-->>TaskLifeCycleManager: 返回结果\"]},\"128\":{\"h\":\"主要实现细节\",\"t\":[\"InternalController： \",\"提供刷新分片、获取分片任务和创建分片的接口。\",\"调用 ShardManager 的相应方法进行分片管理。\",\"PersistentConsumer： \",\"实现 InitializingBean 接口，启动持久化任务和触发任务的消费线程。\",\"消费 Kafka 中的持久化任务和触发任务，并保存到数据库中。\",\"ShardManager： \",\"管理分片的创建、更新和填充。\",\"提供获取指定分片任务的方法。\",\"TaskLifeCycleManager： \",\"定期刷新任务到触发器和消费者。\",\"定期清除过期任务。\",\"TaskRepository： \",\"提供操作数据库中任务实体的方法。\",\"提供根据状态和过期时间查询任务的方法。\",\"ConsumerClient： \",\"使用 FeignClient 与 mooncake-consumer 服务通信，执行任务。\",\"通过上述模块的协作，系统实现了延时任务的持久化、分片管理、任务生命周期管理和任务执行，确保任务在指定时间点被正确触发和执行，并提供了任务状态管理和分片管理机制。\",\"你好，今晚19点04分25秒的时候，有一笔支付请求响应超时了，能帮忙看下是什么原因吗。out_trade_no是：317310638640000046083\",\"部分请求参数如下： <mch_id>1641714449</mch_id> <device_info>WEB</device_info><out_trade_no>317310638640000046083</out_trade_no> <time_start>20241108190424</time_start>\"]},\"129\":{\"h\":\"详解支付系统\",\"t\":[\"​ 随着业务的快速发展与变化，业务模式由原有的独立 APP 售卖模式调整为以业务为导向，各业务百花齐放，各自建设业务系统模式。原有售卖模式采用的支付方式与独立 APP 耦合，且支付方式仅支持一个AppId，对应一个微信或支付宝商户号，无法满足各业务搭建 App 及独立售卖的模式。需要提供业务统一的支付平台能力，支持业务与支付中心一次对接，即可打通支付整体流程。\",\"支付中心在现代企业中扮演着至关重要的角色，它不仅是内部业务线之间的支付服务提供者，还是与外部三方支付机构或银行之间的资金流转的桥梁，有助于实现支付流程的标准化、高效化和安全化。\",\"对内方面：支付中心为各业务线提供统一的支付和退款服务，方便各业务之间的数据交互和整合，有助于简化业务流程，减少重复开发和维护成本，同时提高支付和退款的处理效率；\",\"对外方面：支付中心需要对接各种三方支付机构或银行服务，实现资金的流转，为企业提供更广泛、更灵活的支付结算服务，满足企业不断增长的业务需求。\",\"支付中心系统的设计旨在实现对内统一支付和退款服务，对外对接三方支付服务，实现资金流转。\"]},\"130\":{\"h\":\"1. 业务架构\",\"t\":[\"支付中心是一个支付聚合服务，旨在最大程度减少其他服务对接第三方支付的开发量，并将支付相关功能、信息统一化管理。\"]},\"131\":{\"h\":\"2. 极简支付流程\",\"t\":[\"从服务端设计的角度看，一个极简的订单支付的流程如下：\",\"创建订单：用户从客户端下单，创建订单的流程，生成订单记录（通常包括订单号、用户信息、商品详情、总价、支付状态等）；\",\"生成支付信息：商家服务端会根据订单信息生成支付信息，包括支付金额、支付方式、订单号等，用于后续的支付流程；\",\"返回支付页面：服务端将支付信息返回给客户端，客户端根据支付信息生成支付页面(包含支付金额、支付方式、订单号等信息)，并引导用户进行支付操作；\",\"发起支付：用户在支付下单页，点击支付，服务端会组装支付参数请求第三方支付进行下单；\",\"支付结果通知：用户支付完成后，三方支付平台(如支付宝、微信支付等)会向服务端发送支付结果通知。服务端接收到支付结果通知后，会对支付结果进行处理：如果支付成功，服务端会更新订单状态为已支付，并进行相应的业务处理(如库存扣减、通知卖家发货等)；如果支付失败，服务端会更新订单状态为支付失败，并通知用户重新进行支付。\",\"支付结果回调：服务端将支付结果返回给客户端并展示给用户。如果支付成功，客户端会展示支付成功页面，并引导用户进行后续操作(如查看订单详情等)，如果支付失败，客户端会展示支付失败页面，并提示用户重新进行支付。\",\"整体支付流程的时序图可如下所示：\"]},\"132\":{\"h\":\"1. 系统架构设计\",\"t\":[\"支付中心系统的主要职责是处理业务系统发起的所有交易请求，包含商户系统、支付核心等模块，如图所示，主要分为四个大模块：\",\"应用平台：对外提供API网关接口，供其他业务订单系统调用；\",\"业务中台：主要包括商户系统和支付系统；\",\"商户系统：主要关注的是与商户相关的所有业务和功能，包括但不限于商户配置、支付配置、通知配置、交易对账等。商户系统通过提供统一、高效、安全的服务接口，帮助商户更好地管理自己的业务，提高运营效率，降低运营成本；\",\"支付系统：主要负责与外部支付通道统一打通，包括但不限于交易支付、退款、回调通知、订单补偿、差错处理、异常通知，包括对业务中台各项服务的配置、监控等；\",\"支付通道：用于和三方支付进行对接及管理；\",\"技术架构：用于实现整个系统功能的技术架构；\"]},\"133\":{\"h\":\"2. 详细设计\"},\"134\":{\"h\":\"2.1. 支付模块设计\",\"t\":[\"业务商户系统在支付时通过统一接口请求支付，对第三方支付平台无感知，由支付系统做统一处理。在进行对接之前，业务商户系统需要在支付系统填写商户信息以便后续支付，整体执行顺序和模块主要包含三部分：\",\"生成预支付订单：业务系统调用支付中心之后，支付中心校验商户信息、权限校验，生成支付中心全局唯一支付单号，生成支付订单记录；\",\"三方支付交互：支付中心根据支付类型和交易类型以及对应的三方支付接口，生成接口交互签名，组装成统一的支付请求与三方支付交互；\",\"支付后置处理：支付中心根据当前支付请求和三方接口响应，落库记录支付订单信息；\",\"生成预支付订单的主要步骤\",\"​ a. 校验商户信息：支付中心从数据库中获取商户信息，并校验商户号、商户状态和交易类型等信息；\",\"​ b. 权限校验：校验商户是否有权限进行当前支付操作，确保商户有权限进行当前支付操作；\",\"​ c. 生成支付中心订单号；\",\"​ d. 创建支付订单对象：根据支付请求信息和商户信息，创建支付订单对象。\",\"支付中心唯一支付订单号的生成方法如下：\",\"获取当前时间戳：以秒为单位获取当前时间戳。\",\"生成 Redis 键：\",\"使用 pay:order_id: 作为前缀，加上当前时间戳，生成 Redis 键。\",\"使用 Redis 中 setIfAbsent 设置键值对，如果键不存在则设置成功，并设置过期时间为 10 秒。\",\"如果 Redis 中已经有该键，使用 increment 方法对键值进行自增，并将结果转换为字符串。\",\"如果 Redis 操作失败，使用备用方案生成 6 位随机数作为订单号计数部分。\",\"格式化订单号：将订单号序列格式化为 6 位数字，不足位数前面补零。\",\"拼接订单号：将支付类型编号、当前时间戳、订单号计数和 4 位随机数拼接在一起，生成最终的支付单号；\",\"例如：订单号：4 1732690422 000001 7403 ，其中 4 是指支付宝支付；1732690422 是时间戳；000001 为订单号计数器；7403 是四位随机数。\",\"三方支付交互\",\"支付中心根据支付类型和交易类型，选择对应的三方支付接口，生成接口交互签名，组装成统一的支付请求与三方支付交互，三方支付交互的主要步骤如下：\",\"根据支付类型和交易类型，选择对应的三方支付接口；\",\"使用三方支付接口所需的参数和加密方法，生成签名；\",\"将签名和其他必要参数组装成统一的支付请求；\",\"调用三方支付接口，发送支付请求；\",\"接收并处理三方支付接口的响应结果；\",\"支付后置处理\",\"支付后置处理主要是根据当前支付请求和三方支付的接口响应，落库记录支付订单信息，主要步骤如下：\",\"根据支付请求和三方支付接口响应结果，更新当前支付订单的状态、三方平台的交易流水号等信息；\",\"如果当前订单是首次支付，则将订单信息插入数据库；否则，更新已有订单信息；\",\"在支付订单落库的同时，添加订单超时触发器，将支付订单放入到延时队列中，延时任务的执行时间为订单的支付过期时间；\",\"如果系统压测流量，根据实际情况调用 mockCallbackGateway 进行模拟回调；\"]},\"135\":{\"h\":\"2.2. 支付回调设计\",\"t\":[\"​ 第三方支付平台支付成功后，会回调支付中心，由支付中心系统进行统一处理后再回调业务商户系统，具体流程如图所示：\",\"支付中心系统支付回调具体步骤如下：\",\"第三方支付平台通过HTTP请求通知支付中心支付结果，支付中心接收到请求后，校验回调的支付订单：\",\"如果订单已经被处理过，或者订单不存在，则直接返回处理结果；\",\"如果订单存在且未被处理过，则校验商户信息、签名和金额；\",\"如果验证不通过，则返回处理失败；如果验证通过，则更新订单状态，并异步回调商户系统通知支付结果；\",\"如果回调商户系统失败，会放入延时队列，进行失败重试，如果回调商户系统成功，则修改支付订单表中支付回调状态\",\"其中，支付中心在收到三方支付回调后异步回调商户系统，将三方支付与商户系统完全解耦，并在回调失败的24小时内不断重试，直至回调成功；\",\"商户在接收到支付中心发送的回调后只需要处理自身后续逻辑即可，无需考虑安全效验等问题。\",\"支付核心状态通过CAS方式修改，解决并发情况下数据一致性问题。\",\"对于回调商户通知结果现有两种方式，通过接口回调或通过kafka发送消息，选择哪种或两者皆由具体业务场景决定。\",\"方案\",\"优点\",\"缺点\",\"采用情况\",\"接口回调\",\"接入简单，不受内部服务限制\",\"性能较低，存在丢失消息风险\",\"本系统采用\",\"消息队列\",\"性能较高，保证消息一定能被消费\",\"需调用方共同维护消息队列，且只能内部使用\",\"否\",\"​ 退款模块主要负责处理商户发起的退款请求。退款流程依赖于支付功能，支持全额退款和部分退款，但无论何种退款，一个订单的退款金额总和不能超过支付金额。接入退款流程必须接入支付流程，退款功能依赖于支付功能。\",\"整体执行顺序和模块主要包含三部分：\",\"退款请求校验：业务系统调用支付中心退款接口之后，支付中心校验商户信息、退款金额等，根据请求查询支付单信息和退款记录，查询是否已退款；\",\"三方退款交互：支付中心根据支付类型选择对应的三方退款接口，生成接口交互签名，组装成统一的退款请求与三方支付交互；\",\"退款后置处理：支付中心根据当前退款请求和三方接口响应，落库记录退款订单信息；\",\"退款请求校验\",\"退款请求入参校验：对退款请求的字段进行校验，比如退款金额最多两位小数；\",\"校验商户信息：支付中心从数据库中获取商户信息，并校验商户号、商户状态和交易类型等信息；\",\"校验退款记录：查询支付订单，查询该订单的已退金额，查询退款记录，检查是否已经退款成功或正在退款中，做幂等处理，防止重复请求退款；\",\"​ 其中，一个退款请求后，除退款失败外，不能重复提交请求。**一笔退款失败后重新提交，请不要更换退款单号，请使用原商户退款单号。**退款记录表中的状态流转如图：\",\"三方退款交互\",\"支付中心根据支付类型，选择对应的三方支付接口，生成接口交互签名，组装成统一的退款请求与三方退款交互；\",\"退款后置处理\",\"退款后置处理主要是根据当前退款请求和三方退款的接口响应，落库记录退款订单信息；\",\"ⅰ. 根据退款请求和三方退款接口响应结果，更新当前退款订单的退款状态；\",\"ⅱ. 如果当前订单是首次退款，则将退款订单信息插入数据库；否则，更新已有退款订单信息；\"]},\"136\":{\"h\":\"2.4. 退款回调设计\",\"t\":[\"​ 第三方支付平台退款成功后，会回调支付中心，由支付中心系统进行统一处理后再回调业务商户系统。退款回调的和支付回调类似，具体步骤如下：\",\"第三方支付平台通过HTTP请求通知支付中心退款结果，支付中心接收到请求后，根据配置的商户信息，对退款回调进行解密；\",\"通过支付单号和退款单号查询退款记录，如果退款记录不存在或者退款回调已经处理过，则直接返回处理结果；\",\"如果订单存在且未被处理过，则校验商户信息、签名和金额；\",\"如果验证不通过，则返回处理失败；如果验证通过，则更新支付订单表记录，然后更新退款记录订单状态；\",\"异步回调商户系统通知退款结果；如果回调商户系统失败，会放入延时队列，进行失败重试，直至回调成功，重复支付退款回调不进行通知商户；\"]},\"137\":{\"h\":\"2.5. 系统异常处理设计\",\"t\":[\"​ 异常分为两种，内部异常和外部异常，支付中心系统只能对内部异常进行处理，对于外部异常，如第三方支付返回结果异常，由业务商户系统进行处理。而对于支付系统内部异常，如非阻塞主流程的异常则放入异常队列，等待后续处理，如影响主流程异常，则抛出由商户处理。异常处理流程图如下：\",\"非阻塞主流程的异常：\",\"用户支付成功后，数据库异常导致修改支付订单状态失败，此等异常不应影响支付流程的进行，等待后续处理即可。\",\"回调后服务器异常\",\"退款成功后，修改数据库异常\"]},\"138\":{\"h\":\"2.6. 数据库设计\"},\"139\":{\"h\":\"商户表（pay_merchant）\"},\"140\":{\"c\":[\"项目\"]},\"141\":{\"c\":[\"项目 支付系统\"]},\"142\":{\"h\":\"\",\"t\":[\"https://confluence.inner.youdao.com/pages/viewpage.action?pageId=321251922\",\"https://confluence.inner.youdao.com/pages/viewpage.action?pageId=318935708\",\"https://shimo.youdao.com/mindmaps/3DMrvd9zGYvwsbZK\",\"https://confluence.inner.youdao.com/pages/viewpage.action?pageId=331116336\",\"https://confluence.inner.youdao.com/pages/viewpage.action?pageId=328384322\",\"https://confluence.inner.youdao.com/pages/viewpage.action?pageId=281806270\"]},\"143\":{\"h\":\"# Spring进阶 - Spring AOP实现原理详解之AOP代理的创建\",\"t\":[\"上文我们介绍了Spring AOP原理解析的切面实现过程(将切面类的所有切面方法根据使用的注解生成对应Advice，并将Advice连同切入点匹配器和切面类等信息一并封装到Advisor)。本文在此基础上继续介绍，代理（cglib代理和JDK代理）的创建过程。@pdai\",\"Spring进阶 - Spring AOP实现原理详解之AOP代理的创建\",\"引入\",\"代理的创建\",\"获取所有的Advisor\",\"创建代理的入口方法\",\"依据条件创建代理(jdk或cglib)\"]},\"144\":{\"h\":\"引入\",\"t\":[\"前文主要Spring AOP原理解析的切面实现过程(加载配置，将切面类的所有切面方法根据使用的注解生成对应Advice，并将Advice连同切入点匹配器和切面类等信息一并封装到Advisor)。\",\"同时我们也总结了Spring AOP初始化的过程，具体如下：\",\"由IOC Bean加载方法栈中找到parseCustomElement方法，找到parse aop:aspectj-autoproxy的handler(org.springframework.aop.config.AopNamespaceHandler)\",\"AopNamespaceHandler注册了<aop:aspectj-autoproxy/>的解析类是AspectJAutoProxyBeanDefinitionParser\",\"AspectJAutoProxyBeanDefinitionParser的parse 方法 通过AspectJAwareAdvisorAutoProxyCreator类去创建\",\"AspectJAwareAdvisorAutoProxyCreator实现了两类接口，BeanFactoryAware和BeanPostProcessor；根据Bean生命周期方法找到两个核心方法：postProcessBeforeInstantiation和postProcessAfterInitialization \",\"postProcessBeforeInstantiation：主要是处理使用了@Aspect注解的切面类，然后将切面类的所有切面方法根据使用的注解生成对应Advice，并将Advice连同切入点匹配器和切面类等信息一并封装到Advisor\",\"postProcessAfterInitialization：主要负责将Advisor注入到合适的位置，创建代理（cglib或jdk)，为后面给代理进行增强实现做准备。\",\"本文接着介绍postProcessAfterInitialization的方法，即Spring AOP的代理（cglib或jdk)的创建过程。\"]},\"145\":{\"h\":\"代理的创建\",\"t\":[\"创建代理的方法是postProcessAfterInitialization：如果bean被子类标识为代理，则使用配置的拦截器创建一个代理\",\"/** * Create a proxy with the configured interceptors if the bean is * identified as one to proxy by the subclass. * @see #getAdvicesAndAdvisorsForBean */ @Override public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) { if (bean != null) { Object cacheKey = getCacheKey(bean.getClass(), beanName); // 如果不是提前暴露的代理 if (this.earlyProxyReferences.remove(cacheKey) != bean) { return wrapIfNecessary(bean, beanName, cacheKey); } } return bean; }\",\"wrapIfNecessary方法主要用于判断是否需要创建代理，如果Bean能够获取到advisor才需要创建代理\",\"/** * Wrap the given bean if necessary, i.e. if it is eligible for being proxied. * @param bean the raw bean instance * @param beanName the name of the bean * @param cacheKey the cache key for metadata access * @return a proxy wrapping the bean, or the raw bean instance as-is */ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) { // 如果bean是通过TargetSource接口获取 if (beanName != null && this.targetSourcedBeans.contains(beanName)) { return bean; } // 如果bean是切面类 if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) { return bean; } // 如果是aop基础类？是否跳过？ if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) { this.advisedBeans.put(cacheKey, Boolean.FALSE); return bean; } // 重点：获取所有advisor，如果没有获取到，那说明不要进行增强，也就不需要代理了。 Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null); if (specificInterceptors != DO_NOT_PROXY) { this.advisedBeans.put(cacheKey, Boolean.TRUE); // 重点：创建代理 Object proxy = createProxy( bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean)); this.proxyTypes.put(cacheKey, proxy.getClass()); return proxy; } this.advisedBeans.put(cacheKey, Boolean.FALSE); return bean; }\"]},\"146\":{\"h\":\"获取所有的Advisor\",\"t\":[\"我们看下获取所有advisor的方法getAdvicesAndAdvisorsForBean\",\"@Override @Nullable protected Object[] getAdvicesAndAdvisorsForBean( Class<?> beanClass, String beanName, @Nullable TargetSource targetSource) { List<Advisor> advisors = findEligibleAdvisors(beanClass, beanName); if (advisors.isEmpty()) { return DO_NOT_PROXY; } return advisors.toArray(); }\",\"通过findEligibleAdvisors方法获取advisor， 如果获取不到返回DO_NOT_PROXY（不需要创建代理），findEligibleAdvisors方法如下\",\"/** * Find all eligible Advisors for auto-proxying this class. * @param beanClass the clazz to find advisors for * @param beanName the name of the currently proxied bean * @return the empty List, not {@code null}, * if there are no pointcuts or interceptors * @see #findCandidateAdvisors * @see #sortAdvisors * @see #extendAdvisors */ protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName) { // 和上文一样，获取所有切面类的切面方法生成Advisor List<Advisor> candidateAdvisors = findCandidateAdvisors(); // 找到这些Advisor中能够应用于beanClass的Advisor List<Advisor> eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName); // 如果需要，交给子类拓展 extendAdvisors(eligibleAdvisors); // 对Advisor排序 if (!eligibleAdvisors.isEmpty()) { eligibleAdvisors = sortAdvisors(eligibleAdvisors); } return eligibleAdvisors; }\",\"获取所有切面类的切面方法生成Advisor\",\"/** * Find all candidate Advisors to use in auto-proxying. * @return the List of candidate Advisors */ protected List<Advisor> findCandidateAdvisors() { Assert.state(this.advisorRetrievalHelper != null, \\\"No BeanFactoryAdvisorRetrievalHelper available\\\"); return this.advisorRetrievalHelper.findAdvisorBeans(); }\",\"找到这些Advisor中能够应用于beanClass的Advisor\",\"/** * Determine the sublist of the {@code candidateAdvisors} list * that is applicable to the given class. * @param candidateAdvisors the Advisors to evaluate * @param clazz the target class * @return sublist of Advisors that can apply to an object of the given class * (may be the incoming List as-is) */ public static List<Advisor> findAdvisorsThatCanApply(List<Advisor> candidateAdvisors, Class<?> clazz) { if (candidateAdvisors.isEmpty()) { return candidateAdvisors; } List<Advisor> eligibleAdvisors = new ArrayList<>(); for (Advisor candidate : candidateAdvisors) { // 通过Introduction实现的advice if (candidate instanceof IntroductionAdvisor && canApply(candidate, clazz)) { eligibleAdvisors.add(candidate); } } boolean hasIntroductions = !eligibleAdvisors.isEmpty(); for (Advisor candidate : candidateAdvisors) { if (candidate instanceof IntroductionAdvisor) { // already processed continue; } // 是否能够应用于clazz的Advice if (canApply(candidate, clazz, hasIntroductions)) { eligibleAdvisors.add(candidate); } } return eligibleAdvisors; }\"]},\"147\":{\"h\":\"创建代理的入口方法\",\"t\":[\"获取所有advisor后，如果有advisor，则说明需要增强，即需要创建代理，创建代理的方法如下：\",\"/** * Create an AOP proxy for the given bean. * @param beanClass the class of the bean * @param beanName the name of the bean * @param specificInterceptors the set of interceptors that is * specific to this bean (may be empty, but not null) * @param targetSource the TargetSource for the proxy, * already pre-configured to access the bean * @return the AOP proxy for the bean * @see #buildAdvisors */ protected Object createProxy(Class<?> beanClass, @Nullable String beanName, @Nullable Object[] specificInterceptors, TargetSource targetSource) { if (this.beanFactory instanceof ConfigurableListableBeanFactory) { AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass); } ProxyFactory proxyFactory = new ProxyFactory(); proxyFactory.copyFrom(this); if (proxyFactory.isProxyTargetClass()) { // Explicit handling of JDK proxy targets (for introduction advice scenarios) if (Proxy.isProxyClass(beanClass)) { // Must allow for introductions; can't just set interfaces to the proxy's interfaces only. for (Class<?> ifc : beanClass.getInterfaces()) { proxyFactory.addInterface(ifc); } } } else { // No proxyTargetClass flag enforced, let's apply our default checks... if (shouldProxyTargetClass(beanClass, beanName)) { proxyFactory.setProxyTargetClass(true); } else { evaluateProxyInterfaces(beanClass, proxyFactory); } } Advisor[] advisors = buildAdvisors(beanName, specificInterceptors); proxyFactory.addAdvisors(advisors); proxyFactory.setTargetSource(targetSource); customizeProxyFactory(proxyFactory); proxyFactory.setFrozen(this.freezeProxy); if (advisorsPreFiltered()) { proxyFactory.setPreFiltered(true); } // Use original ClassLoader if bean class not locally loaded in overriding class loader ClassLoader classLoader = getProxyClassLoader(); if (classLoader instanceof SmartClassLoader && classLoader != beanClass.getClassLoader()) { classLoader = ((SmartClassLoader) classLoader).getOriginalClassLoader(); } return proxyFactory.getProxy(classLoader); }\",\"proxyFactory.getProxy(classLoader)\",\"/** * Create a new proxy according to the settings in this factory. * <p>Can be called repeatedly. Effect will vary if we've added * or removed interfaces. Can add and remove interceptors. * <p>Uses the given class loader (if necessary for proxy creation). * @param classLoader the class loader to create the proxy with * (or {@code null} for the low-level proxy facility's default) * @return the proxy object */ public Object getProxy(@Nullable ClassLoader classLoader) { return createAopProxy().getProxy(classLoader); }\"]},\"148\":{\"h\":\"依据条件创建代理(jdk或cglib)\",\"t\":[\"DefaultAopProxyFactory.createAopProxy\",\"@Override public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException { if (!NativeDetector.inNativeImage() && (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config))) { Class<?> targetClass = config.getTargetClass(); if (targetClass == null) { throw new AopConfigException(\\\"TargetSource cannot determine target class: \\\" + \\\"Either an interface or a target is required for proxy creation.\\\"); } if (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) { return new JdkDynamicAopProxy(config); } return new ObjenesisCglibAopProxy(config); } else { return new JdkDynamicAopProxy(config); } }\",\"几个要点\",\"config.isOptimize() 是通过optimize设置，表示配置是自定义的，默认是false；\",\"config.isProxyTargetClass()是通过<aop:config proxy-target-class=\\\"true\\\" /> 来配置的，表示优先使用cglib代理，默认是false；\",\"hasNoUserSuppliedProxyInterfaces(config) 表示是否目标类实现了接口\",\"由此我们可以知道：\",\"Spring默认在目标类实现接口时是通过JDK代理实现的，只有非接口的是通过Cglib代理实现的。当设置proxy-target-class为true时在目标类不是接口或者代理类时优先使用cglib代理实现。\"]},\"149\":{\"h\":\"# Spring进阶- Spring IOC实现原理详解之Bean实例化(生命周期,循环依赖等)\",\"t\":[\"上文，我们看了IOC设计要点和设计结构；以及Spring如何实现将资源配置（以xml配置为例）通过加载，解析，生成BeanDefination并注册到IoC容器中的；容器中存放的是Bean的定义即BeanDefinition放到beanDefinitionMap中，本质上是一个ConcurrentHashMap<String, Object>；并且BeanDefinition接口中包含了这个类的Class信息以及是否是单例等。那么如何从BeanDefinition中实例化Bean对象呢，这是本文主要研究的内容？@pdai\",\"Spring进阶- Spring IOC实现原理详解之Bean实例化(生命周期,循环依赖等)\",\"引入\",\"BeanFactory中getBean的主体思路\",\"初步的思考\",\"Spring中getBean的主体思路\",\"重点：Spring如何解决循环依赖问题\",\"Spring单例模式下的属性依赖\",\"Spring为何不能解决非单例属性之外的循环依赖？\",\"Spring为什么不能解决构造器的循环依赖？\",\"Spring为什么不能解决prototype作用域循环依赖？\",\"Spring为什么不能解决多例的循环依赖？\",\"那么其它循环依赖如何解决？\",\"重点：Spring中Bean的生命周期\",\"Spring Bean生命周期流程\",\"Spring Bean生命周期案例\",\"Spring Bean生命周期源码\",\"参考文章\"]},\"150\":{\"h\":\"引入\",\"t\":[\"上文，我们看了IOC设计要点和设计结构；\\b以及Spring如何实现将资源配置（以xml配置为例）通过加载，解析，生成BeanDefination并注册到IoC容器中的；容器中存放的是Bean的定义即BeanDefinition放到beanDefinitionMap中，本质上是一个ConcurrentHashMap<String, Object>；并且BeanDefinition接口中包含了这个类的Class信息以及是否是单例等。那么如何从BeanDefinition中实例化Bean对象呢？\",\"本文主要研究如何从IOC容器已有的BeanDefinition信息，实例化出Bean对象；这里还会包括三块重点内容：\",\"BeanFactory中getBean的主体思路\",\"Spring如何解决循环依赖问题\",\"Spring中Bean的生命周期\"]},\"151\":{\"h\":\"BeanFactory中getBean的主体思路\",\"t\":[\"上文中我们知道BeanFactory定义了Bean容器的规范，其中包含根据bean的名字, Class类型和参数等来得到bean实例。\",\"// 根据bean的名字和Class类型等来得到bean实例 Object getBean(String name) throws BeansException; Object getBean(String name, Class requiredType) throws BeansException; Object getBean(String name, Object... args) throws BeansException; <T> T getBean(Class<T> requiredType) throws BeansException; <T> T getBean(Class<T> requiredType, Object... args) throws BeansException;\"]},\"152\":{\"h\":\"初步的思考\",\"t\":[\"上文我们已经分析了IoC初始化的流程，最终的将Bean的定义即BeanDefinition放到beanDefinitionMap中，本质上是一个ConcurrentHashMap<String, Object>；并且BeanDefinition接口中包含了这个类的Class信息以及是否是单例等；\",\"这样我们初步有了实现Object getBean(String name)这个方法的思路：\",\"从beanDefinitionMap通过beanName获得BeanDefinition\",\"从BeanDefinition中获得beanClassName\",\"通过反射初始化beanClassName的实例instance \",\"构造函数从BeanDefinition的getConstructorArgumentValues()方法获取\",\"属性值从BeanDefinition的getPropertyValues()方法获取\",\"返回beanName的实例instance\",\"由于BeanDefinition还有单例的信息，如果是无参构造函数的实例还可以放在一个缓存中，这样下次获取这个单例的实例时只需要从缓存中获取，如果获取不到再通过上述步骤获取。\",\"（PS：如上只是我们初步的思路，而Spring还需要考虑各种设计上的问题，比如beanDefinition中其它定义，循环依赖等；所以我们来看下Spring是如何是如何实现的）\"]},\"153\":{\"h\":\"Spring中getBean的主体思路\",\"t\":[\"BeanFactory实现getBean方法在AbstractBeanFactory中，这个方法重载都是调用doGetBean方法进行实现的：\",\"public Object getBean(String name) throws BeansException { return doGetBean(name, null, null, false); } public <T> T getBean(String name, Class<T> requiredType) throws BeansException { return doGetBean(name, requiredType, null, false); } public Object getBean(String name, Object... args) throws BeansException { return doGetBean(name, null, args, false); } public <T> T getBean(String name, @Nullable Class<T> requiredType, @Nullable Object... args) throws BeansException { return doGetBean(name, requiredType, args, false); }\",\"我们来看下doGetBean方法(这个方法很长，我们主要看它的整体思路和设计要点）：\",\"// 参数typeCheckOnly：bean实例是否包含一个类型检查 protected <T> T doGetBean( String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException { // 解析bean的真正name，如果bean是工厂类，name前缀会加&，需要去掉 String beanName = transformedBeanName(name); Object beanInstance; // Eagerly check singleton cache for manually registered singletons. Object sharedInstance = getSingleton(beanName); if (sharedInstance != null && args == null) { // 无参单例从缓存中获取 beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, null); } else { // 如果bean实例还在创建中，则直接抛出异常 if (isPrototypeCurrentlyInCreation(beanName)) { throw new BeanCurrentlyInCreationException(beanName); } // 如果 bean definition 存在于父的bean工厂中，委派给父Bean工厂获取 BeanFactory parentBeanFactory = getParentBeanFactory(); if (parentBeanFactory != null && !containsBeanDefinition(beanName)) { // Not found -> check parent. String nameToLookup = originalBeanName(name); if (parentBeanFactory instanceof AbstractBeanFactory) { return ((AbstractBeanFactory) parentBeanFactory).doGetBean( nameToLookup, requiredType, args, typeCheckOnly); } else if (args != null) { // Delegation to parent with explicit args. return (T) parentBeanFactory.getBean(nameToLookup, args); } else if (requiredType != null) { // No args -> delegate to standard getBean method. return parentBeanFactory.getBean(nameToLookup, requiredType); } else { return (T) parentBeanFactory.getBean(nameToLookup); } } if (!typeCheckOnly) { // 将当前bean实例放入alreadyCreated集合里，标识这个bean准备创建了 markBeanAsCreated(beanName); } StartupStep beanCreation = this.applicationStartup.start(\\\"spring.beans.instantiate\\\") .tag(\\\"beanName\\\", name); try { if (requiredType != null) { beanCreation.tag(\\\"beanType\\\", requiredType::toString); } RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName); checkMergedBeanDefinition(mbd, beanName, args); // 确保它的依赖也被初始化了. String[] dependsOn = mbd.getDependsOn(); if (dependsOn != null) { for (String dep : dependsOn) { if (isDependent(beanName, dep)) { throw new BeanCreationException(mbd.getResourceDescription(), beanName, \\\"Circular depends-on relationship between '\\\" + beanName + \\\"' and '\\\" + dep + \\\"'\\\"); } registerDependentBean(dep, beanName); try { getBean(dep); // 初始化它依赖的Bean } catch (NoSuchBeanDefinitionException ex) { throw new BeanCreationException(mbd.getResourceDescription(), beanName, \\\"'\\\" + beanName + \\\"' depends on missing bean '\\\" + dep + \\\"'\\\", ex); } } } // 创建Bean实例：单例 if (mbd.isSingleton()) { sharedInstance = getSingleton(beanName, () -> { try { // 真正创建bean的方法 return createBean(beanName, mbd, args); } catch (BeansException ex) { // Explicitly remove instance from singleton cache: It might have been put there // eagerly by the creation process, to allow for circular reference resolution. // Also remove any beans that received a temporary reference to the bean. destroySingleton(beanName); throw ex; } }); beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, mbd); } // 创建Bean实例：原型 else if (mbd.isPrototype()) { // It's a prototype -> create a new instance. Object prototypeInstance = null; try { beforePrototypeCreation(beanName); prototypeInstance = createBean(beanName, mbd, args); } finally { afterPrototypeCreation(beanName); } beanInstance = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd); } // 创建Bean实例：根据bean的scope创建 else { String scopeName = mbd.getScope(); if (!StringUtils.hasLength(scopeName)) { throw new IllegalStateException(\\\"No scope name defined for bean ´\\\" + beanName + \\\"'\\\"); } Scope scope = this.scopes.get(scopeName); if (scope == null) { throw new IllegalStateException(\\\"No Scope registered for scope name '\\\" + scopeName + \\\"'\\\"); } try { Object scopedInstance = scope.get(beanName, () -> { beforePrototypeCreation(beanName); try { return createBean(beanName, mbd, args); } finally { afterPrototypeCreation(beanName); } }); beanInstance = getObjectForBeanInstance(scopedInstance, name, beanName, mbd); } catch (IllegalStateException ex) { throw new ScopeNotActiveException(beanName, scopeName, ex); } } } catch (BeansException ex) { beanCreation.tag(\\\"exception\\\", ex.getClass().toString()); beanCreation.tag(\\\"message\\\", String.valueOf(ex.getMessage())); cleanupAfterBeanCreationFailure(beanName); throw ex; } finally { beanCreation.end(); } } return adaptBeanInstance(name, beanInstance, requiredType); }\",\"这段代码很长，主要看我加中文注释的方法即可。\",\"解析bean的真正name，如果bean是工厂类，name前缀会加&，需要去掉\",\"无参单例先从缓存中尝试获取\",\"如果bean实例还在创建中，则直接抛出异常\",\"如果bean definition 存在于父的bean工厂中，委派给父Bean工厂获取\",\"标记这个beanName的实例正在创建\",\"确保它的依赖也被初始化\",\"真正创建 \",\"单例时\",\"原型时\",\"根据bean的scope创建\"]},\"154\":{\"h\":\"重点：Spring如何解决循环依赖问题\",\"t\":[\"首先我们需要说明，Spring只是解决了单例模式下属性依赖的循环问题；Spring为了解决单例的循环依赖问题，使用了三级缓存。\"]},\"155\":{\"h\":\"Spring单例模式下的属性依赖\",\"t\":[\"先来看下这三级缓存\",\"/** Cache of singleton objects: bean name --> bean instance */ private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256); /** Cache of early singleton objects: bean name --> bean instance */ private final Map<String, Object> earlySingletonObjects = new HashMap<String, Object>(16); /** Cache of singleton factories: bean name --> ObjectFactory */ private final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<String, ObjectFactory<?>>(16);\",\"第一层缓存（singletonObjects）：单例对象缓存池，已经实例化并且属性赋值，这里的对象是成熟对象；\",\"第二层缓存（earlySingletonObjects）：单例对象缓存池，已经实例化但尚未属性赋值，这里的对象是半成品对象；\",\"第三层缓存（singletonFactories）: 单例工厂的缓存\",\"如下是获取单例中\",\"protected Object getSingleton(String beanName, boolean allowEarlyReference) { // Spring首先从singletonObjects（一级缓存）中尝试获取 Object singletonObject = this.singletonObjects.get(beanName); // 若是获取不到而且对象在建立中，则尝试从earlySingletonObjects(二级缓存)中获取 if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) { synchronized (this.singletonObjects) { singletonObject = this.earlySingletonObjects.get(beanName); if (singletonObject == null && allowEarlyReference) { ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName); if (singletonFactory != null) { //若是仍是获取不到而且容许从singletonFactories经过getObject获取，则经过singletonFactory.getObject()(三级缓存)获取 singletonObject = singletonFactory.getObject(); //若是获取到了则将singletonObject放入到earlySingletonObjects,也就是将三级缓存提高到二级缓存中 this.earlySingletonObjects.put(beanName, singletonObject); this.singletonFactories.remove(beanName); } } } } return (singletonObject != NULL_OBJECT ? singletonObject : null); }\",\"补充一些方法和参数\",\"isSingletonCurrentlyInCreation()：判断当前单例bean是否正在建立中，也就是没有初始化完成(好比A的构造器依赖了B对象因此得先去建立B对象， 或则在A的populateBean过程当中依赖了B对象，得先去建立B对象，这时的A就是处于建立中的状态。)\",\"allowEarlyReference ：是否容许从singletonFactories中经过getObject拿到对象\",\"分析getSingleton()的整个过程，Spring首先从一级缓存singletonObjects中获取。若是获取不到，而且对象正在建立中，就再从二级缓存earlySingletonObjects中获取。若是仍是获取不到且容许singletonFactories经过getObject()获取，就从三级缓存singletonFactory.getObject()(三级缓存)获取，若是获取到了则从三级缓存移动到了二级缓存。\",\"从上面三级缓存的分析，咱们能够知道，Spring解决循环依赖的诀窍就在于singletonFactories这个三级cache。这个cache的类型是ObjectFactory，定义以下：\",\"public interface ObjectFactory<T> { T getObject() throws BeansException; }\",\"在bean建立过程当中，有两处比较重要的匿名内部类实现了该接口。一处是Spring利用其建立bean的时候，另外一处就是:\",\"addSingletonFactory(beanName, new ObjectFactory<Object>() { @Override public Object getObject() throws BeansException { return getEarlyBeanReference(beanName, mbd, bean); }});\",\"此处就是解决循环依赖的关键，这段代码发生在createBeanInstance以后，也就是说单例对象此时已经被建立出来的。这个对象已经被生产出来了，虽然还不完美（尚未进行初始化的第二步和第三步），可是已经能被人认出来了（根据对象引用能定位到堆中的对象），因此Spring此时将这个对象提早曝光出来让你们认识，让你们使用。\",\"好比“A对象setter依赖B对象，B对象setter依赖A对象”，A首先完成了初始化的第一步，而且将本身提早曝光到singletonFactories中，此时进行初始化的第二步，发现本身依赖对象B，此时就尝试去get(B)，发现B尚未被create，因此走create流程，B在初始化第一步的时候发现本身依赖了对象A，因而尝试get(A)，尝试一级缓存singletonObjects(确定没有，由于A还没初始化彻底)，尝试二级缓存earlySingletonObjects（也没有），尝试三级缓存singletonFactories，因为A经过ObjectFactory将本身提早曝光了，因此B可以经过ObjectFactory.getObject拿到A对象(半成品)，B拿到A对象后顺利完成了初始化阶段一、二、三，彻底初始化以后将本身放入到一级缓存singletonObjects中。此时返回A中，A此时能拿到B的对象顺利完成本身的初始化阶段二、三，最终A也完成了初始化，进去了一级缓存singletonObjects中，并且更加幸运的是，因为B拿到了A的对象引用，因此B如今hold住的A对象完成了初始化。\"]},\"156\":{\"h\":\"Spring为何不能解决非单例属性之外的循环依赖？\",\"t\":[\"通过以下几个问题，辅助我们进一步理解。\"]},\"157\":{\"h\":\"Spring为什么不能解决构造器的循环依赖？\",\"t\":[\"构造器注入形成的循环依赖： 也就是beanB需要在beanA的构造函数中完成初始化，beanA也需要在beanB的构造函数中完成初始化，这种情况的结果就是两个bean都不能完成初始化，循环依赖难以解决。\",\"Spring解决循环依赖主要是依赖三级缓存，但是的在调用构造方法之前还未将其放入三级缓存之中，因此后续的依赖调用构造方法的时候并不能从三级缓存中获取到依赖的Bean，因此不能解决。\"]},\"158\":{\"h\":\"Spring为什么不能解决prototype作用域循环依赖？\",\"t\":[\"这种循环依赖同样无法解决，因为spring不会缓存‘prototype’作用域的bean，而spring中循环依赖的解决正是通过缓存来实现的。\"]},\"159\":{\"h\":\"Spring为什么不能解决多例的循环依赖？\",\"t\":[\"多实例Bean是每次调用一次getBean都会执行一次构造方法并且给属性赋值，根本没有三级缓存，因此不能解决循环依赖。\"]},\"160\":{\"h\":\"那么其它循环依赖如何解决？\",\"t\":[\"那么实际开发中，类似的依赖是如何解决？\",\"生成代理对象产生的循环依赖\",\"这类循环依赖问题解决方法很多，主要有：\",\"使用@Lazy注解，延迟加载\",\"使用@DependsOn注解，指定加载先后关系\",\"修改文件名称，改变循环依赖类的加载顺序\",\"使用@DependsOn产生的循环依赖\",\"这类循环依赖问题要找到@DependsOn注解循环依赖的地方，迫使它不循环依赖就可以解决问题。\",\"多例循环依赖\",\"这类循环依赖问题可以通过把bean改成单例的解决。\",\"构造器循环依赖\",\"这类循环依赖问题可以通过使用@Lazy注解解决。\"]},\"161\":{\"h\":\"重点：Spring中Bean的生命周期\",\"t\":[\"Spring 只帮我们管理单例模式 Bean 的完整生命周期，对于 prototype 的 bean ，Spring 在创建好交给使用者之后则不会再管理后续的生命周期。\",\"Spring 容器可以管理 singleton 作用域 Bean 的生命周期，在此作用域下，Spring 能够精确地知道该 Bean 何时被创建，何时初始化完成，以及何时被销毁。\",\"而对于 prototype 作用域的 Bean，Spring 只负责创建，当容器创建了 Bean 的实例后，Bean 的实例就交给客户端代码管理，Spring 容器将不再跟踪其生命周期。每次客户端请求 prototype 作用域的 Bean 时，Spring 容器都会创建一个新的实例，并且不会管那些被配置成 prototype 作用域的 Bean 的生命周期。\",\"了解 Spring 生命周期的意义就在于，可以利用 Bean 在其存活期间的指定时刻完成一些相关操作。这种时刻可能有很多，但一般情况下，会在 Bean 被初始化后和被销毁前执行一些相关操作。\"]},\"162\":{\"h\":\"Spring Bean生命周期流程\",\"t\":[\"在 Spring 中，Bean 的生命周期是一个很复杂的执行过程，我们可以利用 Spring 提供的方法定制 Bean 的创建过程。\",\"Spring 容器中 Bean 的生命周期流程\",\"如果 BeanFactoryPostProcessor 和 Bean 关联, 则调用postProcessBeanFactory方法.(即首先尝试从Bean工厂中获取Bean)\",\"如果 InstantiationAwareBeanPostProcessor 和 Bean 关联，则调用postProcessBeforeInstantiation方法\",\"根据配置情况调用 Bean 构造方法实例化 Bean。\",\"利用依赖注入完成 Bean 中所有属性值的配置注入。\",\"如果 InstantiationAwareBeanPostProcessor 和 Bean 关联，则调用postProcessAfterInstantiation方法和postProcessProperties\",\"调用xxxAware接口 (上图只是给了几个例子) \",\"第一类Aware接口\",\"如果 Bean 实现了 BeanNameAware 接口，则 Spring 调用 Bean 的 setBeanName() 方法传入当前 Bean 的 id 值。\",\"如果 Bean 实现了 BeanClassLoaderAware 接口，则 Spring 调用 setBeanClassLoader() 方法传入classLoader的引用。\",\"如果 Bean 实现了 BeanFactoryAware 接口，则 Spring 调用 setBeanFactory() 方法传入当前工厂实例的引用。\",\"第二类Aware接口\",\"如果 Bean 实现了 EnvironmentAware 接口，则 Spring 调用 setEnvironment() 方法传入当前 Environment 实例的引用。\",\"如果 Bean 实现了 EmbeddedValueResolverAware 接口，则 Spring 调用 setEmbeddedValueResolver() 方法传入当前 StringValueResolver 实例的引用。\",\"如果 Bean 实现了 ApplicationContextAware 接口，则 Spring 调用 setApplicationContext() 方法传入当前 ApplicationContext 实例的引用。\",\"...\",\"如果 BeanPostProcessor 和 Bean 关联，则 Spring 将调用该接口的预初始化方法 postProcessBeforeInitialzation() 对 Bean 进行加工操作，此处非常重要，Spring 的 AOP 就是利用它实现的。\",\"如果 Bean 实现了 InitializingBean 接口，则 Spring 将调用 afterPropertiesSet() 方法。(或者有执行@PostConstruct注解的方法)\",\"如果在配置文件中通过 init-method 属性指定了初始化方法，则调用该初始化方法。\",\"如果 BeanPostProcessor 和 Bean 关联，则 Spring 将调用该接口的初始化方法 postProcessAfterInitialization()。此时，Bean 已经可以被应用系统使用了。\",\"如果在 <bean> 中指定了该 Bean 的作用范围为 scope=\\\"singleton\\\"，则将该 Bean 放入 Spring IoC 的缓存池中，将触发 Spring 对该 Bean 的生命周期管理；如果在 <bean> 中指定了该 Bean 的作用范围为 scope=\\\"prototype\\\"，则将该 Bean 交给调用者，调用者管理该 Bean 的生命周期，Spring 不再管理该 Bean。\",\"如果 Bean 实现了 DisposableBean 接口，则 Spring 会调用 destory() 方法将 Spring 中的 Bean 销毁；(或者有执行@PreDestroy注解的方法)\",\"如果在配置文件中通过 destory-method 属性指定了 Bean 的销毁方法，则 Spring 将调用该方法对 Bean 进行销毁。\",\"Bean的完整生命周期经历了各种方法调用，这些方法可以划分为以下几类：(结合上图，需要有如下顶层思维)\",\"Bean自身的方法： 这个包括了Bean本身调用的方法和通过配置文件中<bean>的init-method和destroy-method指定的方法\",\"Bean级生命周期接口方法： 这个包括了BeanNameAware、BeanFactoryAware、ApplicationContextAware；当然也包括InitializingBean和DiposableBean这些接口的方法（可以被@PostConstruct和@PreDestroy注解替代)\",\"容器级生命周期接口方法： 这个包括了InstantiationAwareBeanPostProcessor 和 BeanPostProcessor 这两个接口实现，一般称它们的实现类为“后处理器”。\",\"工厂后处理器接口方法： 这个包括了AspectJWeavingEnabler, ConfigurationClassPostProcessor, CustomAutowireConfigurer等等非常有用的工厂后处理器接口的方法。工厂后处理器也是容器级的。在应用上下文装配配置文件之后立即调用。\"]},\"163\":{\"h\":\"Spring Bean生命周期案例\",\"t\":[\"我们通过一个例子来验证上面的整个流程\",\"定义Bean（这里是User）, 并让它实现BeanNameAware,BeanFactoryAware,ApplicationContextAware接口和InitializingBean,DisposableBean接口：\",\"package tech.pdai.springframework.entity; import lombok.ToString; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.BeansException; import org.springframework.beans.factory.BeanFactory; import org.springframework.beans.factory.BeanFactoryAware; import org.springframework.beans.factory.BeanNameAware; import org.springframework.beans.factory.DisposableBean; import org.springframework.beans.factory.InitializingBean; import org.springframework.context.ApplicationContext; import org.springframework.context.ApplicationContextAware; /** * @author pdai */ @Slf4j @ToString public class User implements BeanFactoryAware, BeanNameAware, ApplicationContextAware, InitializingBean, DisposableBean { /** * user's name. */ private String name; /** * user's age. */ private int age; /** * bean factory. */ private BeanFactory beanFactory; /** * application context. */ private ApplicationContext applicationContext; /** * bean name. */ private String beanName; public User() { log.info(\\\"execute User#new User()\\\"); } public void setName(String name) { log.info(\\\"execute User#setName({})\\\", name); this.name = name; } public void setAge(int age) { log.info(\\\"execute User#setAge({})\\\", age); this.age = age; } @Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException { log.info(\\\"execute BeanFactoryAware#setBeanFactory\\\"); this.beanFactory = beanFactory; } @Override public void setBeanName(String s) { log.info(\\\"execute BeanNameAware#setBeanName\\\"); this.beanName = s; } @Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException { log.info(\\\"execute ApplicationContextAware#setApplicationContext\\\"); this.applicationContext = applicationContext; } @Override public void destroy() throws Exception { log.info(\\\"execute DisposableBean#destroy\\\"); } @Override public void afterPropertiesSet() throws Exception { log.info(\\\"execute InitializingBean#afterPropertiesSet\\\"); } public void doInit() { log.info(\\\"execute User#doInit\\\"); } public void doDestroy() { log.info(\\\"execute User#doDestroy\\\"); } }\",\"定义BeanFactoryPostProcessor的实现类\",\"/** * @author pdai */ @Slf4j @Component public class MyBeanFactoryPostProcessor implements BeanFactoryPostProcessor { @Override public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory) throws BeansException { log.info(\\\"execute BeanFactoryPostProcessor#postProcessBeanFactory\\\"); } }\",\"定义InstantiationAwareBeanPostProcessor的实现类\",\"/** * @author pdai */ @Slf4j @Component public class MyInstantiationAwareBeanPostProcessor implements InstantiationAwareBeanPostProcessor { @Override public Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName) throws BeansException { log.info(\\\"execute InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation for {}\\\", beanName); return InstantiationAwareBeanPostProcessor.super.postProcessBeforeInstantiation(beanClass, beanName); } @Override public boolean postProcessAfterInstantiation(Object bean, String beanName) throws BeansException { log.info(\\\"execute InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation for {}\\\", beanName); return InstantiationAwareBeanPostProcessor.super.postProcessAfterInstantiation(bean, beanName); } @Override public PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName) throws BeansException { log.info(\\\"execute InstantiationAwareBeanPostProcessor#postProcessProperties for {}\\\", beanName); return InstantiationAwareBeanPostProcessor.super.postProcessProperties(pvs, bean, beanName); } }\",\"定义BeanPostProcessor的实现类\",\"/** * @author pdai */ @Slf4j @Component public class MyBeanPostProcessor implements BeanPostProcessor { @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { log.info(\\\"execute BeanPostProcessor#postProcessBeforeInitialization for {}\\\", beanName); return BeanPostProcessor.super.postProcessBeforeInitialization(bean, beanName); } @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { log.info(\\\"execute BeanPostProcessor#postProcessAfterInitialization for {}\\\", beanName); return BeanPostProcessor.super.postProcessAfterInitialization(bean, beanName); } }\",\"通过Java配置方式初始化Bean\",\"/** * @author pdai */ @Configuration public class BeansConfig { @Bean(name = \\\"user\\\", initMethod = \\\"doInit\\\", destroyMethod = \\\"doDestroy\\\") public User create() { User user = new User(); user.setName(\\\"pdai\\\"); user.setAge(18); return user; } }\",\"测试的主方法\",\"/** * Cglib proxy demo. * * @author pdai */ @Slf4j public class App { /** * main interface. * * @param args args */ public static void main(String[] args) { log.info(\\\"Init application context\\\"); // create and configure beans AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext( \\\"tech.pdai.springframework\\\"); // retrieve configured instance User user = (User) context.getBean(\\\"user\\\"); // print info from beans log.info(user.toString()); log.info(\\\"Shutdown application context\\\"); context.registerShutdownHook(); } }\",\"输出结果（剔除无关输出）：\",\"12:44:42.547 [main] INFO tech.pdai.springframework.App - Init application context ... 12:44:43.134 [main] INFO tech.pdai.springframework.processor.MyBeanFactoryPostProcessor - execute BeanFactoryPostProcessor#postProcessBeanFactory ... 12:44:43.216 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'user' 12:44:43.216 [main] INFO tech.pdai.springframework.processor.MyInstantiationAwareBeanPostProcessor - execute InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation for user 12:44:43.236 [main] INFO tech.pdai.springframework.entity.User - execute User#new User() 12:44:43.237 [main] INFO tech.pdai.springframework.entity.User - execute User#setName(pdai) 12:44:43.237 [main] INFO tech.pdai.springframework.entity.User - execute User#setAge(18) 12:44:43.237 [main] INFO tech.pdai.springframework.processor.MyInstantiationAwareBeanPostProcessor - execute InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation for user 12:44:43.237 [main] INFO tech.pdai.springframework.processor.MyInstantiationAwareBeanPostProcessor - execute InstantiationAwareBeanPostProcessor#postProcessProperties for user 12:44:43.242 [main] INFO tech.pdai.springframework.entity.User - execute BeanNameAware#setBeanName 12:44:43.242 [main] INFO tech.pdai.springframework.entity.User - execute BeanFactoryAware#setBeanFactory 12:44:43.242 [main] INFO tech.pdai.springframework.entity.User - execute ApplicationContextAware#setApplicationContext 12:44:43.242 [main] INFO tech.pdai.springframework.processor.MyBeanPostProcessor - execute BeanPostProcessor#postProcessBeforeInitialization for user 12:44:43.242 [main] INFO tech.pdai.springframework.entity.User - execute InitializingBean#afterPropertiesSet 12:44:43.243 [main] INFO tech.pdai.springframework.entity.User - execute User#doInit 12:44:43.243 [main] INFO tech.pdai.springframework.processor.MyBeanPostProcessor - execute BeanPostProcessor#postProcessAfterInitialization for user 12:44:43.270 [main] INFO tech.pdai.springframework.App - User(name=pdai, age=18) 12:44:43.270 [main] INFO tech.pdai.springframework.App - Shutdown application context 12:44:43.276 [SpringContextShutdownHook] INFO tech.pdai.springframework.entity.User - execute DisposableBean#destroy 12:44:43.276 [SpringContextShutdownHook] INFO tech.pdai.springframework.entity.User - execute User#doDestroy\"]},\"164\":{\"h\":\"Spring Bean生命周期源码\"},\"165\":{\"h\":\"参考文章\",\"t\":[\"https://juejin.cn/post/6844903843596107790\",\"https://www.zhihu.com/question/438247718/answer/1730527725\"]},\"166\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"167\":{\"h\":\"Posts\"},\"168\":{\"h\":\"Java 基础\"},\"169\":{\"h\":\"Java\"},\"170\":{\"h\":\"Java 集合框架\"},\"171\":{\"h\":\"Spring\"},\"172\":{\"h\":\"框架\"},\"173\":{\"h\":\"数据结构知识体系\"},\"174\":{\"h\":\"算法\"},\"175\":{\"h\":\"全渠道 ERP\"},\"176\":{\"h\":\"项目\"},\"177\":{\"h\":\"支付系统\"},\"178\":{\"h\":\"AOP\"},\"179\":{\"h\":\"IOC\"}},\"dirtCount\":0,\"index\":[[\"全渠道\",{\"0\":{\"175\":1}}],[\"全面的把控和纠偏\",{\"1\":{\"99\":2}}],[\"算法\",{\"0\":{\"174\":1}}],[\"算法之道在新窗口打开\",{\"1\":{\"97\":1}}],[\"算法之道\",{\"1\":{\"97\":1}}],[\"框架\",{\"0\":{\"172\":1}}],[\"剔除无关输出\",{\"1\":{\"163\":1}}],[\"销毁\",{\"1\":{\"162\":1}}],[\"放入\",{\"1\":{\"162\":1}}],[\"已经可以被应用系统使用了\",{\"1\":{\"162\":1}}],[\"已经实例化但尚未属性赋值\",{\"1\":{\"155\":1}}],[\"已经实例化并且属性赋值\",{\"1\":{\"155\":1}}],[\"了解\",{\"1\":{\"161\":1}}],[\"何时初始化完成\",{\"1\":{\"161\":1}}],[\"何时被创建\",{\"1\":{\"161\":1}}],[\"迫使它不循环依赖就可以解决问题\",{\"1\":{\"160\":1}}],[\"延迟加载\",{\"1\":{\"160\":1}}],[\"延时任务的执行时间为订单的支付过期时间\",{\"1\":{\"134\":1}}],[\"根本没有三级缓存\",{\"1\":{\"159\":1}}],[\"根据配置情况调用\",{\"1\":{\"162\":1}}],[\"根据配置的商户信息\",{\"1\":{\"136\":1}}],[\"根据对象引用能定位到堆中的对象\",{\"1\":{\"155\":1}}],[\"根据bean的scope创建\",{\"1\":{\"153\":2}}],[\"根据bean的名字和class类型等来得到bean实例\",{\"1\":{\"151\":1}}],[\"根据bean生命周期方法找到两个核心方法\",{\"1\":{\"144\":1}}],[\"根据退款请求和三方退款接口响应结果\",{\"1\":{\"135\":1}}],[\"根据请求查询支付单信息和退款记录\",{\"1\":{\"135\":1}}],[\"根据实际情况调用\",{\"1\":{\"134\":1}}],[\"根据支付请求和三方支付接口响应结果\",{\"1\":{\"134\":1}}],[\"根据支付请求信息和商户信息\",{\"1\":{\"134\":1}}],[\"根据支付类型和交易类型\",{\"1\":{\"134\":1}}],[\"根据超时时间获取\",{\"1\":{\"114\":1}}],[\"根据任务创建\",{\"1\":{\"114\":1}}],[\"根据任务的过期时间\",{\"1\":{\"102\":1,\"103\":1}}],[\"作用域的\",{\"1\":{\"161\":3}}],[\"作用域的bean\",{\"1\":{\"158\":1}}],[\"作用域\",{\"1\":{\"161\":1}}],[\"作为前缀\",{\"1\":{\"134\":1}}],[\"作为国内节点\",{\"1\":{\"9\":1}}],[\"循环依赖难以解决\",{\"1\":{\"157\":1}}],[\"循环依赖等\",{\"0\":{\"149\":1},\"1\":{\"94\":1,\"149\":1,\"152\":1}}],[\"辅助我们进一步理解\",{\"1\":{\"156\":1}}],[\"彻底初始化以后将本身放入到一级缓存singletonobjects中\",{\"1\":{\"155\":1}}],[\"半成品\",{\"1\":{\"155\":1}}],[\"好比\",{\"1\":{\"155\":1}}],[\"好比a的构造器依赖了b对象因此得先去建立b对象\",{\"1\":{\"155\":1}}],[\"让你们使用\",{\"1\":{\"155\":1}}],[\"尚未进行初始化的第二步和第三步\",{\"1\":{\"155\":1}}],[\"虽然还不完美\",{\"1\":{\"155\":1}}],[\"虽然可以对两个\",{\"1\":{\"73\":1}}],[\"另外一处就是\",{\"1\":{\"155\":1}}],[\"咱们能够知道\",{\"1\":{\"155\":1}}],[\"得先去建立b对象\",{\"1\":{\"155\":1}}],[\"得到以下实现\",{\"1\":{\"63\":1}}],[\"补充一些方法和参数\",{\"1\":{\"155\":1}}],[\"第二类aware接口\",{\"1\":{\"162\":1}}],[\"第二层缓存\",{\"1\":{\"155\":1}}],[\"第一类aware接口\",{\"1\":{\"162\":1}}],[\"第一层缓存\",{\"1\":{\"155\":1}}],[\"第三层缓存\",{\"1\":{\"155\":1}}],[\"第三方支付平台通过http请求通知支付中心退款结果\",{\"1\":{\"136\":1}}],[\"第三方支付平台通过http请求通知支付中心支付结果\",{\"1\":{\"135\":1}}],[\"第三方支付平台退款成功后\",{\"1\":{\"136\":1}}],[\"第三方支付平台支付成功后\",{\"1\":{\"135\":1}}],[\"先来看下这三级缓存\",{\"1\":{\"155\":1}}],[\"真正创建\",{\"1\":{\"153\":1}}],[\"真正创建bean的方法\",{\"1\":{\"153\":1}}],[\"´\",{\"1\":{\"153\":1}}],[\"委派给父bean工厂获取\",{\"1\":{\"153\":2}}],[\"\\b以及spring如何实现将资源配置\",{\"1\":{\"150\":1}}],[\"几个要点\",{\"1\":{\"148\":1}}],[\"几十秒后\",{\"1\":{\"11\":1}}],[\"交给调用者\",{\"1\":{\"162\":1}}],[\"交给子类拓展\",{\"1\":{\"146\":1}}],[\"交易对账等\",{\"1\":{\"132\":1}}],[\"交易费用等经营数据自动汇总\",{\"1\":{\"99\":1}}],[\"依据条件创建代理\",{\"0\":{\"148\":1},\"1\":{\"143\":1}}],[\"依赖于特定的平台\",{\"1\":{\"73\":1}}],[\"依赖关系是在运行过程中起作用的\",{\"1\":{\"35\":1,\"89\":1}}],[\"依赖关系\",{\"0\":{\"35\":1,\"89\":1},\"1\":{\"24\":1,\"78\":1}}],[\"回调后服务器异常\",{\"1\":{\"137\":1}}],[\"回调通知\",{\"1\":{\"132\":1}}],[\"ⅱ\",{\"1\":{\"135\":1}}],[\"ⅰ\",{\"1\":{\"135\":1}}],[\"除退款失败外\",{\"1\":{\"135\":1}}],[\"防止重复请求退款\",{\"1\":{\"135\":1}}],[\"做幂等处理\",{\"1\":{\"135\":1}}],[\"落库记录退款订单信息\",{\"1\":{\"135\":2}}],[\"落库记录支付订单信息\",{\"1\":{\"134\":2}}],[\"否\",{\"1\":{\"135\":1}}],[\"否则\",{\"1\":{\"134\":1,\"135\":1}}],[\"否则可能会出现只显示文字而不显示看板娘图片的情况\",{\"1\":{\"6\":1}}],[\"消息队列\",{\"1\":{\"135\":1}}],[\"消费\",{\"1\":{\"122\":1,\"124\":1,\"125\":2,\"128\":1}}],[\"消费触发任务\",{\"1\":{\"121\":1,\"127\":1}}],[\"消费触发任务并保存到数据库中\",{\"1\":{\"119\":1}}],[\"消费持久化任务\",{\"1\":{\"121\":1,\"127\":1}}],[\"消费持久化任务并保存到数据库中\",{\"1\":{\"119\":1}}],[\"消费者和清除过期任务\",{\"1\":{\"124\":1}}],[\"消费者和触发器\",{\"1\":{\"112\":1,\"117\":1}}],[\"消费者消费任务\",{\"1\":{\"112\":1,\"117\":1}}],[\"消费者从\",{\"1\":{\"111\":1}}],[\"消费者\",{\"1\":{\"111\":1,\"114\":1}}],[\"消费到的任务会被保存到数据库中\",{\"1\":{\"108\":2}}],[\"消费任务\",{\"1\":{\"108\":2,\"110\":2,\"116\":1}}],[\"性能较高\",{\"1\":{\"135\":1}}],[\"性能较低\",{\"1\":{\"135\":1}}],[\"性能及适用场景\",{\"1\":{\"95\":1}}],[\"缺点\",{\"1\":{\"135\":1}}],[\"缺乏整体的方案设计\",{\"1\":{\"99\":1}}],[\"缺乏数据层面上及时\",{\"1\":{\"99\":1}}],[\"无参单例先从缓存中尝试获取\",{\"1\":{\"153\":1}}],[\"无参单例从缓存中获取\",{\"1\":{\"153\":1}}],[\"无需考虑安全效验等问题\",{\"1\":{\"135\":1}}],[\"无法满足各业务搭建\",{\"1\":{\"129\":1}}],[\"无法处理的错误\",{\"1\":{\"68\":1}}],[\"签名和金额\",{\"1\":{\"135\":1,\"136\":1}}],[\"校验退款记录\",{\"1\":{\"135\":1}}],[\"校验回调的支付订单\",{\"1\":{\"135\":1}}],[\"校验商户是否有权限进行当前支付操作\",{\"1\":{\"134\":1}}],[\"校验商户信息\",{\"1\":{\"134\":1,\"135\":1}}],[\"添加订单超时触发器\",{\"1\":{\"134\":1}}],[\"添加任务到检查点\",{\"1\":{\"109\":2,\"112\":2}}],[\"拼接订单号\",{\"1\":{\"134\":1}}],[\"位随机数拼接在一起\",{\"1\":{\"134\":1}}],[\"位随机数作为订单号计数部分\",{\"1\":{\"134\":1}}],[\"位数字\",{\"1\":{\"134\":1}}],[\"格式化订单号\",{\"1\":{\"134\":1}}],[\"格局要大一点\",{\"1\":{\"95\":1}}],[\"秒\",{\"1\":{\"134\":1}}],[\"键\",{\"1\":{\"134\":2}}],[\"组装成统一的退款请求与三方退款交互\",{\"1\":{\"135\":1}}],[\"组装成统一的退款请求与三方支付交互\",{\"1\":{\"135\":1}}],[\"组装成统一的支付请求与三方支付交互\",{\"1\":{\"134\":2}}],[\"组合中整体和部分是强依赖的\",{\"1\":{\"33\":1,\"87\":1}}],[\"组合关系\",{\"0\":{\"33\":1,\"87\":1},\"1\":{\"24\":1,\"78\":1}}],[\"权限校验\",{\"1\":{\"134\":2}}],[\"详细设计\",{\"0\":{\"133\":1}}],[\"详解支付系统\",{\"0\":{\"129\":1}}],[\"技术架构\",{\"1\":{\"132\":1}}],[\"监控等\",{\"1\":{\"132\":1}}],[\"差错处理\",{\"1\":{\"132\":1}}],[\"帮助商户更好地管理自己的业务\",{\"1\":{\"132\":1}}],[\"供其他业务订单系统调用\",{\"1\":{\"132\":1}}],[\"整体执行顺序和模块主要包含三部分\",{\"1\":{\"134\":1,\"135\":1}}],[\"整体支付流程的时序图可如下所示\",{\"1\":{\"131\":1}}],[\"整体不存在了部分也不存在了\",{\"1\":{\"33\":1,\"87\":1}}],[\"整体不存在了部分还是会存在\",{\"1\":{\"32\":1,\"86\":1}}],[\"微信支付等\",{\"1\":{\"131\":1}}],[\"发现b尚未被create\",{\"1\":{\"155\":1}}],[\"发现本身依赖对象b\",{\"1\":{\"155\":1}}],[\"发起支付\",{\"1\":{\"131\":1}}],[\"发送支付请求\",{\"1\":{\"134\":1}}],[\"发送任务到触发器\",{\"1\":{\"121\":1,\"127\":1}}],[\"发送任务到执行器\",{\"1\":{\"110\":1}}],[\"发送\",{\"1\":{\"116\":2}}],[\"发送成功\",{\"1\":{\"110\":1}}],[\"发送到执行器\",{\"1\":{\"112\":1,\"117\":1}}],[\"发送到不同topic的逻辑\",{\"0\":{\"107\":1}}],[\"发送到触发topic\",{\"1\":{\"105\":1}}],[\"发送到触发持久化topic\",{\"1\":{\"105\":1}}],[\"发送到持久化topic\",{\"1\":{\"105\":1}}],[\"商户表\",{\"0\":{\"139\":1}}],[\"商户在接收到支付中心发送的回调后只需要处理自身后续逻辑即可\",{\"1\":{\"135\":1}}],[\"商户状态和交易类型等信息\",{\"1\":{\"134\":1,\"135\":1}}],[\"商户系统通过提供统一\",{\"1\":{\"132\":1}}],[\"商户系统\",{\"1\":{\"132\":1}}],[\"商家服务端会根据订单信息生成支付信息\",{\"1\":{\"131\":1}}],[\"商品详情\",{\"1\":{\"131\":1}}],[\"商品销售涉及的电商平台不断增加\",{\"1\":{\"99\":1}}],[\"总价\",{\"1\":{\"131\":1}}],[\"极简支付流程\",{\"0\":{\"131\":1}}],[\"信息统一化管理\",{\"1\":{\"130\":1}}],[\"信息就会丢失\",{\"1\":{\"61\":1}}],[\"旨在最大程度减少其他服务对接第三方支付的开发量\",{\"1\":{\"130\":1}}],[\"满足企业不断增长的业务需求\",{\"1\":{\"129\":1}}],[\"满屏的烟花会庆祝你部署成功\",{\"1\":{\"11\":1}}],[\"方案\",{\"1\":{\"135\":1}}],[\"方便各业务之间的数据交互和整合\",{\"1\":{\"129\":1}}],[\"方法将\",{\"1\":{\"162\":1}}],[\"方法传入classloader的引用\",{\"1\":{\"162\":1}}],[\"方法传入当前工厂实例的引用\",{\"1\":{\"162\":1}}],[\"方法传入当前\",{\"1\":{\"162\":4}}],[\"方法获取\",{\"1\":{\"152\":2}}],[\"方法获取一个\",{\"1\":{\"26\":1,\"80\":1}}],[\"方法对键值进行自增\",{\"1\":{\"134\":1}}],[\"方法提交任务\",{\"1\":{\"103\":1}}],[\"方法调用与\",{\"1\":{\"67\":1}}],[\"方法读取和修改\",{\"1\":{\"67\":1}}],[\"方法中不能有\",{\"1\":{\"66\":1}}],[\"方法中使用父类\",{\"1\":{\"28\":1,\"82\":1}}],[\"方法签名相同\",{\"1\":{\"65\":1}}],[\"方法隐式地被指定为\",{\"1\":{\"65\":1}}],[\"方法来拷贝一个对象即复杂又有风险\",{\"1\":{\"63\":1}}],[\"方法来替换公有字段\",{\"1\":{\"54\":1}}],[\"方法并不是\",{\"1\":{\"63\":1}}],[\"方法结果不变\",{\"1\":{\"60\":1}}],[\"方法区逻辑上规范\",{\"1\":{\"47\":1}}],[\"方法区还是堆区\",{\"1\":{\"47\":1}}],[\"方法取得一个对象引用\",{\"1\":{\"47\":1}}],[\"方法的实现比较简单\",{\"1\":{\"42\":1}}],[\"方法时应当总是覆盖\",{\"1\":{\"61\":1}}],[\"方法时\",{\"1\":{\"28\":1,\"82\":1}}],[\"方法\",{\"1\":{\"28\":2,\"42\":1,\"47\":3,\"55\":2,\"60\":1,\"61\":2,\"63\":4,\"65\":1,\"82\":2,\"103\":8,\"109\":21,\"111\":11,\"112\":21,\"114\":16,\"119\":13,\"144\":1,\"162\":1}}],[\"方法使用\",{\"1\":{\"26\":1,\"80\":1}}],[\"高效\",{\"1\":{\"132\":1}}],[\"高效化和安全化\",{\"1\":{\"129\":1}}],[\"高效知识管理和进阶应用技巧\",{\"1\":{\"17\":1}}],[\"还是与外部三方支付机构或银行之间的资金流转的桥梁\",{\"1\":{\"129\":1}}],[\"还有很多变体\",{\"1\":{\"95\":1}}],[\"支付核心状态通过cas方式修改\",{\"1\":{\"135\":1}}],[\"支付核心等模块\",{\"1\":{\"132\":1}}],[\"支付回调设计\",{\"0\":{\"135\":1}}],[\"支付后置处理主要是根据当前支付请求和三方支付的接口响应\",{\"1\":{\"134\":1}}],[\"支付后置处理\",{\"1\":{\"134\":2}}],[\"支付模块设计\",{\"0\":{\"134\":1}}],[\"支付通道\",{\"1\":{\"132\":1}}],[\"支付系统\",{\"0\":{\"177\":1},\"1\":{\"132\":1},\"2\":{\"141\":1}}],[\"支付配置\",{\"1\":{\"132\":1}}],[\"支付结果回调\",{\"1\":{\"131\":1}}],[\"支付结果通知\",{\"1\":{\"131\":1}}],[\"支付方式\",{\"1\":{\"131\":2}}],[\"支付状态等\",{\"1\":{\"131\":1}}],[\"支付中心在收到三方支付回调后异步回调商户系统\",{\"1\":{\"135\":1}}],[\"支付中心在现代企业中扮演着至关重要的角色\",{\"1\":{\"129\":1}}],[\"支付中心接收到请求后\",{\"1\":{\"135\":1,\"136\":1}}],[\"支付中心系统只能对内部异常进行处理\",{\"1\":{\"137\":1}}],[\"支付中心系统支付回调具体步骤如下\",{\"1\":{\"135\":1}}],[\"支付中心系统的主要职责是处理业务系统发起的所有交易请求\",{\"1\":{\"132\":1}}],[\"支付中心系统的设计旨在实现对内统一支付和退款服务\",{\"1\":{\"129\":1}}],[\"支付中心唯一支付订单号的生成方法如下\",{\"1\":{\"134\":1}}],[\"支付中心从数据库中获取商户信息\",{\"1\":{\"134\":1,\"135\":1}}],[\"支付中心根据当前退款请求和三方接口响应\",{\"1\":{\"135\":1}}],[\"支付中心根据当前支付请求和三方接口响应\",{\"1\":{\"134\":1}}],[\"支付中心根据支付类型\",{\"1\":{\"135\":1}}],[\"支付中心根据支付类型选择对应的三方退款接口\",{\"1\":{\"135\":1}}],[\"支付中心根据支付类型和交易类型\",{\"1\":{\"134\":1}}],[\"支付中心根据支付类型和交易类型以及对应的三方支付接口\",{\"1\":{\"134\":1}}],[\"支付中心校验商户信息\",{\"1\":{\"134\":1,\"135\":1}}],[\"支付中心是一个支付聚合服务\",{\"1\":{\"130\":1}}],[\"支付中心需要对接各种三方支付机构或银行服务\",{\"1\":{\"129\":1}}],[\"支付中心为各业务线提供统一的支付和退款服务\",{\"1\":{\"129\":1}}],[\"支持全额退款和部分退款\",{\"1\":{\"135\":1}}],[\"支持业务与支付中心一次对接\",{\"1\":{\"129\":1}}],[\"支持多重继承\",{\"1\":{\"73\":1}}],[\"支持自动垃圾回收\",{\"1\":{\"73\":1}}],[\"支持\",{\"1\":{\"18\":1,\"21\":1}}],[\"支持随机对话\",{\"1\":{\"6\":1}}],[\"支持非整数和负数\",{\"1\":{\"5\":1}}],[\"及独立售卖的模式\",{\"1\":{\"129\":1}}],[\"耦合\",{\"1\":{\"129\":1}}],[\"原型时\",{\"1\":{\"153\":1}}],[\"原型\",{\"1\":{\"153\":1}}],[\"原有售卖模式采用的支付方式与独立\",{\"1\":{\"129\":1}}],[\"原则在新窗口打开\",{\"1\":{\"36\":1,\"90\":1}}],[\"原则\",{\"1\":{\"36\":1,\"90\":1}}],[\"售卖模式调整为以业务为导向\",{\"1\":{\"129\":1}}],[\"售后单时效\",{\"1\":{\"99\":1}}],[\"售后管理1期\",{\"1\":{\"99\":1}}],[\"售后管理\",{\"1\":{\"99\":1}}],[\"售后\",{\"1\":{\"99\":1}}],[\"​\",{\"1\":{\"129\":1,\"134\":4,\"135\":3,\"136\":1,\"137\":1}}],[\"能够精确地知道该\",{\"1\":{\"161\":1}}],[\"能帮忙看下是什么原因吗\",{\"1\":{\"128\":1}}],[\"能提升网站美观度和趣味性\",{\"1\":{\"6\":1}}],[\"今晚19点04分25秒的时候\",{\"1\":{\"128\":1}}],[\"填充和创建\",{\"1\":{\"124\":1}}],[\"填充分片\",{\"1\":{\"119\":1,\"121\":1,\"127\":1}}],[\"填充分片和创建或更新分片总数\",{\"1\":{\"119\":1}}],[\"管理分片的创建\",{\"1\":{\"128\":1}}],[\"管理分片\",{\"1\":{\"124\":1}}],[\"管理任务的生命周期\",{\"1\":{\"124\":1}}],[\"管理任务的计数和最大偏移量\",{\"1\":{\"109\":1,\"112\":1}}],[\"管理任务的提交和标记\",{\"1\":{\"109\":1,\"112\":1}}],[\"删除过期任务\",{\"1\":{\"121\":1,\"127\":1}}],[\"删除操作比较复杂\",{\"1\":{\"95\":1}}],[\"刷新分片\",{\"1\":{\"121\":1,\"127\":1}}],[\"刷新任务到消费者和清除过期任务\",{\"1\":{\"119\":1}}],[\"刷新所有分片\",{\"1\":{\"119\":1,\"120\":1,\"125\":1}}],[\"刷新网站应能正常显示\",{\"1\":{\"13\":1}}],[\"尝试三级缓存singletonfactories\",{\"1\":{\"155\":1}}],[\"尝试二级缓存earlysingletonobjects\",{\"1\":{\"155\":1}}],[\"尝试一级缓存singletonobjects\",{\"1\":{\"155\":1}}],[\"尝试执行任务\",{\"1\":{\"114\":1}}],[\"尝试标记任务为已处理\",{\"1\":{\"109\":1,\"112\":1}}],[\"响应\",{\"1\":{\"114\":1}}],[\"异步回调商户系统通知退款结果\",{\"1\":{\"136\":1}}],[\"异步执行任务\",{\"1\":{\"114\":1}}],[\"异常处理流程图如下\",{\"1\":{\"137\":1}}],[\"异常分为两种\",{\"1\":{\"137\":1}}],[\"异常通知\",{\"1\":{\"132\":1}}],[\"异常机制详解\",{\"1\":{\"68\":1}}],[\"异常\",{\"0\":{\"68\":1},\"1\":{\"39\":1}}],[\"负责任务的生命周期管理\",{\"1\":{\"119\":1}}],[\"负责任务的执行和管理\",{\"1\":{\"114\":1}}],[\"负责分片的管理\",{\"1\":{\"119\":1}}],[\"负责处理\",{\"1\":{\"114\":1}}],[\"负责与各渠道对接\",{\"1\":{\"99\":1}}],[\"执行任务\",{\"1\":{\"114\":2,\"115\":1,\"120\":1,\"121\":1,\"122\":1,\"124\":1,\"125\":1,\"127\":1,\"128\":1}}],[\"执行和管理\",{\"1\":{\"113\":1}}],[\"控制器\",{\"1\":{\"114\":1,\"119\":1}}],[\"地址列表\",{\"1\":{\"114\":1}}],[\"枚举\",{\"1\":{\"114\":1}}],[\"合并任务到桶中\",{\"1\":{\"109\":1,\"112\":1}}],[\"启动持久化任务和触发任务的消费线程\",{\"1\":{\"119\":1,\"128\":1}}],[\"启动\",{\"1\":{\"111\":2}}],[\"启动触发器\",{\"1\":{\"110\":1,\"111\":1}}],[\"启动消费者\",{\"1\":{\"110\":1}}],[\"启动检查点服务\",{\"1\":{\"109\":1,\"112\":2,\"117\":1}}],[\"启动检查点服务和触发器\",{\"1\":{\"109\":1,\"112\":1}}],[\"启动定时任务\",{\"1\":{\"109\":1,\"112\":1}}],[\"待执行\",{\"1\":{\"108\":1}}],[\"确定没有\",{\"1\":{\"155\":1}}],[\"确定一个链表我们只需要头指针\",{\"1\":{\"95\":1}}],[\"确认发送成功后从检查点服务中移除任务\",{\"1\":{\"112\":1,\"117\":1}}],[\"确认任务发送成功\",{\"1\":{\"111\":1}}],[\"确保它的依赖也被初始化\",{\"1\":{\"153\":1}}],[\"确保它的依赖也被初始化了\",{\"1\":{\"153\":1}}],[\"确保商户有权限进行当前支付操作\",{\"1\":{\"134\":1}}],[\"确保任务在指定时间点被正确触发和执行\",{\"1\":{\"128\":1}}],[\"确保任务的正确处理和提交\",{\"1\":{\"109\":1,\"110\":1,\"112\":1}}],[\"确保消息不会被重复消费\",{\"1\":{\"108\":2}}],[\"记录任务的详细信息和状态\",{\"1\":{\"108\":1}}],[\"触发任务\",{\"1\":{\"107\":1,\"110\":1}}],[\"任务生命周期管理和任务执行\",{\"1\":{\"128\":1}}],[\"任务生命周期管理\",{\"1\":{\"122\":1,\"125\":1}}],[\"任务生命周期管理以及与其他服务的通信\",{\"1\":{\"118\":1}}],[\"任务持久化\",{\"1\":{\"122\":1,\"125\":1}}],[\"任务的状态管理\",{\"1\":{\"118\":1}}],[\"任务的触发和执行\",{\"1\":{\"118\":1}}],[\"任务的分片管理\",{\"1\":{\"118\":1}}],[\"任务的消费和触发\",{\"1\":{\"111\":1}}],[\"任务执行\",{\"1\":{\"117\":1,\"122\":1,\"125\":1}}],[\"任务\",{\"1\":{\"114\":1}}],[\"任务重试机制\",{\"1\":{\"113\":1}}],[\"任务状态管理\",{\"1\":{\"113\":1}}],[\"任务被添加到时间轮中\",{\"1\":{\"112\":1,\"117\":1}}],[\"任务触发\",{\"1\":{\"111\":1,\"112\":1,\"117\":1}}],[\"任务消费\",{\"1\":{\"111\":1,\"112\":1,\"117\":1}}],[\"任务提交\",{\"1\":{\"111\":1,\"112\":1,\"117\":1}}],[\"任务保存成功后\",{\"1\":{\"108\":2}}],[\"任务会被发送到triggeredpersistenttask\",{\"1\":{\"107\":1}}],[\"任务会被发送到persistenttask\",{\"1\":{\"107\":1}}],[\"任何进阶都逃不开这些知识点\",{\"1\":{\"95\":1}}],[\"任何一种数组无法解决的问题就是插入\",{\"1\":{\"95\":1}}],[\"持久化任务\",{\"1\":{\"107\":1}}],[\"定义instantiationawarebeanpostprocessor的实现类\",{\"1\":{\"163\":1}}],[\"定义beanpostprocessor的实现类\",{\"1\":{\"163\":1}}],[\"定义beanfactorypostprocessor的实现类\",{\"1\":{\"163\":1}}],[\"定义bean\",{\"1\":{\"163\":1}}],[\"定义以下\",{\"1\":{\"155\":1}}],[\"定义了\",{\"1\":{\"103\":1}}],[\"定期刷新任务到触发器和消费者\",{\"1\":{\"122\":1,\"128\":1}}],[\"定期清除过期任务\",{\"1\":{\"119\":1,\"125\":1,\"128\":1}}],[\"定期将持久化任务发送到消费者\",{\"1\":{\"119\":1,\"125\":1}}],[\"定期将持久化任务发送到触发器\",{\"1\":{\"119\":1,\"125\":1}}],[\"定时拨动时间轮\",{\"1\":{\"112\":1,\"117\":1}}],[\"定位\",{\"1\":{\"99\":4}}],[\"主要有\",{\"1\":{\"160\":1}}],[\"主要看我加中文注释的方法即可\",{\"1\":{\"153\":1}}],[\"主要负责将advisor注入到合适的位置\",{\"1\":{\"144\":1}}],[\"主要负责与外部支付通道统一打通\",{\"1\":{\"132\":1}}],[\"主要是处理使用了\",{\"1\":{\"144\":1}}],[\"主要步骤如下\",{\"1\":{\"134\":1}}],[\"主要关注的是与商户相关的所有业务和功能\",{\"1\":{\"132\":1}}],[\"主要包括商户系统和支付系统\",{\"1\":{\"132\":1}}],[\"主要分为四个大模块\",{\"1\":{\"132\":1}}],[\"主要实现细节\",{\"0\":{\"128\":1}}],[\"主要实现了延时任务的持久化\",{\"1\":{\"118\":1}}],[\"主要实现了延时任务的消费\",{\"1\":{\"113\":1}}],[\"主要流程\",{\"0\":{\"125\":1}}],[\"主要流程总结\",{\"0\":{\"112\":1,\"117\":1,\"122\":1}}],[\"主要模块\",{\"0\":{\"124\":1}}],[\"主要类\",{\"0\":{\"103\":1}}],[\"主要功能\",{\"0\":{\"102\":1}}],[\"主题和插件\",{\"1\":{\"5\":1}}],[\"拉齐指标定义和口径\",{\"1\":{\"99\":1}}],[\"统一指标命名\",{\"1\":{\"99\":1}}],[\"统一渠道对接流程\",{\"1\":{\"99\":1}}],[\"建立数据指标词典\",{\"1\":{\"99\":1}}],[\"建议增加国内的访问节点\",{\"1\":{\"9\":1}}],[\"千川直播间数据表\",{\"1\":{\"99\":1}}],[\"千川消耗表\",{\"1\":{\"99\":1}}],[\"抖音佣金表\",{\"1\":{\"99\":1}}],[\"抖音退费表\",{\"1\":{\"99\":1}}],[\"抖店\",{\"1\":{\"99\":1}}],[\"获取所有切面类的切面方法生成advisor\",{\"1\":{\"146\":2}}],[\"获取所有advisor后\",{\"1\":{\"147\":1}}],[\"获取所有advisor\",{\"1\":{\"145\":1}}],[\"获取所有的advisor\",{\"0\":{\"146\":1},\"1\":{\"143\":1}}],[\"获取当前时间戳\",{\"1\":{\"134\":1}}],[\"获取分片任务和创建分片的接口\",{\"1\":{\"128\":1}}],[\"获取分片任务\",{\"1\":{\"121\":1,\"127\":1}}],[\"获取分片\",{\"1\":{\"119\":1}}],[\"获取指定分片的任务\",{\"1\":{\"119\":2,\"120\":1,\"125\":1}}],[\"获取\",{\"1\":{\"114\":1,\"115\":1,\"155\":3}}],[\"获取任务的过期时间\",{\"1\":{\"109\":1,\"112\":1}}],[\"获取api接口数据\",{\"1\":{\"99\":1}}],[\"获取数据难度大\",{\"1\":{\"99\":1}}],[\"固定周期的售后数据\",{\"1\":{\"99\":1}}],[\"输出结果\",{\"1\":{\"163\":1}}],[\"输出和分析\",{\"1\":{\"99\":1}}],[\"输入命令\",{\"1\":{\"17\":1}}],[\"输入一个你喜欢的\",{\"1\":{\"11\":1}}],[\"电商渠道管理平台\",{\"1\":{\"99\":1}}],[\"电商售后团队工作情况难以追踪\",{\"1\":{\"99\":1}}],[\"财务\",{\"1\":{\"99\":2}}],[\"财务对账等\",{\"1\":{\"99\":1}}],[\"操作失败\",{\"1\":{\"134\":1}}],[\"操作数据库中的任务实体\",{\"1\":{\"124\":1}}],[\"操作记录\",{\"1\":{\"99\":1}}],[\"操作系统等当中\",{\"1\":{\"95\":1}}],[\"流程管理与提醒\",{\"1\":{\"99\":1}}],[\"流程图\",{\"0\":{\"126\":1},\"1\":{\"99\":1}}],[\"店铺管理\",{\"1\":{\"99\":1}}],[\"店铺间切换带来的工作效率问题\",{\"1\":{\"99\":1}}],[\"订单号\",{\"1\":{\"134\":1}}],[\"订单号计数和\",{\"1\":{\"134\":1}}],[\"订单号等信息\",{\"1\":{\"131\":1}}],[\"订单号等\",{\"1\":{\"131\":1}}],[\"订单补偿\",{\"1\":{\"132\":1}}],[\"订单数据沉淀\",{\"1\":{\"99\":1}}],[\"订单数据标准化\",{\"1\":{\"99\":1}}],[\"订单同步\",{\"1\":{\"99\":1}}],[\"订单管理\",{\"1\":{\"99\":1}}],[\"订单管理系统\",{\"1\":{\"99\":1}}],[\"核心功能\",{\"1\":{\"99\":3}}],[\"走渠道网关\",{\"1\":{\"99\":1}}],[\"正逆向\",{\"1\":{\"99\":1}}],[\"正则表达式\",{\"1\":{\"95\":1}}],[\"标记这个beanname的实例正在创建\",{\"1\":{\"153\":1}}],[\"标记任务完成\",{\"1\":{\"104\":1,\"114\":2,\"115\":1,\"116\":1}}],[\"标记任务为完成状态\",{\"1\":{\"103\":1}}],[\"标识这个bean准备创建了\",{\"1\":{\"153\":1}}],[\"标准化订单信息同步\",{\"1\":{\"99\":1}}],[\"标准化渠道接入接口\",{\"1\":{\"99\":1}}],[\"标准化数据交互\",{\"1\":{\"99\":1}}],[\"标签\",{\"1\":{\"2\":1}}],[\"架构设计\",{\"1\":{\"99\":1}}],[\"牵一发而动全身\",{\"1\":{\"99\":1}}],[\"沉淀中台服务能力\",{\"1\":{\"99\":1}}],[\"增强业务监控与决策支持\",{\"1\":{\"99\":1}}],[\"增加了工作负担\",{\"1\":{\"99\":1}}],[\"直至回调成功\",{\"1\":{\"135\":1,\"136\":1}}],[\"直播数据获取\",{\"1\":{\"99\":1}}],[\"直播数据化业务管理\",{\"1\":{\"99\":1}}],[\"直接返回\",{\"1\":{\"60\":1}}],[\"直接访问\",{\"1\":{\"54\":1}}],[\"直接赋值给\",{\"1\":{\"50\":1}}],[\"降低数据获取成本\",{\"1\":{\"99\":1}}],[\"降低运营成本\",{\"1\":{\"99\":1,\"132\":1}}],[\"降低成本\",{\"1\":{\"99\":1}}],[\"降低了构建大型系统的风险\",{\"1\":{\"26\":1,\"80\":1}}],[\"收益\",{\"1\":{\"99\":2}}],[\"导致系统耦合严重\",{\"1\":{\"99\":1}}],[\"导航栏\",{\"1\":{\"5\":1}}],[\"面向需求开发的方式\",{\"1\":{\"99\":1}}],[\"面向对象编程\",{\"1\":{\"36\":1,\"90\":1}}],[\"面向对象编程三大特性\",{\"1\":{\"36\":1,\"90\":1}}],[\"面向对象设计的\",{\"1\":{\"36\":1,\"90\":1}}],[\"面向对象基础和相关类图\",{\"1\":{\"24\":1,\"78\":1}}],[\"面向对象\",{\"0\":{\"24\":1,\"78\":1},\"1\":{\"24\":1,\"78\":1}}],[\"处理任务执行后的逻辑\",{\"1\":{\"114\":1,\"117\":1}}],[\"处理检查点的添加和移除操作\",{\"1\":{\"109\":1,\"112\":1}}],[\"处理统一处理\",{\"1\":{\"99\":1}}],[\"处理\",{\"1\":{\"99\":1,\"114\":1}}],[\"处理电商问题需要在9个电商后台的50+个店铺间切换\",{\"1\":{\"99\":1}}],[\"单例工厂的缓存\",{\"1\":{\"155\":1}}],[\"单例对象缓存池\",{\"1\":{\"155\":2}}],[\"单例时\",{\"1\":{\"153\":1}}],[\"单例\",{\"1\":{\"153\":1}}],[\"单处理\",{\"1\":{\"99\":2}}],[\"单词查找树或键树\",{\"1\":{\"95\":1}}],[\"换货等\",{\"1\":{\"99\":2}}],[\"退款成功后\",{\"1\":{\"137\":1}}],[\"退款回调的和支付回调类似\",{\"1\":{\"136\":1}}],[\"退款回调设计\",{\"0\":{\"136\":1}}],[\"退款记录表中的状态流转如图\",{\"1\":{\"135\":1}}],[\"退款请求入参校验\",{\"1\":{\"135\":1}}],[\"退款请求校验\",{\"1\":{\"135\":2}}],[\"退款后置处理主要是根据当前退款请求和三方退款的接口响应\",{\"1\":{\"135\":1}}],[\"退款后置处理\",{\"1\":{\"135\":2}}],[\"退款金额等\",{\"1\":{\"135\":1}}],[\"退款功能依赖于支付功能\",{\"1\":{\"135\":1}}],[\"退款流程依赖于支付功能\",{\"1\":{\"135\":1}}],[\"退款模块主要负责处理商户发起的退款请求\",{\"1\":{\"135\":1}}],[\"退款\",{\"1\":{\"99\":2,\"132\":1}}],[\"退\",{\"1\":{\"99\":2}}],[\"物流同步\",{\"1\":{\"99\":1}}],[\"物流\",{\"1\":{\"99\":1}}],[\"物流发货同步\",{\"1\":{\"99\":1}}],[\"物流发货\",{\"1\":{\"99\":1}}],[\"物流单回传\",{\"1\":{\"99\":1}}],[\"硬件同步等\",{\"1\":{\"99\":1}}],[\"硬件\",{\"1\":{\"99\":1}}],[\"仓储分销管理等\",{\"1\":{\"99\":1}}],[\"仓库名为你之前输入的项目名\",{\"1\":{\"11\":1}}],[\"仓库名\",{\"1\":{\"11\":1}}],[\"现有的系统设计文档\",{\"1\":{\"99\":1}}],[\"现有系统中商户信息通过配置文件进行配置\",{\"1\":{\"99\":1}}],[\"现在的渠道系统\",{\"1\":{\"99\":1}}],[\"渠道网关\",{\"1\":{\"99\":1}}],[\"渠道网关只负责与外部电商渠道进行对接\",{\"1\":{\"99\":1}}],[\"渠道服务变得越来越庞大\",{\"1\":{\"99\":1}}],[\"渠道接入与订单下游业务紧密耦合\",{\"1\":{\"99\":2}}],[\"随着业务的快速发展与变化\",{\"1\":{\"129\":1}}],[\"随着业务需求的增多\",{\"1\":{\"99\":1}}],[\"随着公司业务的发展\",{\"1\":{\"99\":1}}],[\"口径统一不规范\",{\"1\":{\"99\":1}}],[\"口径多\",{\"1\":{\"99\":1}}],[\"且只能内部使用\",{\"1\":{\"135\":1}}],[\"且支付方式仅支持一个appid\",{\"1\":{\"129\":1}}],[\"且数据出口多\",{\"1\":{\"99\":1}}],[\"且业务数据流转关系相对不清晰\",{\"1\":{\"99\":1}}],[\"难以及时聚焦\",{\"1\":{\"99\":1}}],[\"难以管理和分享\",{\"1\":{\"1\":1}}],[\"业务系统调用支付中心退款接口之后\",{\"1\":{\"135\":1}}],[\"业务系统调用支付中心之后\",{\"1\":{\"134\":1}}],[\"业务系统服务模块化\",{\"1\":{\"99\":1}}],[\"业务商户系统需要在支付系统填写商户信息以便后续支付\",{\"1\":{\"134\":1}}],[\"业务商户系统在支付时通过统一接口请求支付\",{\"1\":{\"134\":1}}],[\"业务中台\",{\"1\":{\"132\":1}}],[\"业务架构\",{\"0\":{\"130\":1}}],[\"业务模式由原有的独立\",{\"1\":{\"129\":1}}],[\"业务退款同步\",{\"1\":{\"99\":1}}],[\"业务收益\",{\"1\":{\"99\":1}}],[\"业务逻辑和三方交互代码夹杂在一起\",{\"1\":{\"99\":1}}],[\"业务布局涉及多个平台系统\",{\"1\":{\"99\":1}}],[\"业务现状\",{\"1\":{\"99\":1}}],[\"团队管理受到限制\",{\"1\":{\"99\":1}}],[\"影响用户问题处理时效\",{\"1\":{\"99\":1}}],[\"客户端会展示支付失败页面\",{\"1\":{\"131\":1}}],[\"客户端会展示支付成功页面\",{\"1\":{\"131\":1}}],[\"客户端根据支付信息生成支付页面\",{\"1\":{\"131\":1}}],[\"客户端向\",{\"1\":{\"111\":1}}],[\"客户端\",{\"1\":{\"105\":4,\"110\":2,\"116\":3,\"121\":4,\"126\":1,\"127\":4}}],[\"客户端提交任务\",{\"1\":{\"102\":1,\"112\":1,\"117\":1}}],[\"客户端可以对其随意修改\",{\"1\":{\"54\":1}}],[\"客户问题工单\",{\"1\":{\"99\":2}}],[\"客服团队在处理问题后还需填写线下表格\",{\"1\":{\"99\":1}}],[\"盲巡方式导致工作效率低下\",{\"1\":{\"99\":1}}],[\"工厂后处理器也是容器级的\",{\"1\":{\"162\":1}}],[\"工厂后处理器接口方法\",{\"1\":{\"162\":1}}],[\"工作效率问题\",{\"1\":{\"99\":1}}],[\"工具\",{\"2\":{\"22\":1}}],[\"精细到商品规格维度的数据统计和分析\",{\"1\":{\"99\":1}}],[\"精细化运营分析依赖人工统计\",{\"1\":{\"99\":1}}],[\"精品课\",{\"1\":{\"99\":2}}],[\"精简化知识点的初衷并不相符\",{\"1\":{\"7\":1}}],[\"各自建设业务系统模式\",{\"1\":{\"129\":1}}],[\"各业务百花齐放\",{\"1\":{\"129\":1}}],[\"各平台多店铺销售\",{\"1\":{\"99\":1}}],[\"各渠道售后\",{\"1\":{\"99\":1}}],[\"各渠道电商模式不尽相同\",{\"1\":{\"99\":1}}],[\"各方均需要反复确认及核对业务数据\",{\"1\":{\"99\":1}}],[\"各个模块互相隔离\",{\"1\":{\"99\":1}}],[\"各个渠道功能和模块\",{\"1\":{\"99\":1}}],[\"各个系统中存放了各自割裂的数据\",{\"1\":{\"99\":1}}],[\"各个店铺的运营数据散布在各个电商平台上\",{\"1\":{\"99\":1}}],[\"各版本的新特性\",{\"0\":{\"72\":1},\"1\":{\"39\":1}}],[\"周期性地在各个店铺直播间轮训\",{\"1\":{\"99\":1}}],[\"人工灌单\",{\"1\":{\"99\":1}}],[\"人工巡店\",{\"1\":{\"99\":1}}],[\"人与人之间的社交与关系网络\",{\"1\":{\"95\":1}}],[\"低效的店铺管理方式\",{\"1\":{\"99\":1}}],[\"结合上图\",{\"1\":{\"162\":1}}],[\"结构之法\",{\"1\":{\"97\":1}}],[\"结果都为\",{\"1\":{\"60\":1}}],[\"亦海\",{\"1\":{\"96\":1}}],[\"亦海数据结构的文章\",{\"1\":{\"96\":1}}],[\"写的很清晰\",{\"1\":{\"96\":1}}],[\"question\",{\"1\":{\"165\":1}}],[\"queue\",{\"1\":{\"110\":1}}],[\"qualified\",{\"1\":{\"67\":1}}],[\"qg\",{\"1\":{\"96\":2}}],[\"推进时间轮到当前时间点\",{\"1\":{\"111\":1}}],[\"推进时间轮到指定时间点\",{\"1\":{\"109\":1,\"112\":1}}],[\"推动精细化运营\",{\"1\":{\"99\":1}}],[\"推荐\",{\"1\":{\"96\":3}}],[\"推荐github上java算法集合\",{\"1\":{\"96\":1}}],[\"推荐一个学习数据结构的英文网站\",{\"1\":{\"96\":1}}],[\"推送到\",{\"1\":{\"9\":1}}],[\"强烈推荐用动画学习算法\",{\"1\":{\"96\":1}}],[\"问题\",{\"1\":{\"95\":1}}],[\"路由选择等\",{\"1\":{\"95\":1}}],[\"路径\",{\"1\":{\"13\":1}}],[\"路径下\",{\"1\":{\"8\":2}}],[\"路径下的\",{\"1\":{\"6\":1}}],[\"路径下是网站的配置文件\",{\"1\":{\"5\":1}}],[\"公交查询系统\",{\"1\":{\"95\":1}}],[\"公司没了部门就不存在了\",{\"1\":{\"33\":1,\"87\":1}}],[\"横向优先搜索\",{\"1\":{\"95\":1}}],[\"宽度优先搜索\",{\"1\":{\"95\":1}}],[\"广度优先搜索算法\",{\"1\":{\"95\":1}}],[\"遍历\",{\"1\":{\"95\":1}}],[\"化学上用图区分结构不同但分子式相同的同分异构体\",{\"1\":{\"95\":1}}],[\"拓扑排序主要用来解决有向图中的依赖解析\",{\"1\":{\"95\":1}}],[\"拓扑排序\",{\"1\":{\"95\":2}}],[\"图的深度优先搜索\",{\"1\":{\"95\":1}}],[\"图的遍历\",{\"1\":{\"95\":1}}],[\"图是最灵活的数据结构之一\",{\"1\":{\"95\":1}}],[\"图基础\",{\"1\":{\"95\":1}}],[\"图\",{\"1\":{\"95\":8}}],[\"图片链接\",{\"1\":{\"8\":1}}],[\"查询退款记录\",{\"1\":{\"135\":1}}],[\"查询该订单的已退金额\",{\"1\":{\"135\":1}}],[\"查询支付订单\",{\"1\":{\"135\":1}}],[\"查询是否已退款\",{\"1\":{\"135\":1}}],[\"查询过期任务\",{\"1\":{\"121\":1,\"127\":1}}],[\"查询需要执行的任务\",{\"1\":{\"121\":1,\"127\":1}}],[\"查询需要触发的任务\",{\"1\":{\"121\":1,\"127\":1}}],[\"查询效率比哈希树高\",{\"1\":{\"95\":1}}],[\"查看运营数据\",{\"1\":{\"99\":1}}],[\"查看平台店铺是否有客服问题需要处理\",{\"1\":{\"99\":1}}],[\"查找就退化成节点内部的线性查找了\",{\"1\":{\"95\":1}}],[\"利用依赖注入完成\",{\"1\":{\"162\":1}}],[\"利用数据抓取技术补充数据等\",{\"1\":{\"99\":1}}],[\"利用字符串的公共前缀来减少查询时间\",{\"1\":{\"95\":1}}],[\"利用抽象数据类型将数据和基于数据的操作封装在一起\",{\"1\":{\"26\":1,\"80\":1}}],[\"排序和保存大量的字符串\",{\"1\":{\"95\":1}}],[\"典型应用是用于统计\",{\"1\":{\"95\":1}}],[\"典型的用途是实现关联数组\",{\"1\":{\"95\":1}}],[\"伸展树等\",{\"1\":{\"95\":1}}],[\"替罪羊树\",{\"1\":{\"95\":1}}],[\"替换为你的博客域名\",{\"1\":{\"7\":1}}],[\"右子树也分别为二叉排序树\",{\"1\":{\"95\":1}}],[\"又称为\",{\"1\":{\"95\":1}}],[\"又称为类变量\",{\"1\":{\"66\":1}}],[\"又称字典树\",{\"1\":{\"95\":1}}],[\"又\",{\"1\":{\"95\":1}}],[\"前提\",{\"1\":{\"95\":1}}],[\"前缀树\",{\"1\":{\"95\":2}}],[\"前文主要spring\",{\"1\":{\"144\":1}}],[\"前文我们有了ioc的源码基础以及springmvc的基础\",{\"1\":{\"94\":2}}],[\"前文我们介绍了spring框架和spring框架中最为重要的两个技术点\",{\"1\":{\"94\":1}}],[\"前文\",{\"1\":{\"94\":1}}],[\"哈夫曼又称最优二叉树\",{\"1\":{\"95\":1}}],[\"哈夫曼树\",{\"1\":{\"95\":2}}],[\"哈希表\",{\"1\":{\"95\":1}}],[\"哈希表是数组和链表的折中\",{\"1\":{\"95\":1}}],[\"红黑树\",{\"1\":{\"95\":3}}],[\"红黑树是平衡二叉树和avl树的折中\",{\"1\":{\"95\":1}}],[\"平衡二叉树的常用实现方法有红黑树\",{\"1\":{\"95\":1}}],[\"平衡二叉树\",{\"1\":{\"95\":3}}],[\"逻辑结构\",{\"1\":{\"95\":2}}],[\"栈和队列都是线性存储结构的应用\",{\"1\":{\"95\":1}}],[\"栈和队列\",{\"1\":{\"95\":1}}],[\"栈和队列等\",{\"1\":{\"95\":1}}],[\"散列表\",{\"1\":{\"95\":1}}],[\"散列\",{\"1\":{\"95\":1}}],[\"尾节点没有后续节点\",{\"1\":{\"95\":1}}],[\"首推\",{\"1\":{\"97\":1}}],[\"首节点没有前驱节点\",{\"1\":{\"95\":1}}],[\"首先我们需要说明\",{\"1\":{\"154\":1}}],[\"首先理解数据结构中线性结构及其延伸\",{\"1\":{\"95\":1}}],[\"首先把\",{\"1\":{\"47\":1}}],[\"首先\",{\"1\":{\"3\":1,\"94\":1}}],[\"彼此通过指针相连\",{\"1\":{\"95\":1}}],[\"大小相等\",{\"1\":{\"95\":1}}],[\"大部分情况下\",{\"1\":{\"3\":1}}],[\"元素类型相同\",{\"1\":{\"95\":1}}],[\"链表\",{\"1\":{\"95\":2}}],[\"链表也不适合查找\",{\"1\":{\"95\":1}}],[\"线性表\",{\"1\":{\"95\":4}}],[\"线性结构\",{\"1\":{\"95\":1}}],[\"线程安全\",{\"1\":{\"45\":1,\"46\":1}}],[\"都与这有关\",{\"1\":{\"95\":1}}],[\"什么模式匹配\",{\"1\":{\"95\":1}}],[\"很多问题都可以使用图模型进行建模求解\",{\"1\":{\"95\":1}}],[\"很多字符串处理任务都会用到\",{\"1\":{\"95\":1}}],[\"很多人选择使用\",{\"1\":{\"9\":1}}],[\"矩形和多边形这类多维数据建立索引\",{\"1\":{\"95\":1}}],[\"树在数据结构中至关重要\",{\"1\":{\"95\":1}}],[\"树\",{\"1\":{\"95\":7}}],[\"树是b+树的变体\",{\"1\":{\"95\":1}}],[\"树节点存储的元素数量是有限的\",{\"1\":{\"95\":1}}],[\"集合框架\",{\"0\":{\"170\":1}}],[\"集合类中的map\",{\"1\":{\"95\":1}}],[\"集中化的数据视角有利于对业务进行全面监控\",{\"1\":{\"99\":1}}],[\"集成性和数据一致性\",{\"1\":{\"99\":1}}],[\"集成了看板娘\",{\"1\":{\"6\":1}}],[\"普通链表由于它的结构特点被证明根本不适合进行查找\",{\"1\":{\"95\":1}}],[\"普通语句块\",{\"1\":{\"66\":3}}],[\"故数组的长度也是有限的\",{\"1\":{\"95\":1}}],[\"十分常用\",{\"1\":{\"95\":1}}],[\"避免\",{\"1\":{\"99\":1}}],[\"避免数据冗余和信息孤岛\",{\"1\":{\"99\":1}}],[\"避免孤立的学习知识点\",{\"1\":{\"95\":1}}],[\"避免因权限不足导致部署失败\",{\"1\":{\"3\":1}}],[\"学习思路\",{\"1\":{\"95\":1}}],[\"入门推荐\",{\"0\":{\"96\":1},\"1\":{\"95\":1}}],[\"要关联学习\",{\"1\":{\"95\":1}}],[\"要了解算法思想\",{\"1\":{\"95\":1}}],[\"要解决这个问题\",{\"1\":{\"15\":1}}],[\"♥数据结构基础知识体系详解♥\",{\"0\":{\"95\":1}}],[\"♥spring框架知识体系详解♥\",{\"0\":{\"93\":1}}],[\"代理的创建\",{\"0\":{\"145\":1},\"1\":{\"143\":1}}],[\"代理\",{\"1\":{\"94\":1,\"143\":1}}],[\"代码分析\",{\"0\":{\"114\":1,\"119\":1}}],[\"代码耦合度过高\",{\"1\":{\"99\":1}}],[\"代码块\",{\"1\":{\"7\":1}}],[\"代码编程\",{\"1\":{\"2\":1}}],[\"容器级生命周期接口方法\",{\"1\":{\"162\":1}}],[\"容器中\",{\"1\":{\"162\":1}}],[\"容器中存放的是bean的定义即beandefinition放到beandefinitionmap中\",{\"1\":{\"94\":1,\"149\":1,\"150\":1}}],[\"容器都会创建一个新的实例\",{\"1\":{\"161\":1}}],[\"容器将不再跟踪其生命周期\",{\"1\":{\"161\":1}}],[\"容器可以管理\",{\"1\":{\"161\":1}}],[\"容器为主\",{\"1\":{\"2\":1}}],[\"生成代理对象产生的循环依赖\",{\"1\":{\"160\":1}}],[\"生成签名\",{\"1\":{\"134\":1}}],[\"生成最终的支付单号\",{\"1\":{\"134\":1}}],[\"生成\",{\"1\":{\"134\":2}}],[\"生成接口交互签名\",{\"1\":{\"134\":2,\"135\":2}}],[\"生成支付中心订单号\",{\"1\":{\"134\":1}}],[\"生成支付中心全局唯一支付单号\",{\"1\":{\"134\":1}}],[\"生成支付订单记录\",{\"1\":{\"134\":1}}],[\"生成支付信息\",{\"1\":{\"131\":1}}],[\"生成预支付订单的主要步骤\",{\"1\":{\"134\":1}}],[\"生成预支付订单\",{\"1\":{\"134\":1}}],[\"生成订单记录\",{\"1\":{\"131\":1}}],[\"生成并返回一个新的uuid\",{\"1\":{\"103\":1}}],[\"生成uuid\",{\"1\":{\"103\":1,\"104\":1}}],[\"生成beandefination并注册到ioc容器中的\",{\"1\":{\"94\":2,\"149\":1,\"150\":1}}],[\"生态环境中不同物种的相互竞争\",{\"1\":{\"95\":1}}],[\"生命周期的意义就在于\",{\"1\":{\"161\":1}}],[\"生命周期\",{\"0\":{\"149\":1},\"1\":{\"94\":1,\"149\":1}}],[\"生活记录和小技巧\",{\"1\":{\"2\":1}}],[\"生活角落\",{\"1\":{\"2\":1}}],[\"解决并发情况下数据一致性问题\",{\"1\":{\"135\":1}}],[\"解决周期性报表重复输出的问题\",{\"1\":{\"99\":1}}],[\"解决需要在多个电商平台\",{\"1\":{\"99\":1}}],[\"解决步骤如下\",{\"1\":{\"13\":1}}],[\"解析bean的真正name\",{\"1\":{\"153\":2}}],[\"解析\",{\"1\":{\"94\":2,\"149\":1,\"150\":1}}],[\"紧接着这篇\",{\"1\":{\"94\":1}}],[\"目标\",{\"1\":{\"99\":2}}],[\"目前渠道接入系统与订单下游业务紧密耦合\",{\"1\":{\"99\":1}}],[\"目前已在9大电商平台上共运营38个店铺\",{\"1\":{\"99\":1}}],[\"目的是为了简化java栈的web开发\",{\"1\":{\"94\":1}}],[\"目录下\",{\"1\":{\"7\":1}}],[\"目录结构如下\",{\"1\":{\"5\":1}}],[\"遵循上述web\",{\"1\":{\"94\":1}}],[\"那说明不要进行增强\",{\"1\":{\"145\":1}}],[\"那我们如何更好的构建上层的应用呢\",{\"1\":{\"94\":1}}],[\"那么实际开发中\",{\"1\":{\"160\":1}}],[\"那么其它循环依赖如何解决\",{\"0\":{\"160\":1},\"1\":{\"149\":1}}],[\"那么动态代理是如何工作的呢\",{\"1\":{\"94\":1}}],[\"那么如何从beandefinition中实例化bean对象呢\",{\"1\":{\"94\":1,\"149\":1,\"150\":1}}],[\"那么这些spring\",{\"1\":{\"94\":1}}],[\"那么这两个指针此时指向的是完全不同的对象\",{\"1\":{\"49\":1}}],[\"那么要修改所有实现了该接口的类\",{\"1\":{\"55\":1}}],[\"那么直接暴露成员不会有特别大的影响\",{\"1\":{\"54\":1}}],[\"那么就必须满足里式替换原则\",{\"1\":{\"55\":1}}],[\"那么就需要去修改所有的客户端代码\",{\"1\":{\"54\":1}}],[\"那么就会从\",{\"1\":{\"45\":1}}],[\"那么就会引用相同的对象\",{\"1\":{\"42\":1}}],[\"那么子类中该方法的访问级别不允许低于父类的访问级别\",{\"1\":{\"54\":1}}],[\"那么还是用\",{\"1\":{\"52\":1}}],[\"那么在网络连接过程中\",{\"1\":{\"45\":1}}],[\"那么\",{\"1\":{\"3\":1,\"13\":1}}],[\"向你展示spring\",{\"1\":{\"94\":1}}],[\"向上转型\",{\"1\":{\"27\":1,\"28\":1,\"81\":1,\"82\":1}}],[\"机械工业出版社\",{\"1\":{\"75\":1}}],[\"具有以下性质\",{\"1\":{\"95\":1}}],[\"具有和\",{\"1\":{\"73\":1}}],[\"具体如下\",{\"1\":{\"144\":1}}],[\"具体步骤如下\",{\"1\":{\"136\":1}}],[\"具体流程如图所示\",{\"1\":{\"135\":1}}],[\"具体的消费逻辑\",{\"1\":{\"109\":1,\"112\":1}}],[\"具体实现了任务分发逻辑\",{\"1\":{\"103\":1}}],[\"具体看如下表格\",{\"1\":{\"47\":1}}],[\"具体方法可以参考页面底部的常见问题\",{\"1\":{\"3\":1}}],[\"没有集中的数据视角\",{\"1\":{\"99\":1}}],[\"没有指针\",{\"1\":{\"73\":1}}],[\"没有实现\",{\"1\":{\"61\":1,\"63\":1}}],[\"所有关键字都在叶子结点\",{\"1\":{\"95\":1}}],[\"所有的对象都继承自\",{\"1\":{\"73\":1}}],[\"所以我们来看下spring是如何是如何实现的\",{\"1\":{\"152\":1}}],[\"所以经常被搜索引擎系统用于文本词频统计\",{\"1\":{\"95\":1}}],[\"所以也不适合大规模的查找\",{\"1\":{\"95\":1}}],[\"所以静态方法必须有实现\",{\"1\":{\"66\":1}}],[\"所以从这个角度\",{\"1\":{\"47\":1}}],[\"仅仅起到辅助性的作用\",{\"1\":{\"70\":1}}],[\"起到说明\",{\"1\":{\"70\":1}}],[\"语句捕获并进行处理\",{\"1\":{\"68\":1}}],[\"语言\",{\"1\":{\"18\":1,\"21\":1}}],[\"受检异常\",{\"1\":{\"68\":1}}],[\"分析getsingleton\",{\"1\":{\"155\":1}}],[\"分析计算机网络的拓扑结构确定两台计算机是否可以通信\",{\"1\":{\"95\":1}}],[\"分片管理\",{\"1\":{\"118\":1,\"122\":1,\"125\":1,\"128\":1}}],[\"分为两种\",{\"1\":{\"68\":2}}],[\"分支\",{\"1\":{\"3\":1}}],[\"分支设置为\",{\"1\":{\"3\":1}}],[\"相关文章\",{\"0\":{\"94\":1},\"1\":{\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"95\":1}}],[\"相乘可以转换成移位和减法\",{\"1\":{\"61\":1}}],[\"相乘相当于向左移一位\",{\"1\":{\"61\":1}}],[\"甚至在编译时期该类的\",{\"1\":{\"67\":1}}],[\"当然也包括initializingbean和diposablebean这些接口的方法\",{\"1\":{\"162\":1}}],[\"当容器创建了\",{\"1\":{\"161\":1}}],[\"当设置proxy\",{\"1\":{\"148\":1}}],[\"当前时间戳\",{\"1\":{\"134\":1}}],[\"当前采用\",{\"1\":{\"99\":1}}],[\"当持久化任务的执行时间到达时\",{\"1\":{\"107\":1}}],[\"当有新的任务需要持久化时\",{\"1\":{\"107\":1}}],[\"当编译一个新类时\",{\"1\":{\"67\":1}}],[\"当出现乘法溢出\",{\"1\":{\"61\":1}}],[\"父类\",{\"1\":{\"66\":3}}],[\"父类引用指向子类对象称为\",{\"1\":{\"27\":1,\"81\":1}}],[\"构造方法实例化\",{\"1\":{\"162\":1}}],[\"构造器循环依赖\",{\"1\":{\"160\":1}}],[\"构造器注入形成的循环依赖\",{\"1\":{\"157\":1}}],[\"构造函数从beandefinition的getconstructorargumentvalues\",{\"1\":{\"152\":1}}],[\"构造函数\",{\"1\":{\"66\":3}}],[\"构建了\",{\"1\":{\"1\":1}}],[\"初步的思考\",{\"0\":{\"152\":1},\"1\":{\"149\":1}}],[\"初步解决方案\",{\"1\":{\"99\":1}}],[\"初始化它依赖的bean\",{\"1\":{\"153\":1}}],[\"初始化分片配置\",{\"1\":{\"119\":1}}],[\"初始化服务\",{\"1\":{\"109\":1,\"111\":1,\"112\":2,\"117\":1}}],[\"初始化顺序为\",{\"1\":{\"66\":1}}],[\"初始化顺序\",{\"1\":{\"66\":1}}],[\"初衷\",{\"0\":{\"1\":1}}],[\"声明类不允许被继承\",{\"1\":{\"65\":1}}],[\"声明方法不能被子类重写\",{\"1\":{\"65\":1}}],[\"声明数据为常量\",{\"1\":{\"65\":1}}],[\"最终a也完成了初始化\",{\"1\":{\"155\":1}}],[\"最终的将bean的定义即beandefinition放到beandefinitionmap中\",{\"1\":{\"152\":1}}],[\"最终导致集合添加了两个等价的对象\",{\"1\":{\"61\":1}}],[\"最短路径有着广泛的应用\",{\"1\":{\"95\":1}}],[\"最短路径\",{\"1\":{\"95\":2}}],[\"最小生成树\",{\"1\":{\"95\":2}}],[\"最小二叉平衡树的节点的公式如下\",{\"1\":{\"95\":1}}],[\"最后理解数据结构中逻辑结构之图\",{\"1\":{\"95\":1}}],[\"最后才是构造函数的初始化\",{\"1\":{\"66\":1}}],[\"最大限度地减少无谓的字符串比较\",{\"1\":{\"95\":1}}],[\"最好不要去使用\",{\"1\":{\"63\":1}}],[\"书上讲到\",{\"1\":{\"63\":1}}],[\"拷贝对象和原始对象的引用类型引用不同对象\",{\"1\":{\"63\":1}}],[\"拷贝对象和原始对象的引用类型引用同一个对象\",{\"1\":{\"63\":1}}],[\"深拷贝\",{\"1\":{\"63\":1}}],[\"深入理解\",{\"1\":{\"55\":1}}],[\"浅拷贝\",{\"1\":{\"63\":1}}],[\"理想的散列函数应当具有均匀性\",{\"1\":{\"61\":1}}],[\"理解和修改\",{\"1\":{\"26\":1,\"80\":1}}],[\"新建了两个等价的对象\",{\"1\":{\"61\":1}}],[\"保证消息一定能被消费\",{\"1\":{\"135\":1}}],[\"保证等价的两个对象散列值也相等\",{\"1\":{\"61\":1}}],[\"保存任务到数据库\",{\"1\":{\"121\":2,\"127\":2}}],[\"保存到数据库\",{\"1\":{\"108\":2}}],[\"保存在堆中\",{\"1\":{\"47\":1}}],[\"保存在\",{\"1\":{\"8\":1}}],[\"保存\",{\"1\":{\"3\":1}}],[\"||\",{\"1\":{\"60\":1,\"145\":1,\"148\":3}}],[\"|──\",{\"1\":{\"5\":2}}],[\"判断当前单例bean是否正在建立中\",{\"1\":{\"155\":1}}],[\"判断任务是否需要持久化存储\",{\"1\":{\"103\":1}}],[\"判断是否需要进行持久化\",{\"1\":{\"102\":1}}],[\"判断每个关键域是否相等\",{\"1\":{\"60\":1}}],[\"判断引用的对象是否等价\",{\"1\":{\"60\":1}}],[\"判断两个变量是否引用同一个对象\",{\"1\":{\"60\":1}}],[\"判断两个值是否相等\",{\"1\":{\"60\":1}}],[\"调用者管理该\",{\"1\":{\"162\":1}}],[\"调用xxxaware接口\",{\"1\":{\"162\":1}}],[\"调用三方支付接口\",{\"1\":{\"134\":1}}],[\"调用其\",{\"1\":{\"111\":1}}],[\"调用\",{\"1\":{\"60\":1,\"111\":9,\"128\":1,\"162\":6}}],[\"五\",{\"1\":{\"60\":1}}],[\"四\",{\"1\":{\"60\":1,\"99\":1}}],[\"传递性\",{\"1\":{\"60\":1}}],[\"三级缓存\",{\"1\":{\"155\":2}}],[\"三方退款交互\",{\"1\":{\"135\":2}}],[\"三方平台的交易流水号等信息\",{\"1\":{\"134\":1}}],[\"三方支付交互的主要步骤如下\",{\"1\":{\"134\":1}}],[\"三方支付交互\",{\"1\":{\"134\":2}}],[\"三方支付平台\",{\"1\":{\"131\":1}}],[\"三\",{\"1\":{\"60\":1,\"99\":1,\"155\":2}}],[\"三大特性\",{\"0\":{\"25\":1,\"79\":1},\"1\":{\"24\":1,\"78\":1}}],[\"二级缓存\",{\"1\":{\"155\":1}}],[\"二叉排序树\",{\"1\":{\"95\":1}}],[\"二叉树中最基本的二叉查找树\",{\"1\":{\"95\":1}}],[\"二叉搜索树\",{\"1\":{\"95\":3}}],[\"二叉查找树因为可能退化成链表\",{\"1\":{\"95\":1}}],[\"二分法查找解决了普通数组查找复杂度过高的问题\",{\"1\":{\"95\":1}}],[\"二分查找要求数组的构造一定有序\",{\"1\":{\"95\":1}}],[\"二\",{\"1\":{\"60\":1,\"99\":1,\"155\":1}}],[\"顺序至少有一个不同\",{\"1\":{\"57\":1}}],[\"顺序图\",{\"1\":{\"36\":1,\"90\":1}}],[\"个数\",{\"1\":{\"57\":1}}],[\"子类\",{\"1\":{\"66\":3}}],[\"子类方法的返回类型必须是父类方法返回类型或为其子类型\",{\"1\":{\"57\":1}}],[\"子类方法的访问权限必须大于等于父类方法\",{\"1\":{\"57\":1}}],[\"子类对象必须能够替换掉所有父类对象\",{\"1\":{\"27\":1,\"81\":1}}],[\"存放记录的数组叫做散列表\",{\"1\":{\"95\":1}}],[\"存在丢失消息风险\",{\"1\":{\"135\":1}}],[\"存在的问题如下\",{\"1\":{\"99\":1}}],[\"存在问题\",{\"1\":{\"99\":1}}],[\"存在继承的情况下\",{\"1\":{\"66\":1}}],[\"存在于父的bean工厂中\",{\"1\":{\"153\":2}}],[\"存在于同一个类中\",{\"1\":{\"57\":1}}],[\"存在于继承体系中\",{\"1\":{\"57\":1}}],[\"存储的是对象的地址\",{\"1\":{\"49\":1}}],[\"函数访问父类的构造函数\",{\"1\":{\"56\":1}}],[\"之前\",{\"1\":{\"55\":2}}],[\"之后\",{\"1\":{\"10\":1}}],[\"需调用方共同维护消息队列\",{\"1\":{\"135\":1}}],[\"需求prd\",{\"1\":{\"99\":1}}],[\"需要有如下顶层思维\",{\"1\":{\"162\":1}}],[\"需要去掉\",{\"1\":{\"153\":2}}],[\"需要提供业务统一的支付平台能力\",{\"1\":{\"129\":1}}],[\"需要立即处理的任务\",{\"1\":{\"107\":1}}],[\"需要人工统一的工作较多\",{\"1\":{\"99\":1}}],[\"需要高一点层次整体上去理解它\",{\"1\":{\"95\":1}}],[\"需要进一步学习springmvc\",{\"1\":{\"94\":1}}],[\"需要手动回收\",{\"1\":{\"73\":1}}],[\"需要用\",{\"1\":{\"68\":1}}],[\"需要继承非静态和非常量字段\",{\"1\":{\"55\":1}}],[\"需要继承抽象类才能实例化其子类\",{\"1\":{\"55\":1}}],[\"需要能控制继承来的成员的访问权限\",{\"1\":{\"55\":1}}],[\"需要在几个相关的类中共享代码\",{\"1\":{\"55\":1}}],[\"需要使用多重继承\",{\"1\":{\"55\":1}}],[\"需要让不相关的类都实现一个方法\",{\"1\":{\"55\":1}}],[\"需绑定自定义域名\",{\"1\":{\"11\":1}}],[\"抽象方法一定位于抽象类中\",{\"1\":{\"55\":1}}],[\"抽象类提供了一种\",{\"1\":{\"55\":1}}],[\"抽象类不能被实例化\",{\"1\":{\"55\":1}}],[\"抽象类和普通类最大的区别是\",{\"1\":{\"55\":1}}],[\"抽象类和抽象方法都使用\",{\"1\":{\"55\":1}}],[\"抽象类一般会包含抽象方法\",{\"1\":{\"55\":1}}],[\"抽象类\",{\"1\":{\"55\":1}}],[\"抽象类与接口\",{\"0\":{\"55\":1},\"1\":{\"39\":1}}],[\"抽象类与oop三大特征\",{\"1\":{\"36\":1,\"90\":1}}],[\"去存储\",{\"1\":{\"54\":1}}],[\"去永久代\",{\"1\":{\"47\":1}}],[\"共有字段\",{\"1\":{\"54\":1}}],[\"共同实现\",{\"1\":{\"47\":2}}],[\"拥有\",{\"1\":{\"54\":1}}],[\"把它的\",{\"1\":{\"54\":1}}],[\"设计良好的模块会隐藏所有的实现细节\",{\"1\":{\"54\":1}}],[\"设置键值对\",{\"1\":{\"134\":1}}],[\"设置在\",{\"1\":{\"5\":2}}],[\"设置完成后\",{\"1\":{\"3\":1}}],[\"设置\",{\"1\":{\"3\":1,\"13\":1}}],[\"成员可见表示其它类可以用这个类的实例对象访问到该成员\",{\"1\":{\"54\":1}}],[\"加载配置\",{\"1\":{\"144\":1}}],[\"加上当前时间戳\",{\"1\":{\"134\":1}}],[\"加上访问修饰符\",{\"1\":{\"54\":1}}],[\"加入到以下两个文件\",{\"1\":{\"6\":1}}],[\"比较\",{\"1\":{\"55\":1}}],[\"比较合适\",{\"1\":{\"52\":1}}],[\"比如beandefinition中其它定义\",{\"1\":{\"152\":1}}],[\"比如退款金额最多两位小数\",{\"1\":{\"135\":1}}],[\"比如地图两点间距离计算\",{\"1\":{\"95\":1}}],[\"比如实际应用当中\",{\"1\":{\"95\":1}}],[\"比如web\",{\"1\":{\"94\":1}}],[\"比如ioc和aop等\",{\"1\":{\"94\":1}}],[\"比如方法区\",{\"1\":{\"47\":1}}],[\"比如学生和学校就是一种关联关系\",{\"1\":{\"34\":1,\"88\":1}}],[\"比如公司和部门\",{\"1\":{\"33\":1,\"87\":1}}],[\"条件判断语句中使用\",{\"1\":{\"52\":1}}],[\"开始\",{\"1\":{\"52\":1,\"55\":2}}],[\"开源笔记\",{\"1\":{\"1\":1}}],[\"开源工具\",{\"1\":{\"0\":1}}],[\"从上面三级缓存的分析\",{\"1\":{\"155\":1}}],[\"从beandefinition中获得beanclassname\",{\"1\":{\"152\":1}}],[\"从beandefinitionmap通过beanname获得beandefinition\",{\"1\":{\"152\":1}}],[\"从服务端设计的角度看\",{\"1\":{\"131\":1}}],[\"从检查点服务中移除任务\",{\"1\":{\"111\":1}}],[\"从检查点移除任务\",{\"1\":{\"109\":1,\"112\":1}}],[\"从队列中获取任务\",{\"1\":{\"111\":1,\"112\":1,\"117\":1}}],[\"从队列中获取任务并发送到kafka的执行器topic\",{\"1\":{\"109\":1,\"112\":1}}],[\"从kafka记录中创建任务负载对象\",{\"1\":{\"109\":1,\"112\":1}}],[\"从kafka的触发topic中消费任务\",{\"1\":{\"109\":1,\"112\":1}}],[\"从spring框架的整体架构和组成对整体框架有个认知\",{\"1\":{\"94\":1}}],[\"从使用上来看\",{\"1\":{\"55\":1}}],[\"从设计层面上看\",{\"1\":{\"55\":1}}],[\"从\",{\"1\":{\"52\":1,\"55\":1}}],[\"从而对用户体验和店铺相关运营指标产生负面影响\",{\"1\":{\"99\":1}}],[\"从而简化代码\",{\"1\":{\"66\":1}}],[\"从而委托父类完成一些初始化的工作\",{\"1\":{\"56\":1}}],[\"从而影响\",{\"1\":{\"35\":1,\"89\":1}}],[\"从而获得\",{\"1\":{\"27\":1,\"81\":1}}],[\"从而正确显示样式和功能\",{\"1\":{\"13\":1}}],[\"从而生成位于国内的静态页面\",{\"1\":{\"9\":1}}],[\"变量\",{\"1\":{\"50\":1}}],[\"一般称它们的实现类为\",{\"1\":{\"162\":1}}],[\"一般取\",{\"1\":{\"61\":1}}],[\"一处是spring利用其建立bean的时候\",{\"1\":{\"155\":1}}],[\"一级缓存\",{\"1\":{\"155\":1}}],[\"一笔退款失败后重新提交\",{\"1\":{\"135\":1}}],[\"一切与外部渠道服务交互\",{\"1\":{\"99\":1}}],[\"一体化管理系统可提高工作效率\",{\"1\":{\"99\":1}}],[\"一线人力投入成本高\",{\"1\":{\"99\":1}}],[\"一样的指针\",{\"1\":{\"73\":1}}],[\"一起对反射提供了支持\",{\"1\":{\"67\":1}}],[\"一致性\",{\"1\":{\"60\":1}}],[\"一\",{\"1\":{\"60\":1,\"99\":1}}],[\"一个退款请求后\",{\"1\":{\"135\":1}}],[\"一个订单的退款金额总和不能超过支付金额\",{\"1\":{\"135\":1}}],[\"一个极简的订单支付的流程如下\",{\"1\":{\"131\":1}}],[\"一个类不显式去重写\",{\"1\":{\"63\":1}}],[\"一个类可以实现多个接口\",{\"1\":{\"55\":1}}],[\"一个数与\",{\"1\":{\"61\":1}}],[\"一个模块不需要知道其他模块的内部工作情况\",{\"1\":{\"54\":1}}],[\"一个学校可以有很多学生\",{\"1\":{\"34\":1,\"88\":1}}],[\"一方改变其所指向对象的内容对另一方没有影响\",{\"1\":{\"49\":1}}],[\"取消永久代\",{\"1\":{\"47\":1}}],[\"静态导包\",{\"1\":{\"66\":1}}],[\"静态内部类不能访问外部类的非静态的变量和方法\",{\"1\":{\"66\":1}}],[\"静态内部类\",{\"1\":{\"66\":1}}],[\"静态语句块在类初始化时运行一次\",{\"1\":{\"66\":1}}],[\"静态语句块\",{\"1\":{\"66\":4}}],[\"静态方法在类加载的时候就存在了\",{\"1\":{\"66\":1}}],[\"静态方法\",{\"1\":{\"66\":1}}],[\"静态变量和静态语句块的初始化顺序取决于它们在代码中的顺序\",{\"1\":{\"66\":1}}],[\"静态变量和静态语句块优先于实例变量和普通语句块\",{\"1\":{\"66\":1}}],[\"静态变量在内存中只存在一份\",{\"1\":{\"66\":1}}],[\"静态变量仍在堆中\",{\"1\":{\"47\":1}}],[\"静态变量\",{\"1\":{\"47\":2,\"66\":6}}],[\"静态变量移除\",{\"1\":{\"47\":1}}],[\"静态变量存放在永久代上\",{\"1\":{\"47\":1}}],[\"静态构建过程中不会出现\",{\"1\":{\"15\":1}}],[\"包括对业务中台各项服务的配置\",{\"1\":{\"132\":1}}],[\"包括但不限于交易支付\",{\"1\":{\"132\":1}}],[\"包括但不限于商户配置\",{\"1\":{\"132\":1}}],[\"包括支付金额\",{\"1\":{\"131\":1}}],[\"包括获取\",{\"1\":{\"124\":1}}],[\"包括获取分片配置\",{\"1\":{\"119\":1}}],[\"包括刷新任务到触发器\",{\"1\":{\"119\":1,\"124\":1}}],[\"包括重试机制和任务状态管理\",{\"1\":{\"117\":1}}],[\"包括异步执行和同步执行\",{\"1\":{\"114\":1}}],[\"包括\",{\"1\":{\"114\":1}}],[\"包括任务的提交\",{\"1\":{\"111\":1}}],[\"包括任务的添加和时间的推进\",{\"1\":{\"109\":1,\"112\":1}}],[\"包括分区的分配和撤销处理\",{\"1\":{\"109\":1,\"112\":1}}],[\"包括字符串常量池\",{\"1\":{\"47\":1}}],[\"包含商户系统\",{\"1\":{\"132\":1}}],[\"包含支付金额\",{\"1\":{\"131\":1}}],[\"包含应用id和任务id\",{\"1\":{\"119\":1}}],[\"包含任务的基本信息和状态\",{\"1\":{\"119\":1}}],[\"包含任务的相关信息\",{\"1\":{\"109\":1,\"112\":1}}],[\"包含分片总数和分片键\",{\"1\":{\"119\":1}}],[\"包含分片总数和当前分片\",{\"1\":{\"119\":1}}],[\"包含一个内部静态类\",{\"1\":{\"114\":2,\"119\":1}}],[\"包含dispatcherservlet的初始化过程和dispatcherservlet处理请求的过程的源码解析\",{\"1\":{\"94\":2}}],[\"包含了与类有关的信息\",{\"1\":{\"67\":1}}],[\"包装类型\",{\"0\":{\"41\":1},\"1\":{\"39\":1}}],[\"由此我们可以知道\",{\"1\":{\"148\":1}}],[\"由ioc\",{\"1\":{\"144\":1}}],[\"由业务商户系统进行处理\",{\"1\":{\"137\":1}}],[\"由支付中心系统进行统一处理后再回调业务商户系统\",{\"1\":{\"135\":1,\"136\":1}}],[\"由支付系统做统一处理\",{\"1\":{\"134\":1}}],[\"由开发人员进行维护\",{\"1\":{\"99\":1}}],[\"由哪些实际的部分实现的\",{\"1\":{\"47\":1}}],[\"由于a还没初始化彻底\",{\"1\":{\"155\":1}}],[\"由于beandefinition还有单例的信息\",{\"1\":{\"152\":1}}],[\"由于一些问题在新窗口打开的存在\",{\"1\":{\"47\":1}}],[\"由于读书笔记架构更换到\",{\"1\":{\"7\":1}}],[\"它包括了任务的持久化\",{\"1\":{\"118\":1}}],[\"它包括了任务的http请求处理\",{\"1\":{\"113\":1}}],[\"它或者是一棵空树\",{\"1\":{\"95\":1}}],[\"它通过把关键码值映射到表中一个位置来访问记录\",{\"1\":{\"95\":1}}],[\"它的优点是\",{\"1\":{\"95\":1}}],[\"它的左\",{\"1\":{\"95\":1}}],[\"它的应用是文件系统及部分非关系型数据库索引\",{\"1\":{\"95\":1}}],[\"它的引用可以理解为安全指针\",{\"1\":{\"73\":1}}],[\"它们的底层实现就是红黑树\",{\"1\":{\"95\":1}}],[\"它们都覆盖了父类的\",{\"1\":{\"28\":1,\"82\":1}}],[\"它是一棵空树或它的左右两个子树的高度差的绝对值不超过1\",{\"1\":{\"95\":1}}],[\"它是一个逻辑上的概念\",{\"1\":{\"47\":1}}],[\"它是怎么诞生的\",{\"1\":{\"94\":1}}],[\"它不仅是内部业务线之间的支付服务提供者\",{\"1\":{\"129\":1}}],[\"它不依赖于任何实例\",{\"1\":{\"66\":1}}],[\"它不是\",{\"1\":{\"63\":1}}],[\"它与该实例同生共死\",{\"1\":{\"66\":1}}],[\"它会抛出异常\",{\"1\":{\"63\":1}}],[\"它只是提供一种方法实现契约\",{\"1\":{\"55\":1}}],[\"它可以看成是一个完全抽象的类\",{\"1\":{\"55\":1}}],[\"它比\",{\"1\":{\"51\":1}}],[\"永久代以及元空间是实际的存放位置\",{\"1\":{\"47\":1}}],[\"永久代\",{\"1\":{\"47\":1}}],[\"字面量才是\",{\"1\":{\"50\":1}}],[\"字面量属于\",{\"1\":{\"50\":1}}],[\"字段决不能是公有的\",{\"1\":{\"54\":1}}],[\"字段以及方法\",{\"1\":{\"54\":1}}],[\"字段\",{\"1\":{\"47\":3,\"54\":1,\"55\":1}}],[\"字符串常量池放在哪里\",{\"1\":{\"47\":1}}],[\"字符串常量池属于虚拟机规范中的方法区\",{\"1\":{\"47\":1}}],[\"字符串常量池\",{\"1\":{\"47\":4}}],[\"字的短文\",{\"1\":{\"5\":1}}],[\"采用情况\",{\"1\":{\"135\":1}}],[\"采用\",{\"1\":{\"47\":1}}],[\"下面的代码中\",{\"1\":{\"61\":1,\"82\":1}}],[\"下面示例中\",{\"1\":{\"47\":1}}],[\"下的\",{\"1\":{\"6\":1}}],[\"404\",{\"1\":{\"166\":1}}],[\"403\",{\"0\":{\"15\":1},\"1\":{\"15\":1}}],[\"438247718\",{\"1\":{\"165\":1}}],[\"43\",{\"1\":{\"163\":19}}],[\"42\",{\"1\":{\"163\":1}}],[\"44\",{\"1\":{\"163\":20}}],[\"4554617c\",{\"1\":{\"49\":3,\"62\":2}}],[\"4\",{\"0\":{\"136\":1},\"1\":{\"45\":1,\"55\":1,\"63\":1,\"66\":1,\"99\":2,\"134\":3}}],[\"改动影响面难以评估\",{\"1\":{\"99\":1}}],[\"改变循环依赖类的加载顺序\",{\"1\":{\"160\":1}}],[\"改变\",{\"1\":{\"45\":1}}],[\"改为\",{\"1\":{\"11\":1}}],[\"被初始化后和被销毁前执行一些相关操作\",{\"1\":{\"161\":1}}],[\"被改变\",{\"1\":{\"45\":1}}],[\"被声明为\",{\"1\":{\"44\":1}}],[\"经常作为参数\",{\"1\":{\"45\":1}}],[\"安全的服务接口\",{\"1\":{\"132\":1}}],[\"安全性\",{\"1\":{\"45\":1}}],[\"安装依赖\",{\"1\":{\"17\":1}}],[\"才有永久代的概念\",{\"1\":{\"47\":1}}],[\"才可能使用\",{\"1\":{\"45\":1}}],[\"才会成为我们的财富\",{\"1\":{\"1\":1}}],[\"是四位随机数\",{\"1\":{\"134\":1}}],[\"是时间戳\",{\"1\":{\"134\":1}}],[\"是指支付宝支付\",{\"1\":{\"134\":1}}],[\"是由顶点和连接顶点的边构成的离散结构\",{\"1\":{\"95\":1}}],[\"是平衡二叉树和avl树的折中\",{\"1\":{\"95\":1}}],[\"是在计算机科学中用到的一种数据结构\",{\"1\":{\"95\":1}}],[\"是一种哈希树的变种\",{\"1\":{\"95\":1}}],[\"是一种树形结构\",{\"1\":{\"95\":1}}],[\"是一种带权路径长度最短的二叉树\",{\"1\":{\"95\":1}}],[\"是一种自平衡二叉查找树\",{\"1\":{\"95\":1}}],[\"是一个指针\",{\"1\":{\"49\":1}}],[\"是右子树的节点数量\",{\"1\":{\"95\":1}}],[\"是左子树的节点数量\",{\"1\":{\"95\":1}}],[\"是根据关键码值\",{\"1\":{\"95\":1}}],[\"是大规模数据存储中\",{\"1\":{\"95\":1}}],[\"是保留字\",{\"1\":{\"73\":1}}],[\"是纯粹的面向对象语言\",{\"1\":{\"73\":1}}],[\"是程序运行时错误\",{\"1\":{\"68\":1}}],[\"是用来判断两个对象是否等价\",{\"1\":{\"61\":1}}],[\"是因为\",{\"1\":{\"52\":1}}],[\"是\",{\"1\":{\"51\":1,\"63\":1}}],[\"是否容许从singletonfactories中经过getobject拿到对象\",{\"1\":{\"155\":1}}],[\"是否能够应用于clazz的advice\",{\"1\":{\"146\":1}}],[\"是否跳过\",{\"1\":{\"145\":1}}],[\"是否有永久代\",{\"1\":{\"47\":1}}],[\"是否屏蔽了\",{\"1\":{\"14\":1}}],[\"是不一样的\",{\"1\":{\"47\":1}}],[\"是不可变的\",{\"1\":{\"45\":1}}],[\"是虚拟机规范中是方法区的一部分\",{\"1\":{\"47\":1}}],[\"是通过<aop\",{\"1\":{\"148\":1}}],[\"是通过optimize设置\",{\"1\":{\"148\":1}}],[\"是通过\",{\"1\":{\"47\":1}}],[\"是线程安全的\",{\"1\":{\"46\":1}}],[\"是可变的\",{\"1\":{\"45\":1}}],[\"内部异常和外部异常\",{\"1\":{\"137\":1}}],[\"内部提交任务接口\",{\"1\":{\"104\":1}}],[\"内部没有改变\",{\"1\":{\"44\":1}}],[\"内部使用\",{\"1\":{\"44\":1,\"46\":1}}],[\"该接口继承了\",{\"1\":{\"119\":1}}],[\"该接口定义了任务生命周期管理的基本方法\",{\"1\":{\"119\":1}}],[\"该接口定义了任务处理器的基本方法\",{\"1\":{\"114\":1}}],[\"该接口定义了分片管理的基本方法\",{\"1\":{\"119\":1}}],[\"该接口使用\",{\"1\":{\"114\":1,\"119\":1}}],[\"该类表示任务的唯一标识\",{\"1\":{\"119\":1}}],[\"该类表示任务实体\",{\"1\":{\"119\":1}}],[\"该类表示分片配置的值\",{\"1\":{\"119\":1}}],[\"该类表示一个分片\",{\"1\":{\"119\":1}}],[\"该类提供了批量更新任务状态的方法\",{\"1\":{\"119\":1}}],[\"该类提供了\",{\"1\":{\"114\":1}}],[\"该类用于查找并创建任务处理器\",{\"1\":{\"114\":1}}],[\"该类用于读取配置文件中的\",{\"1\":{\"114\":1}}],[\"该类是一个\",{\"1\":{\"114\":2,\"119\":1}}],[\"该类实现了\",{\"1\":{\"114\":3,\"119\":3}}],[\"该枚举定义了任务的不同阶段\",{\"1\":{\"114\":1}}],[\"该系统时序图展示了延时任务调度系统的主要流程\",{\"1\":{\"111\":1}}],[\"该方法会返回一个\",{\"1\":{\"67\":1}}],[\"该文件内容保存着\",{\"1\":{\"67\":1}}],[\"该数组被声明为\",{\"1\":{\"44\":1}}],[\"该路径下的文件不会被转换为\",{\"1\":{\"7\":1}}],[\"实际应用当中的数据往往十分庞大\",{\"1\":{\"95\":1}}],[\"实际的存储位置是有差异的\",{\"1\":{\"47\":1}}],[\"实例的引用\",{\"1\":{\"162\":3}}],[\"实例化出bean对象\",{\"1\":{\"150\":1}}],[\"实例变量\",{\"1\":{\"66\":5}}],[\"实例使用自动装箱来创建并且值相同\",{\"1\":{\"42\":1}}],[\"实现资金流转\",{\"1\":{\"129\":1}}],[\"实现资金的流转\",{\"1\":{\"129\":1}}],[\"实现分片的创建\",{\"1\":{\"122\":1}}],[\"实现了\",{\"1\":{\"103\":1,\"162\":8}}],[\"实现电商数据信息在系统内部自动流动\",{\"1\":{\"99\":1}}],[\"实现订单\",{\"1\":{\"99\":1}}],[\"实现索引查询这样一个实际背景下\",{\"1\":{\"95\":1}}],[\"实现\",{\"1\":{\"60\":1,\"128\":1}}],[\"实现关系\",{\"0\":{\"31\":1,\"85\":1},\"1\":{\"24\":1,\"78\":1}}],[\"7403\",{\"1\":{\"134\":2}}],[\"74a14482\",{\"1\":{\"49\":1}}],[\"7\",{\"1\":{\"42\":1,\"47\":1,\"52\":1,\"72\":2}}],[\"70037927\",{\"1\":{\"36\":1,\"90\":1}}],[\"kafka\",{\"1\":{\"105\":1,\"110\":3,\"111\":5,\"112\":2,\"114\":1,\"116\":2,\"117\":2,\"119\":1,\"121\":4,\"122\":1,\"124\":1,\"125\":2,\"126\":1,\"127\":4,\"128\":1}}],[\"kruskal算法是从最小权重边着手\",{\"1\":{\"95\":1}}],[\"kruskal\",{\"1\":{\"95\":2}}],[\"kept\",{\"1\":{\"67\":1}}],[\"keyword\",{\"1\":{\"56\":1}}],[\"key\",{\"1\":{\"45\":1,\"95\":1,\"145\":1}}],[\"keyboard\",{\"1\":{\"32\":2,\"86\":2}}],[\"k++\",{\"1\":{\"42\":1}}],[\"k\",{\"1\":{\"42\":5,\"55\":1,\"121\":1,\"127\":1}}],[\"zhihu\",{\"1\":{\"165\":1}}],[\"z\",{\"1\":{\"42\":2,\"55\":1,\"56\":4,\"60\":8,\"61\":1}}],[\"拆箱\",{\"1\":{\"41\":1}}],[\"装箱\",{\"1\":{\"41\":1}}],[\"276\",{\"1\":{\"163\":2}}],[\"270\",{\"1\":{\"163\":2}}],[\"243\",{\"1\":{\"163\":2}}],[\"242\",{\"1\":{\"163\":5}}],[\"237\",{\"1\":{\"163\":4}}],[\"236\",{\"1\":{\"163\":1}}],[\"216\",{\"1\":{\"163\":2}}],[\"256\",{\"1\":{\"155\":1}}],[\"2提高到2\",{\"1\":{\"95\":1}}],[\"2017\",{\"1\":{\"75\":1}}],[\"2002\",{\"1\":{\"75\":1}}],[\"222\",{\"1\":{\"52\":2,\"63\":4}}],[\"2\",{\"0\":{\"131\":1,\"133\":1,\"134\":1,\"135\":2,\"136\":1,\"137\":1,\"138\":1},\"1\":{\"41\":1,\"45\":1,\"46\":1,\"55\":1,\"56\":1,\"57\":1,\"60\":1,\"61\":2,\"63\":9,\"65\":2,\"66\":1,\"95\":2,\"99\":3}}],[\"x<<5\",{\"1\":{\"61\":1}}],[\"x\",{\"1\":{\"41\":2,\"42\":2,\"52\":2,\"54\":2,\"55\":3,\"56\":6,\"60\":20,\"61\":3,\"65\":3,\"66\":8}}],[\"xxx\",{\"1\":{\"3\":2,\"6\":1,\"13\":2,\"66\":1}}],[\"基于spring框架和ioc\",{\"1\":{\"94\":1}}],[\"基本类型没有\",{\"1\":{\"60\":1}}],[\"基本类型对应的缓冲池如下\",{\"1\":{\"42\":1}}],[\"基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成\",{\"1\":{\"41\":1}}],[\"基本类型都有对应的包装类型\",{\"1\":{\"41\":1}}],[\"基础和overview\",{\"1\":{\"95\":2}}],[\"基础\",{\"0\":{\"24\":1,\"39\":1,\"78\":1,\"168\":1},\"1\":{\"24\":1,\"39\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"78\":1},\"2\":{\"37\":1,\"38\":1,\"76\":1,\"77\":1,\"91\":1,\"92\":1}}],[\"3dmrvd9zgyvwsbzk\",{\"1\":{\"142\":1}}],[\"317310638640000046083\",{\"1\":{\"128\":1}}],[\"31\",{\"1\":{\"61\":6}}],[\"3\",{\"1\":{\"45\":1,\"55\":1,\"56\":1,\"60\":1,\"63\":1,\"65\":1,\"66\":1,\"95\":1,\"99\":2}}],[\"323\",{\"1\":{\"42\":2}}],[\"32\",{\"1\":{\"41\":2}}],[\"38173324\",{\"1\":{\"36\":1,\"90\":1}}],[\"81431354\",{\"1\":{\"98\":1}}],[\"8039007\",{\"1\":{\"98\":1}}],[\"8080\",{\"1\":{\"17\":1}}],[\"8及之后\",{\"1\":{\"47\":1}}],[\"8\",{\"1\":{\"41\":1,\"42\":1,\"55\":4,\"72\":3}}],[\"八个基本类型\",{\"1\":{\"41\":1}}],[\"特性在新窗口打开\",{\"1\":{\"72\":1}}],[\"特性\",{\"0\":{\"71\":1},\"1\":{\"39\":1}}],[\"注销检查点\",{\"1\":{\"109\":1,\"112\":1}}],[\"注册检查点\",{\"1\":{\"109\":1,\"112\":1}}],[\"注解机制详解\",{\"1\":{\"70\":1}}],[\"注解不会也不能影响代码的实际逻辑\",{\"1\":{\"70\":1}}],[\"注解是附加在代码中的一些元信息\",{\"1\":{\"70\":1}}],[\"注解\",{\"0\":{\"70\":1},\"1\":{\"39\":1,\"57\":1}}],[\"注意到\",{\"1\":{\"26\":1,\"80\":1}}],[\"注意\",{\"1\":{\"5\":1}}],[\"泛型机制详解\",{\"1\":{\"69\":1}}],[\"泛型\",{\"0\":{\"69\":1},\"1\":{\"39\":1}}],[\"泛化关系\",{\"0\":{\"30\":1,\"84\":1},\"1\":{\"24\":1,\"78\":1}}],[\"反射机制详解\",{\"1\":{\"67\":1}}],[\"反射可以提供运行时的类信息\",{\"1\":{\"67\":1}}],[\"反射\",{\"0\":{\"67\":1},\"1\":{\"39\":1}}],[\"通知配置\",{\"1\":{\"132\":1}}],[\"通知卖家发货等\",{\"1\":{\"131\":1}}],[\"通常包括订单号\",{\"1\":{\"131\":1}}],[\"通常用于关系型数据库\",{\"1\":{\"95\":1}}],[\"通用方法\",{\"0\":{\"58\":1},\"1\":{\"39\":1}}],[\"通过java配置方式初始化bean\",{\"1\":{\"163\":1}}],[\"通过以下几个问题\",{\"1\":{\"156\":1}}],[\"通过反射初始化beanclassname的实例instance\",{\"1\":{\"152\":1}}],[\"通过introduction实现的advice\",{\"1\":{\"146\":1}}],[\"通过findeligibleadvisors方法获取advisor\",{\"1\":{\"146\":1}}],[\"通过aspectjawareadvisorautoproxycreator类去创建\",{\"1\":{\"144\":1}}],[\"通过支付单号和退款单号查询退款记录\",{\"1\":{\"136\":1}}],[\"通过接口回调或通过kafka发送消息\",{\"1\":{\"135\":1}}],[\"通过上述模块的协作\",{\"1\":{\"128\":1}}],[\"通过kafka进行任务的分发和消费\",{\"1\":{\"110\":1}}],[\"通过整合各个业务\",{\"1\":{\"99\":1}}],[\"通过提高问题处理时效和优化运营管理\",{\"1\":{\"99\":1}}],[\"通过优化流程和提高效率\",{\"1\":{\"99\":1}}],[\"通过头指针就可以把整个链表都能推出来\",{\"1\":{\"95\":1}}],[\"通过使用整型索引值来访问他们的元素\",{\"1\":{\"95\":1}}],[\"通过加载\",{\"1\":{\"94\":2,\"149\":1,\"150\":1}}],[\"通过案例引出spring的核心\",{\"1\":{\"94\":1}}],[\"通过虚拟机从而实现跨平台特性\",{\"1\":{\"73\":1}}],[\"通过正确配置\",{\"1\":{\"13\":1}}],[\"通过\",{\"1\":{\"9\":1,\"73\":1,\"117\":1,\"122\":4,\"125\":1}}],[\"隐式类型转换\",{\"0\":{\"51\":1},\"1\":{\"39\":1}}],[\"与教务系统对接的精品课订单生成等\",{\"1\":{\"99\":1}}],[\"与它的实现清晰地隔离开来\",{\"1\":{\"54\":1}}],[\"与\",{\"0\":{\"50\":1,\"73\":1},\"1\":{\"39\":2,\"42\":1,\"60\":2,\"114\":1,\"119\":1,\"122\":1,\"124\":1,\"125\":1,\"128\":1}}],[\"与运行过程的状态无关\",{\"1\":{\"34\":1,\"88\":1}}],[\"运费\",{\"1\":{\"99\":1}}],[\"运营投放增长问题\",{\"1\":{\"99\":1}}],[\"运行时进行解析和使用\",{\"1\":{\"70\":1}}],[\"运行时常量池\",{\"1\":{\"47\":2}}],[\"运行时多态有三个条件\",{\"1\":{\"28\":1,\"82\":1}}],[\"运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定\",{\"1\":{\"28\":1,\"82\":1}}],[\"运算符可以执行隐式类型转换\",{\"1\":{\"51\":1}}],[\"运算\",{\"0\":{\"48\":1},\"1\":{\"39\":1}}],[\"概览\",{\"0\":{\"44\":1,\"59\":1},\"1\":{\"39\":2}}],[\"缓存池的大小默认为\",{\"1\":{\"42\":1}}],[\"缓存池\",{\"0\":{\"42\":1},\"1\":{\"39\":1}}],[\"知识体系系统性梳理\",{\"1\":{\"95\":1}}],[\"知识体系\",{\"1\":{\"95\":2}}],[\"知识点\",{\"0\":{\"39\":1},\"1\":{\"39\":1,\"95\":1}}],[\"知识库\",{\"1\":{\"1\":1}}],[\"6844903843596107790\",{\"1\":{\"165\":1}}],[\"6\",{\"0\":{\"138\":1},\"1\":{\"66\":1,\"134\":2}}],[\"6及之前\",{\"1\":{\"47\":1}}],[\"64\",{\"1\":{\"41\":2}}],[\"6475334\",{\"1\":{\"36\":1,\"90\":1}}],[\"6012105\",{\"1\":{\"36\":1,\"90\":1}}],[\"系列\",{\"1\":{\"36\":1,\"90\":1}}],[\"系统异常处理设计\",{\"0\":{\"137\":1}}],[\"系统架构设计\",{\"0\":{\"132\":1}}],[\"系统实现了延时任务的持久化\",{\"1\":{\"128\":1}}],[\"系统时序图\",{\"0\":{\"116\":1,\"121\":1}}],[\"系统时序图解释\",{\"0\":{\"111\":1}}],[\"系统初始化\",{\"1\":{\"111\":1,\"112\":1,\"117\":1}}],[\"系统开发收益\",{\"1\":{\"99\":1}}],[\"系统会显示红色错误提示\",{\"1\":{\"3\":1}}],[\"系统优化和相关问题\",{\"1\":{\"2\":1}}],[\"系统问题\",{\"1\":{\"2\":1}}],[\"看懂\",{\"1\":{\"36\":1,\"90\":1}}],[\"看板娘\",{\"0\":{\"6\":1}}],[\"模块分析及主要流程\",{\"0\":{\"123\":1}}],[\"模块设计\",{\"1\":{\"99\":1}}],[\"模块之间只通过它们的\",{\"1\":{\"54\":1}}],[\"模式与实践\",{\"1\":{\"36\":1,\"90\":1}}],[\"模板帮助你新建并初始化仓库\",{\"1\":{\"11\":1}}],[\"敏捷软件开发\",{\"1\":{\"36\":1,\"90\":1}}],[\"编译器会自动进行这个优化\",{\"1\":{\"61\":1}}],[\"编译器会在缓冲池范围内的基本类型自动装箱过程调用\",{\"1\":{\"42\":1}}],[\"编译时多态主要指方法的重载\",{\"1\":{\"28\":1,\"82\":1}}],[\"编程思想\",{\"1\":{\"36\":1,\"75\":1,\"90\":1}}],[\"局部变量\",{\"1\":{\"35\":1,\"89\":1}}],[\"某中方法的\",{\"1\":{\"35\":1,\"89\":1}}],[\"多例循环依赖\",{\"1\":{\"160\":1}}],[\"多实例bean是每次调用一次getbean都会执行一次构造方法并且给属性赋值\",{\"1\":{\"159\":1}}],[\"多类型的售后订单处理工具\",{\"1\":{\"99\":1}}],[\"多平台交易订单获取\",{\"1\":{\"99\":1}}],[\"多平台多渠道统一渠道对接流程提高开发效率\",{\"1\":{\"99\":1}}],[\"多个模块之间不存在系统入侵\",{\"1\":{\"99\":1}}],[\"多个直播间带货\",{\"1\":{\"99\":1}}],[\"多个直播账号\",{\"1\":{\"99\":1}}],[\"多个直播平台\",{\"1\":{\"99\":1}}],[\"多店铺运营\",{\"1\":{\"99\":1}}],[\"多渠道数据标准化存储\",{\"1\":{\"99\":1}}],[\"多渠道多平台店铺可视化配置与管理\",{\"1\":{\"99\":1}}],[\"多渠道整合后的系统便于团队成员之间的沟通与协作\",{\"1\":{\"99\":1}}],[\"多渠道\",{\"1\":{\"99\":2}}],[\"多路查找树\",{\"1\":{\"95\":1}}],[\"多次调用\",{\"1\":{\"60\":1}}],[\"多次调用会取得同一个对象的引用\",{\"1\":{\"42\":1}}],[\"多对多这种关联关系来表示\",{\"1\":{\"34\":1,\"88\":1}}],[\"多对\",{\"1\":{\"34\":1,\"88\":1}}],[\"多态在新窗口打开\",{\"1\":{\"36\":1,\"90\":1}}],[\"多态分为编译时多态和运行时多态\",{\"1\":{\"28\":1,\"82\":1}}],[\"多态\",{\"0\":{\"28\":1,\"82\":1},\"1\":{\"24\":1,\"78\":1}}],[\"对该\",{\"1\":{\"162\":1}}],[\"对advisor排序\",{\"1\":{\"146\":1}}],[\"对退款回调进行解密\",{\"1\":{\"136\":1}}],[\"对退款请求的字段进行校验\",{\"1\":{\"135\":1}}],[\"对第三方支付平台无感知\",{\"1\":{\"134\":1}}],[\"对外提供api网关接口\",{\"1\":{\"132\":1}}],[\"对外对接三方支付服务\",{\"1\":{\"129\":1}}],[\"对外方面\",{\"1\":{\"129\":1}}],[\"对内方面\",{\"1\":{\"129\":1}}],[\"对应一个微信或支付宝商户号\",{\"1\":{\"129\":1}}],[\"对一线客服工作量进行售后单维度统计\",{\"1\":{\"99\":1}}],[\"对日益增长的系统迭代开发需求\",{\"1\":{\"99\":1}}],[\"对于\",{\"1\":{\"161\":1}}],[\"对于外部异常\",{\"1\":{\"137\":1}}],[\"对于回调商户通知结果现有两种方式\",{\"1\":{\"135\":1}}],[\"对于数据结构这种基础内容\",{\"1\":{\"95\":1}}],[\"对于引用类型\",{\"1\":{\"60\":1,\"65\":1}}],[\"对于基本类型\",{\"1\":{\"60\":1,\"65\":1}}],[\"对于不同版本的jdk\",{\"1\":{\"47\":1}}],[\"对任何不是\",{\"1\":{\"60\":1}}],[\"对称性\",{\"1\":{\"60\":1}}],[\"对\",{\"1\":{\"34\":1,\"88\":1,\"162\":1}}],[\"对象支持加法运算\",{\"1\":{\"73\":1}}],[\"对象关联的方法\",{\"1\":{\"67\":1}}],[\"对象关联的字段\",{\"1\":{\"67\":1}}],[\"对象进行转型\",{\"1\":{\"60\":1}}],[\"对象已经被创建过了\",{\"1\":{\"45\":1}}],[\"对象\",{\"1\":{\"27\":1,\"28\":1,\"52\":1,\"67\":3,\"81\":1,\"82\":1}}],[\"对象的加载\",{\"1\":{\"67\":1}}],[\"对象的那一方以为现在连接的是其它主机\",{\"1\":{\"45\":1}}],[\"对象的\",{\"1\":{\"26\":1,\"80\":1}}],[\"表示是否目标类实现了接口\",{\"1\":{\"148\":1}}],[\"表示优先使用cglib代理\",{\"1\":{\"148\":1}}],[\"表示配置是自定义的\",{\"1\":{\"148\":1}}],[\"表示在继承体系中成员对于子类可见\",{\"1\":{\"54\":1}}],[\"表示包级可见\",{\"1\":{\"54\":1}}],[\"表示不同类对象之间有关联\",{\"1\":{\"34\":1,\"88\":1}}],[\"表示整体由部分组成\",{\"1\":{\"32\":1,\"86\":1}}],[\"表示服务器配置错误\",{\"1\":{\"14\":1}}],[\"绘制\",{\"1\":{\"29\":1,\"83\":1}}],[\"乐器类\",{\"1\":{\"28\":1,\"82\":1}}],[\"重点\",{\"0\":{\"154\":1,\"161\":1},\"1\":{\"145\":2,\"149\":2}}],[\"重复支付退款回调不进行通知商户\",{\"1\":{\"136\":1}}],[\"重试任务\",{\"1\":{\"116\":1}}],[\"重载\",{\"1\":{\"57\":1}}],[\"重写有以下两个限制\",{\"1\":{\"57\":1}}],[\"重写与重载\",{\"0\":{\"57\":1},\"1\":{\"39\":1}}],[\"重写\",{\"1\":{\"28\":1,\"57\":1,\"63\":1,\"82\":1}}],[\"重新进行部署\",{\"1\":{\"14\":1}}],[\"覆盖\",{\"1\":{\"28\":1,\"82\":1}}],[\"引入\",{\"0\":{\"144\":1,\"150\":1},\"1\":{\"143\":1,\"149\":1}}],[\"引用的是同一个字符串常量池的对象\",{\"1\":{\"47\":1}}],[\"引用的对象放到\",{\"1\":{\"47\":1}}],[\"引用调用\",{\"1\":{\"28\":1,\"82\":1}}],[\"引用\",{\"1\":{\"27\":1,\"81\":1}}],[\"引起的\",{\"1\":{\"15\":1}}],[\"也没有\",{\"1\":{\"155\":1}}],[\"也叫哈希表\",{\"1\":{\"95\":1}}],[\"也就不需要代理了\",{\"1\":{\"145\":1}}],[\"也就不能引用其它对象\",{\"1\":{\"65\":1}}],[\"也就是beanb需要在beana的构造函数中完成初始化\",{\"1\":{\"157\":1}}],[\"也就是没有初始化完成\",{\"1\":{\"155\":1}}],[\"也就是将三级缓存提高到二级缓存中\",{\"1\":{\"155\":1}}],[\"也就是构建avl树比较麻烦\",{\"1\":{\"95\":1}}],[\"也就是说单例对象此时已经被建立出来的\",{\"1\":{\"155\":1}}],[\"也就是说\",{\"1\":{\"95\":1}}],[\"也就是说它不能是抽象方法\",{\"1\":{\"66\":1}}],[\"也就是说它不能有任何的方法实现\",{\"1\":{\"55\":1}}],[\"也就是说这个变量属于类的\",{\"1\":{\"66\":1}}],[\"也就是说可以使用\",{\"1\":{\"27\":1,\"81\":1}}],[\"也就是确保满足里氏替换原则\",{\"1\":{\"54\":1}}],[\"也可以是在运行时被初始化后不能被改变的常量\",{\"1\":{\"65\":1}}],[\"也可以在不影响客户端代码的情况下进行\",{\"1\":{\"26\":1,\"80\":1}}],[\"非阻塞主流程的异常\",{\"1\":{\"137\":1}}],[\"非叶子结点作为叶子结点的索引\",{\"1\":{\"95\":1}}],[\"非受检异常\",{\"1\":{\"68\":1}}],[\"非静态内部类依赖于外部类的实例\",{\"1\":{\"66\":1}}],[\"非\",{\"1\":{\"27\":1,\"81\":1}}],[\"关键路径在项目管理计算工期等方面有广泛等应用\",{\"1\":{\"95\":1}}],[\"关键路径\",{\"1\":{\"95\":1}}],[\"关键路径等\",{\"1\":{\"95\":1}}],[\"关键字来引用父类的方法实现\",{\"1\":{\"56\":1}}],[\"关键字进行声明\",{\"1\":{\"55\":1}}],[\"关键字\",{\"0\":{\"64\":1},\"1\":{\"30\":1,\"31\":1,\"39\":1,\"66\":1,\"84\":1,\"85\":1}}],[\"关联\",{\"1\":{\"162\":5}}],[\"关联数组具有较高的查询效率\",{\"1\":{\"95\":1}}],[\"关联关系\",{\"0\":{\"34\":1,\"88\":1},\"1\":{\"24\":1,\"78\":1}}],[\"关系\",{\"1\":{\"27\":2,\"55\":3,\"81\":2}}],[\"<bean>\",{\"1\":{\"162\":2}}],[\"<t>\",{\"1\":{\"151\":2,\"153\":3}}],[\"<time\",{\"1\":{\"128\":1}}],[\"<p>uses\",{\"1\":{\"147\":1}}],[\"<p>can\",{\"1\":{\"147\":1}}],[\"<device\",{\"1\":{\"128\":1}}],[\"<mch\",{\"1\":{\"128\":1}}],[\"<\",{\"1\":{\"42\":1,\"63\":5}}],[\"<|\",{\"1\":{\"30\":2,\"31\":2,\"84\":2,\"85\":2}}],[\"<=\",{\"1\":{\"26\":2,\"42\":1,\"80\":2}}],[\"<script\",{\"1\":{\"6\":2}}],[\"而对于\",{\"1\":{\"161\":1}}],[\"而对于支付系统内部异常\",{\"1\":{\"137\":1}}],[\"而且将本身提早曝光到singletonfactories中\",{\"1\":{\"155\":1}}],[\"而且对象正在建立中\",{\"1\":{\"155\":1}}],[\"而且无序数组的查找最坏情况需要遍历整个数组\",{\"1\":{\"95\":1}}],[\"而下游业务服务\",{\"1\":{\"99\":1}}],[\"而直接进行访问的数据结构\",{\"1\":{\"95\":1}}],[\"而spring中循环依赖的解决正是通过缓存来实现的\",{\"1\":{\"158\":1}}],[\"而spring还需要考虑各种设计上的问题\",{\"1\":{\"152\":1}}],[\"而spring\",{\"1\":{\"94\":1}}],[\"而静态内部类不需要\",{\"1\":{\"66\":1}}],[\"而是在子类中定义了一个新的方法\",{\"1\":{\"65\":1}}],[\"而是\",{\"1\":{\"63\":1}}],[\"而是将文档同步到国内服务器\",{\"1\":{\"9\":1}}],[\"而是将被自动复制到静态网站下\",{\"1\":{\"7\":1}}],[\"而抽象类的成员可以有多种访问权限\",{\"1\":{\"55\":1}}],[\"而抽象类的字段没有这种限制\",{\"1\":{\"55\":1}}],[\"而接口更像是一种\",{\"1\":{\"55\":1}}],[\"而堆区\",{\"1\":{\"47\":1}}],[\"而字符串常量池是这个过程中常量字符串的存放位置\",{\"1\":{\"47\":1}}],[\"而\",{\"1\":{\"47\":1,\"60\":1,\"61\":1,\"73\":4}}],[\"而实际情况却不一定是\",{\"1\":{\"45\":1}}],[\"而不是都为\",{\"1\":{\"55\":1}}],[\"而不是引用传递\",{\"1\":{\"49\":1}}],[\"而不是\",{\"1\":{\"28\":1,\"82\":1}}],[\"而无法获取\",{\"1\":{\"26\":1,\"80\":1}}],[\"属性指定了\",{\"1\":{\"162\":1}}],[\"属性指定了初始化方法\",{\"1\":{\"162\":1}}],[\"属性值从beandefinition的getpropertyvalues\",{\"1\":{\"152\":1}}],[\"属性使用的数据类型时\",{\"1\":{\"26\":1,\"80\":1}}],[\"属性使用\",{\"1\":{\"26\":1,\"80\":1}}],[\"属性可以供\",{\"1\":{\"26\":1,\"80\":1}}],[\"属性\",{\"1\":{\"26\":2,\"80\":2}}],[\"属性和\",{\"1\":{\"26\":1,\"80\":1}}],[\"外界只能通过\",{\"1\":{\"26\":1,\"80\":1}}],[\"类似的依赖是如何解决\",{\"1\":{\"160\":1}}],[\"类提供了检查点的管理接口\",{\"1\":{\"110\":1}}],[\"类提供了任务触发和消费的核心逻辑\",{\"1\":{\"110\":1}}],[\"类表示一个任务桶\",{\"1\":{\"109\":1,\"112\":1}}],[\"类表示一个任务负载\",{\"1\":{\"109\":1,\"112\":1}}],[\"类表示一个检查点\",{\"1\":{\"109\":1,\"112\":1}}],[\"类实现了时间轮的核心逻辑\",{\"1\":{\"109\":1,\"112\":1}}],[\"类负责管理检查点\",{\"1\":{\"109\":1,\"112\":1}}],[\"类负责管理任务的触发和消费\",{\"1\":{\"109\":1,\"112\":1}}],[\"类负责管理时间轮的拨动和任务的添加\",{\"1\":{\"109\":1,\"112\":1}}],[\"类库主要包含了以下三个类\",{\"1\":{\"67\":1}}],[\"类在第一次使用时才动态加载到\",{\"1\":{\"67\":1}}],[\"类加载相当于\",{\"1\":{\"67\":1}}],[\"类所有的实例都共享静态变量\",{\"1\":{\"66\":1}}],[\"类\",{\"1\":{\"65\":1,\"103\":2,\"109\":7,\"112\":7,\"114\":8,\"119\":9}}],[\"类可见表示其它类可以用这个类创建实例对象\",{\"1\":{\"54\":1}}],[\"类型的\",{\"1\":{\"55\":1}}],[\"类型下转型为\",{\"1\":{\"51\":1}}],[\"类型精度要高\",{\"1\":{\"51\":1}}],[\"类型\",{\"1\":{\"50\":2,\"51\":2}}],[\"类型信息\",{\"1\":{\"47\":3}}],[\"类发生变化\",{\"1\":{\"35\":1,\"89\":1}}],[\"类发送消息\",{\"1\":{\"35\":1,\"89\":1}}],[\"类向\",{\"1\":{\"35\":1,\"89\":1}}],[\"类方法当中的一个参数\",{\"1\":{\"35\":1,\"89\":1}}],[\"类中的\",{\"1\":{\"35\":1,\"89\":1}}],[\"类是\",{\"1\":{\"35\":2,\"89\":2}}],[\"类是依赖关系主要有三种形式\",{\"1\":{\"35\":1,\"89\":1}}],[\"类和\",{\"1\":{\"35\":1,\"89\":1}}],[\"类的方法\",{\"1\":{\"28\":1,\"82\":1}}],[\"类封装\",{\"1\":{\"26\":1,\"80\":1}}],[\"类图和时序图在新窗口打开\",{\"1\":{\"36\":1,\"90\":1}}],[\"类图\",{\"0\":{\"29\":1,\"83\":1},\"1\":{\"24\":1,\"78\":1}}],[\"即首先尝试从bean工厂中获取bean\",{\"1\":{\"162\":1}}],[\"即需要创建代理\",{\"1\":{\"147\":1}}],[\"即spring\",{\"1\":{\"144\":1}}],[\"即支持面向对象也支持面向过程\",{\"1\":{\"73\":1}}],[\"即不相等的对象应当均匀分布到所有可能的散列值上\",{\"1\":{\"61\":1}}],[\"即子类对象必须能够替换掉所有父类对象\",{\"1\":{\"55\":1}}],[\"即使整个系统不可用\",{\"1\":{\"26\":1,\"80\":1}}],[\"即可打通支付整体流程\",{\"1\":{\"129\":1}}],[\"即可\",{\"1\":{\"3\":1,\"11\":1}}],[\"减少重复开发和维护成本\",{\"1\":{\"129\":1}}],[\"减少桶中的任务计数\",{\"1\":{\"109\":1,\"112\":1}}],[\"减少人为错误\",{\"1\":{\"99\":1}}],[\"减少耦合\",{\"1\":{\"26\":1,\"80\":1}}],[\"减轻维护的负担\",{\"1\":{\"26\":1,\"80\":1}}],[\"优化运营管理\",{\"1\":{\"99\":1}}],[\"优化\",{\"1\":{\"26\":1,\"80\":1}}],[\"优点\",{\"1\":{\"26\":1,\"80\":1,\"135\":1}}],[\"测试的主方法\",{\"1\":{\"163\":1}}],[\"测试\",{\"1\":{\"26\":1,\"80\":1}}],[\"尽可能地隐藏内部的细节\",{\"1\":{\"26\":1,\"80\":1}}],[\"数组和链表都是线性存储结构的基础\",{\"1\":{\"95\":1}}],[\"数组和矩阵\",{\"1\":{\"95\":2}}],[\"数组尺寸不能改变\",{\"1\":{\"95\":1}}],[\"数组是多维的\",{\"1\":{\"95\":1}}],[\"数组是一种连续存储线性结构\",{\"1\":{\"95\":1}}],[\"数组不能无限长\",{\"1\":{\"95\":1}}],[\"数组不会被优先考虑\",{\"1\":{\"95\":1}}],[\"数组的下标寻址十分迅速\",{\"1\":{\"95\":1}}],[\"数组的方法\",{\"1\":{\"44\":1}}],[\"数组初始化之后就不能再引用其它数组\",{\"1\":{\"44\":1}}],[\"数组存储数据\",{\"1\":{\"44\":1}}],[\"数据库设计\",{\"0\":{\"138\":1}}],[\"数据库异常导致修改支付订单状态失败\",{\"1\":{\"137\":1}}],[\"数据库系统\",{\"1\":{\"95\":1}}],[\"数据实时同步至数据中台\",{\"1\":{\"99\":1}}],[\"数据消费\",{\"1\":{\"99\":1}}],[\"数据标准化\",{\"1\":{\"99\":1}}],[\"数据分析\",{\"1\":{\"99\":2}}],[\"数据出口多\",{\"1\":{\"99\":1}}],[\"数据孤岛问题\",{\"1\":{\"99\":1}}],[\"数据碎片化与人工统计依赖\",{\"1\":{\"99\":1}}],[\"数据结构知识体系\",{\"0\":{\"173\":1}}],[\"数据结构之\",{\"1\":{\"95\":3}}],[\"数据结构是基础中的基础\",{\"1\":{\"95\":1}}],[\"数据结构\",{\"1\":{\"95\":2}}],[\"数据\",{\"1\":{\"65\":1}}],[\"数据类型\",{\"0\":{\"40\":1},\"1\":{\"39\":1}}],[\"数据类型进行存储\",{\"1\":{\"26\":1,\"80\":1}}],[\"数据被保护在抽象数据类型的内部\",{\"1\":{\"26\":1,\"80\":1}}],[\"数字越小越靠前\",{\"1\":{\"5\":1}}],[\"使得数据分析工作困难重重\",{\"1\":{\"99\":1}}],[\"使得修改接口的成本也变的很低\",{\"1\":{\"55\":1}}],[\"使引用不变\",{\"1\":{\"65\":1}}],[\"使数值不变\",{\"1\":{\"65\":1}}],[\"使用了三级缓存\",{\"1\":{\"154\":1}}],[\"使用三方支付接口所需的参数和加密方法\",{\"1\":{\"134\":1}}],[\"使用备用方案生成\",{\"1\":{\"134\":1}}],[\"使用抽象类\",{\"1\":{\"55\":1}}],[\"使用接口\",{\"1\":{\"55\":1}}],[\"使用选择\",{\"1\":{\"55\":1}}],[\"使用\",{\"1\":{\"26\":1,\"47\":1,\"57\":1,\"63\":1,\"80\":1,\"128\":1,\"134\":3,\"160\":3}}],[\"使用指南\",{\"2\":{\"19\":1,\"20\":1,\"23\":1}}],[\"使其构成一个不可分割的独立实体\",{\"1\":{\"26\":1,\"80\":1}}],[\"参考文章\",{\"0\":{\"98\":1,\"165\":1},\"1\":{\"95\":1,\"149\":1}}],[\"参考资料\",{\"0\":{\"36\":1,\"75\":1,\"90\":1},\"1\":{\"24\":1,\"39\":1,\"78\":1}}],[\"参数typecheckonly\",{\"1\":{\"153\":1}}],[\"参数传递\",{\"0\":{\"49\":1},\"1\":{\"39\":1}}],[\"参数表示侧边栏的顺序\",{\"1\":{\"5\":1}}],[\"聚合所有与外部渠道相关的交互\",{\"1\":{\"99\":1}}],[\"聚合所有博客文章\",{\"1\":{\"2\":1}}],[\"聚合关系\",{\"0\":{\"32\":1,\"86\":1},\"1\":{\"24\":1,\"78\":1}}],[\"继承应该遵循里氏替换原则\",{\"1\":{\"27\":1,\"81\":1}}],[\"继承实现了\",{\"1\":{\"27\":1,\"81\":1}}],[\"继承\",{\"0\":{\"27\":1,\"53\":1,\"81\":1},\"1\":{\"24\":1,\"28\":1,\"36\":1,\"39\":1,\"78\":1,\"82\":1,\"90\":1}}],[\"封装使得用户注意不到这种实现细节\",{\"1\":{\"26\":1,\"80\":1}}],[\"封装\",{\"0\":{\"26\":1,\"80\":1},\"1\":{\"24\":1,\"36\":1,\"78\":1,\"90\":1}}],[\"若是仍是获取不到且容许singletonfactories经过getobject\",{\"1\":{\"155\":1}}],[\"若是仍是获取不到而且容许从singletonfactories经过getobject获取\",{\"1\":{\"155\":1}}],[\"若是获取到了则从三级缓存移动到了二级缓存\",{\"1\":{\"155\":1}}],[\"若是获取到了则将singletonobject放入到earlysingletonobjects\",{\"1\":{\"155\":1}}],[\"若是获取不到\",{\"1\":{\"155\":1}}],[\"若是获取不到而且对象在建立中\",{\"1\":{\"155\":1}}],[\"若它的右子树不空\",{\"1\":{\"95\":1}}],[\"若它的左子树不空\",{\"1\":{\"95\":1}}],[\"若需停止本地服务器\",{\"1\":{\"17\":1}}],[\"若成功则会提示访问链接\",{\"1\":{\"17\":1}}],[\"若该名称已被其他项目使用\",{\"1\":{\"3\":1}}],[\"环境\",{\"1\":{\"17\":1}}],[\"环境依赖未正确配置\",{\"1\":{\"16\":1}}],[\"此处非常重要\",{\"1\":{\"162\":1}}],[\"此处就是解决循环依赖的关键\",{\"1\":{\"155\":1}}],[\"此等异常不应影响支付流程的进行\",{\"1\":{\"137\":1}}],[\"此报错出现的几率极低\",{\"1\":{\"16\":1}}],[\"此时返回a中\",{\"1\":{\"155\":1}}],[\"此时就尝试去get\",{\"1\":{\"155\":1}}],[\"此时进行初始化的第二步\",{\"1\":{\"155\":1}}],[\"此时程序崩溃并且无法恢复\",{\"1\":{\"68\":1}}],[\"此时子类的方法不是重写基类方法\",{\"1\":{\"65\":1}}],[\"此时\",{\"1\":{\"3\":2,\"11\":1,\"162\":1}}],[\"只负责创建\",{\"1\":{\"161\":1}}],[\"只帮我们管理单例模式\",{\"1\":{\"161\":1}}],[\"只能通过实现多个接口来达到相同目的\",{\"1\":{\"73\":1}}],[\"只能访问所属类的静态字段和静态方法\",{\"1\":{\"66\":1}}],[\"只在集合中添加一个对象\",{\"1\":{\"61\":1}}],[\"只有非接口的是通过cglib代理实现的\",{\"1\":{\"148\":1}}],[\"只有\",{\"1\":{\"45\":1,\"47\":1}}],[\"只有经过消化\",{\"1\":{\"1\":1}}],[\"只保留一些对外接口使之与外部发生联系\",{\"1\":{\"26\":1,\"80\":1}}],[\"只需在\",{\"1\":{\"15\":1}}],[\"时\",{\"1\":{\"161\":1}}],[\"时间轮拨动\",{\"1\":{\"111\":1,\"112\":1,\"117\":1}}],[\"时间轮的拨动\",{\"1\":{\"111\":1}}],[\"时间轴等方式进行组合\",{\"1\":{\"2\":1}}],[\"时效性和团队管理问题\",{\"1\":{\"99\":1}}],[\"时序图\",{\"0\":{\"105\":1,\"127\":1},\"1\":{\"36\":1,\"90\":1}}],[\"时使用非\",{\"1\":{\"15\":1}}],[\"检查并触发过期任务\",{\"1\":{\"111\":1,\"112\":1,\"117\":1}}],[\"检查是否已经退款成功或正在退款中\",{\"1\":{\"135\":1}}],[\"检查是否是同一个类型\",{\"1\":{\"60\":1}}],[\"检查是否为同一个对象的引用\",{\"1\":{\"60\":1}}],[\"检查\",{\"1\":{\"14\":1}}],[\"来配置的\",{\"1\":{\"148\":1}}],[\"来引用\",{\"1\":{\"28\":1,\"82\":1}}],[\"来使用\",{\"1\":{\"27\":1,\"81\":1}}],[\"来覆盖本地设置\",{\"1\":{\"16\":1}}],[\"来测试\",{\"1\":{\"14\":1}}],[\"来构建读书笔记\",{\"1\":{\"7\":1}}],[\"密码错误或账号不存在\",{\"1\":{\"14\":1}}],[\"指定加载先后关系\",{\"1\":{\"160\":1}}],[\"指标不统一\",{\"1\":{\"99\":1}}],[\"指一个方法与已经存在的方法名称上相同\",{\"1\":{\"57\":1}}],[\"指子类实现了一个与父类在方法声明上完全相同的一个方法\",{\"1\":{\"57\":1}}],[\"指同步服务器出现超时报错\",{\"1\":{\"14\":1}}],[\"指\",{\"1\":{\"14\":1}}],[\"5c84f7b6c354\",{\"1\":{\"98\":1}}],[\"5\",{\"0\":{\"137\":1},\"1\":{\"42\":1,\"66\":1}}],[\"50\",{\"1\":{\"26\":1,\"80\":1}}],[\"530\",{\"1\":{\"14\":1}}],[\"547\",{\"1\":{\"163\":1}}],[\"54\",{\"1\":{\"5\":1}}],[\"youdao\",{\"1\":{\"99\":1,\"142\":6}}],[\"your\",{\"1\":{\"52\":1}}],[\"y\",{\"1\":{\"41\":1,\"42\":2,\"55\":3,\"56\":6,\"60\":15,\"61\":1,\"65\":2,\"66\":7}}],[\"yaml\",{\"1\":{\"16\":1}}],[\"yml\",{\"1\":{\"14\":1}}],[\"yyy\",{\"1\":{\"6\":4}}],[\"erp\",{\"0\":{\"175\":1}}],[\"err\",{\"0\":{\"16\":1},\"1\":{\"16\":1}}],[\"error\",{\"1\":{\"14\":2,\"16\":1,\"68\":2,\"72\":1}}],[\"embeddedvalueresolveraware\",{\"1\":{\"162\":1}}],[\"empty\",{\"1\":{\"146\":1,\"147\":1}}],[\"earlysingletonobjects\",{\"1\":{\"155\":4}}],[\"early\",{\"1\":{\"155\":1}}],[\"earlyproxyreferences\",{\"1\":{\"145\":1}}],[\"eagerly\",{\"1\":{\"153\":2}}],[\"either\",{\"1\":{\"148\":1}}],[\"evaluateproxyinterfaces\",{\"1\":{\"147\":1}}],[\"evaluate\",{\"1\":{\"146\":1}}],[\"eligibleadvisors\",{\"1\":{\"146\":11}}],[\"eligible\",{\"1\":{\"145\":1,\"146\":1}}],[\"else\",{\"1\":{\"26\":1,\"80\":1,\"147\":2,\"148\":1,\"153\":6}}],[\"eckel\",{\"1\":{\"75\":1}}],[\"effect\",{\"1\":{\"147\":1}}],[\"effects\",{\"1\":{\"67\":1}}],[\"effective\",{\"1\":{\"63\":1,\"75\":1}}],[\"e2\",{\"1\":{\"61\":3,\"63\":10}}],[\"e1\",{\"1\":{\"61\":3,\"63\":13}}],[\"equalexample\",{\"1\":{\"60\":4,\"61\":5}}],[\"equals\",{\"0\":{\"60\":1},\"1\":{\"39\":1,\"59\":1,\"60\":16,\"61\":3,\"145\":1}}],[\"e\",{\"1\":{\"56\":2,\"63\":6,\"74\":1,\"126\":8,\"145\":1}}],[\"entity\",{\"1\":{\"163\":11}}],[\"environment\",{\"1\":{\"162\":1}}],[\"environmentaware\",{\"1\":{\"162\":1}}],[\"environments\",{\"1\":{\"67\":2}}],[\"enforced\",{\"1\":{\"147\":1}}],[\"end\",{\"1\":{\"110\":3,\"116\":1,\"153\":1}}],[\"enduml\",{\"1\":{\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1}}],[\"engine\",{\"1\":{\"72\":1}}],[\"enumerate\",{\"1\":{\"67\":1}}],[\"enum\",{\"1\":{\"52\":1}}],[\"ex\",{\"1\":{\"153\":10}}],[\"execute\",{\"1\":{\"114\":1,\"115\":1,\"120\":1,\"163\":32}}],[\"executeasync\",{\"1\":{\"114\":1,\"116\":2}}],[\"executetask\",{\"1\":{\"114\":2,\"116\":2}}],[\"explicitly\",{\"1\":{\"153\":1}}],[\"explicit\",{\"1\":{\"147\":1,\"153\":1}}],[\"expired\",{\"1\":{\"109\":2,\"112\":2}}],[\"expressions\",{\"1\":{\"72\":1}}],[\"exposetargetclass\",{\"1\":{\"147\":1}}],[\"exposure\",{\"1\":{\"67\":1}}],[\"export\",{\"1\":{\"13\":1}}],[\"exception\",{\"1\":{\"68\":3,\"72\":1,\"153\":1,\"163\":2}}],[\"examine\",{\"1\":{\"67\":1}}],[\"example\",{\"1\":{\"62\":2}}],[\"extern\",{\"1\":{\"163\":1}}],[\"external\",{\"1\":{\"67\":1}}],[\"extendadvisors\",{\"1\":{\"146\":2}}],[\"extends\",{\"1\":{\"28\":2,\"30\":1,\"55\":1,\"56\":1,\"82\":2,\"84\":1}}],[\"extensibility\",{\"1\":{\"67\":2}}],[\"exit\",{\"1\":{\"3\":1}}],[\"应该注意的是\",{\"1\":{\"57\":1,\"63\":1}}],[\"应保留默认值\",{\"1\":{\"13\":1}}],[\"应用平台\",{\"1\":{\"132\":1}}],[\"应用\",{\"1\":{\"1\":1,\"94\":1}}],[\"如下是获取单例中\",{\"1\":{\"155\":1}}],[\"如上只是我们初步的思路\",{\"1\":{\"152\":1}}],[\"如影响主流程异常\",{\"1\":{\"137\":1}}],[\"如非阻塞主流程的异常则放入异常队列\",{\"1\":{\"137\":1}}],[\"如第三方支付返回结果异常\",{\"1\":{\"137\":1}}],[\"如图所示\",{\"1\":{\"132\":1}}],[\"如查看订单详情等\",{\"1\":{\"131\":1}}],[\"如库存扣减\",{\"1\":{\"131\":1}}],[\"如支付宝\",{\"1\":{\"131\":1}}],[\"如kafka\",{\"1\":{\"103\":1}}],[\"如抖音订单表\",{\"1\":{\"99\":1}}],[\"如订单同步\",{\"1\":{\"99\":1}}],[\"如售后管理\",{\"1\":{\"99\":1}}],[\"如售后单\",{\"1\":{\"99\":1}}],[\"如mysql\",{\"1\":{\"95\":1}}],[\"如xml\",{\"1\":{\"94\":1}}],[\"如\",{\"1\":{\"13\":1}}],[\"如果获取不到再通过上述步骤获取\",{\"1\":{\"152\":1}}],[\"如果获取不到返回do\",{\"1\":{\"146\":1}}],[\"如果有advisor\",{\"1\":{\"147\":1}}],[\"如果没有获取到\",{\"1\":{\"145\":1}}],[\"如果bean\",{\"1\":{\"153\":1}}],[\"如果bean实例还在创建中\",{\"1\":{\"153\":2}}],[\"如果bean是工厂类\",{\"1\":{\"153\":2}}],[\"如果bean是切面类\",{\"1\":{\"145\":1}}],[\"如果bean是通过targetsource接口获取\",{\"1\":{\"145\":1}}],[\"如果bean能够获取到advisor才需要创建代理\",{\"1\":{\"145\":1}}],[\"如果bean被子类标识为代理\",{\"1\":{\"145\":1}}],[\"如果退款记录不存在或者退款回调已经处理过\",{\"1\":{\"136\":1}}],[\"如果当前订单是首次退款\",{\"1\":{\"135\":1}}],[\"如果当前订单是首次支付\",{\"1\":{\"134\":1}}],[\"如果回调商户系统成功\",{\"1\":{\"135\":1}}],[\"如果回调商户系统失败\",{\"1\":{\"135\":1,\"136\":1}}],[\"如果验证通过\",{\"1\":{\"135\":1,\"136\":1}}],[\"如果验证不通过\",{\"1\":{\"135\":1,\"136\":1}}],[\"如果订单存在且未被处理过\",{\"1\":{\"135\":1,\"136\":1}}],[\"如果订单已经被处理过\",{\"1\":{\"135\":1}}],[\"如果系统压测流量\",{\"1\":{\"134\":1}}],[\"如果\",{\"1\":{\"134\":2,\"153\":1,\"162\":13}}],[\"如果键不存在则设置成功\",{\"1\":{\"134\":1}}],[\"如果支付失败\",{\"1\":{\"131\":2}}],[\"如果支付成功\",{\"1\":{\"131\":2}}],[\"如果需要\",{\"1\":{\"105\":1,\"146\":1}}],[\"如果uuid为空\",{\"1\":{\"105\":1}}],[\"如果未提供\",{\"1\":{\"103\":1}}],[\"如果元素数量非常多的话\",{\"1\":{\"95\":1}}],[\"如果子类重写了父类的中某个方法的实现\",{\"1\":{\"56\":1}}],[\"如果子类的方法重写了父类的方法\",{\"1\":{\"54\":1}}],[\"如果是无参构造函数的实例还可以放在一个缓存中\",{\"1\":{\"152\":1}}],[\"如果是aop基础类\",{\"1\":{\"145\":1}}],[\"如果是偶数的话\",{\"1\":{\"61\":1}}],[\"如果是直接返回\",{\"1\":{\"60\":1}}],[\"如果是包级私有的类或者私有的嵌套类\",{\"1\":{\"54\":1}}],[\"如果是采用\",{\"1\":{\"47\":1}}],[\"如果不是提前暴露的代理\",{\"1\":{\"145\":1}}],[\"如果不是\",{\"1\":{\"60\":1}}],[\"如果不加访问修饰符\",{\"1\":{\"54\":1}}],[\"如果不需要看板娘\",{\"1\":{\"6\":1}}],[\"如果值过于复杂\",{\"1\":{\"52\":1}}],[\"如果一个类没有实现\",{\"1\":{\"63\":1}}],[\"如果一个接口想要添加新的方法\",{\"1\":{\"55\":1}}],[\"如果一个\",{\"1\":{\"45\":1}}],[\"如果在\",{\"1\":{\"162\":2}}],[\"如果在配置文件中通过\",{\"1\":{\"162\":2}}],[\"如果在子类中定义的方法和基类中的一个\",{\"1\":{\"65\":1}}],[\"如果在某个时刻\",{\"1\":{\"54\":1}}],[\"如果在缓冲池之外\",{\"1\":{\"42\":1}}],[\"如果在的话就直接返回缓存池的内容\",{\"1\":{\"42\":1}}],[\"如果在此步骤中未找到\",{\"1\":{\"3\":1}}],[\"如果遇到\",{\"1\":{\"16\":1}}],[\"如果出现\",{\"1\":{\"16\":1}}],[\"如果出现该错误\",{\"1\":{\"14\":1}}],[\"如果错误连续出现\",{\"1\":{\"14\":1}}],[\"如果图片名称为\",{\"1\":{\"8\":1}}],[\"如果网站部署在子页面\",{\"1\":{\"6\":1}}],[\"如果你不需要将网页部署同步到服务器\",{\"1\":{\"14\":1}}],[\"如果你未登录\",{\"1\":{\"11\":1}}],[\"如果你的网站是部署在根路径\",{\"1\":{\"13\":1}}],[\"如果你的网站仅显示文本而不正常加载样式和脚本\",{\"1\":{\"13\":1}}],[\"如果你的项目已经搭建好\",{\"1\":{\"10\":1}}],[\"如果你的仓库链接是\",{\"1\":{\"3\":1}}],[\"如果你没有部署\",{\"1\":{\"7\":1}}],[\"如果你没用\",{\"1\":{\"5\":1}}],[\"如果你想深入了解\",{\"1\":{\"17\":1}}],[\"如果你想在服务器上自建\",{\"1\":{\"6\":1}}],[\"如果你想要修改看板娘模型\",{\"1\":{\"6\":1}}],[\"如果页面样式显示不正常\",{\"1\":{\"3\":1}}],[\"如果设置无误\",{\"1\":{\"3\":1}}],[\"等\",{\"1\":{\"95\":1}}],[\"等预处理命令从而实现条件编译\",{\"1\":{\"73\":1}}],[\"等价的两个对象散列值一定相同\",{\"1\":{\"61\":1}}],[\"等价关系\",{\"1\":{\"60\":1}}],[\"等属性\",{\"1\":{\"26\":1,\"80\":1}}],[\"等待后续处理即可\",{\"1\":{\"137\":1}}],[\"等待后续处理\",{\"1\":{\"137\":1}}],[\"等待\",{\"1\":{\"13\":1}}],[\"等多款知识管理工具来存储我的心得与笔记\",{\"1\":{\"1\":1}}],[\"提交消费偏移量\",{\"1\":{\"121\":2,\"127\":2}}],[\"提交任务\",{\"1\":{\"110\":1,\"111\":1,\"115\":1,\"116\":2}}],[\"提交kafka的消费偏移量\",{\"1\":{\"108\":2}}],[\"提交偏移量\",{\"1\":{\"108\":2}}],[\"提交延时任务\",{\"1\":{\"104\":1}}],[\"提交并推送更改\",{\"1\":{\"13\":1}}],[\"提升团队工作效果\",{\"1\":{\"99\":1}}],[\"提升团队协同效果\",{\"1\":{\"99\":1}}],[\"提升工期就是所见缩减所有关键路径上的工期\",{\"1\":{\"95\":1}}],[\"提供的方法定制\",{\"1\":{\"162\":1}}],[\"提供的接口\",{\"0\":{\"104\":1,\"110\":1,\"115\":1,\"120\":1}}],[\"提供根据状态和过期时间查询任务的方法\",{\"1\":{\"128\":1}}],[\"提供操作数据库中任务实体的方法\",{\"1\":{\"128\":1}}],[\"提供获取指定分片任务的方法\",{\"1\":{\"128\":1}}],[\"提供刷新分片\",{\"1\":{\"128\":1}}],[\"提供分片管理的接口\",{\"1\":{\"124\":1}}],[\"提供了一个接口\",{\"1\":{\"120\":1}}],[\"提供了三个接口\",{\"1\":{\"120\":1}}],[\"提供了三个接口用于分片管理\",{\"1\":{\"119\":1}}],[\"提供了执行任务的接口\",{\"1\":{\"119\":1}}],[\"提供了初始化任务和触发任务的方法\",{\"1\":{\"119\":1}}],[\"提供了分片的有效性检查和分片命中判断的方法\",{\"1\":{\"119\":1}}],[\"提供了根据状态和过期时间查询任务的方法\",{\"1\":{\"119\":1}}],[\"提供了两个接口\",{\"1\":{\"115\":2}}],[\"提供了两个接口用于执行任务和标记任务完成\",{\"1\":{\"114\":1}}],[\"提供了\",{\"1\":{\"114\":1}}],[\"提供了提交任务和获取\",{\"1\":{\"114\":1}}],[\"提供了获取阶段值的方法\",{\"1\":{\"114\":1}}],[\"提供系统稳定性\",{\"1\":{\"99\":1}}],[\"提供准确\",{\"1\":{\"99\":1}}],[\"提供数据支持\",{\"1\":{\"99\":1}}],[\"提供统一的销售数据指标词典和统一的数据出口\",{\"1\":{\"99\":1}}],[\"提供统一的电商售后管理工具\",{\"1\":{\"99\":1}}],[\"提高运营效率\",{\"1\":{\"132\":1}}],[\"提高系统稳定性\",{\"1\":{\"99\":1}}],[\"提高客户满意度\",{\"1\":{\"99\":2}}],[\"提高工作效率\",{\"1\":{\"99\":1}}],[\"提高软件的可重用性\",{\"1\":{\"26\":1,\"80\":1}}],[\"提示\",{\"1\":{\"93\":1,\"95\":1}}],[\"提示你注册或登录\",{\"1\":{\"11\":1}}],[\"其次\",{\"1\":{\"94\":1}}],[\"其它类就不能直接去调用该类实例的\",{\"1\":{\"63\":1}}],[\"其它都相同不算是重载\",{\"1\":{\"57\":1}}],[\"其他配置\",{\"1\":{\"13\":1}}],[\"其中包含根据bean的名字\",{\"1\":{\"151\":1}}],[\"其中\",{\"1\":{\"5\":1,\"62\":1,\"68\":1,\"134\":1,\"135\":2}}],[\"打开\",{\"1\":{\"13\":1}}],[\"找到这些advisor中能够应用于beanclass的advisor\",{\"1\":{\"146\":2}}],[\"找到parse\",{\"1\":{\"144\":1}}],[\"找到两个城市之间的最短路径等等\",{\"1\":{\"95\":1}}],[\"找到配置文件\",{\"1\":{\"13\":1}}],[\"找到页面底部的\",{\"1\":{\"3\":1}}],[\"常量保存在本地内存的元空间\",{\"1\":{\"47\":1}}],[\"常量\",{\"1\":{\"47\":2}}],[\"常见问题\",{\"0\":{\"12\":1}}],[\"常用代码的学习和使用笔记\",{\"1\":{\"2\":1}}],[\"常用应用\",{\"1\":{\"2\":1}}],[\"🤔\",{\"0\":{\"12\":1}}],[\"🧱\",{\"0\":{\"2\":1}}],[\"跳转到应用的控制台\",{\"1\":{\"11\":1}}],[\"会调用\",{\"1\":{\"162\":1}}],[\"会在\",{\"1\":{\"161\":1}}],[\"会放入延时队列\",{\"1\":{\"135\":1,\"136\":1}}],[\"会回调支付中心\",{\"1\":{\"135\":1,\"136\":1}}],[\"会对支付结果进行处理\",{\"1\":{\"131\":1}}],[\"会向服务端发送支付结果通知\",{\"1\":{\"131\":1}}],[\"会引发\",{\"1\":{\"68\":1}}],[\"会产生一个同名的\",{\"1\":{\"67\":1}}],[\"会使用缓存池中的对象\",{\"1\":{\"42\":1}}],[\"会执行实际引用对象所在类的\",{\"1\":{\"28\":1,\"82\":1}}],[\"会基于\",{\"1\":{\"11\":1}}],[\"会自动地将新建的对象放入\",{\"1\":{\"47\":1}}],[\"会自动生成可访问的网页\",{\"1\":{\"9\":1}}],[\"会自动创建一个名为\",{\"1\":{\"3\":1}}],[\"接入退款流程必须接入支付流程\",{\"1\":{\"135\":1}}],[\"接入简单\",{\"1\":{\"135\":1}}],[\"接收并处理三方支付接口的响应结果\",{\"1\":{\"134\":1}}],[\"接收并处理任务\",{\"1\":{\"114\":1}}],[\"接收任务标识并调用\",{\"1\":{\"114\":1}}],[\"接收任务并调用\",{\"1\":{\"114\":1}}],[\"接收外部任务请求\",{\"1\":{\"103\":1}}],[\"接口回调\",{\"1\":{\"135\":1}}],[\"接口定义了获取过期时间的方法\",{\"1\":{\"109\":1,\"112\":1}}],[\"接口又调用了\",{\"1\":{\"63\":1}}],[\"接口只是规定\",{\"1\":{\"63\":1}}],[\"接口也可以有默认的方法实现\",{\"1\":{\"55\":1}}],[\"接口也可以拥有默认的方法实现\",{\"1\":{\"55\":1}}],[\"接口优先于抽象类\",{\"1\":{\"55\":1}}],[\"接口中的\",{\"1\":{\"55\":1}}],[\"接口的方法\",{\"1\":{\"63\":1}}],[\"接口的字段只能是\",{\"1\":{\"55\":1}}],[\"接口的字段默认都是\",{\"1\":{\"55\":1}}],[\"接口的成员只能是\",{\"1\":{\"55\":1}}],[\"接口的成员\",{\"1\":{\"55\":1}}],[\"接口是抽象类的延伸\",{\"1\":{\"55\":1}}],[\"接口\",{\"1\":{\"55\":1,\"63\":1,\"103\":2,\"109\":1,\"112\":1,\"114\":5,\"119\":7,\"128\":1,\"162\":8}}],[\"接着\",{\"1\":{\"11\":1}}],[\"接下来\",{\"1\":{\"3\":1}}],[\"创建bean实例\",{\"1\":{\"153\":3}}],[\"创建代理的方法如下\",{\"1\":{\"147\":1}}],[\"创建代理的方法是postprocessafterinitialization\",{\"1\":{\"145\":1}}],[\"创建代理的入口方法\",{\"0\":{\"147\":1},\"1\":{\"143\":1}}],[\"创建代理\",{\"1\":{\"144\":1,\"145\":1}}],[\"创建支付订单对象\",{\"1\":{\"134\":2}}],[\"创建订单的流程\",{\"1\":{\"131\":1}}],[\"创建订单\",{\"1\":{\"131\":1}}],[\"创建分片\",{\"1\":{\"121\":1,\"127\":1}}],[\"创建或更新分片总数\",{\"1\":{\"119\":2,\"120\":1,\"121\":1,\"125\":1,\"127\":1}}],[\"创建任务\",{\"1\":{\"105\":1}}],[\"创建新的对象\",{\"1\":{\"67\":1}}],[\"创建\",{\"1\":{\"11\":1,\"114\":1,\"116\":2}}],[\"默认是false\",{\"1\":{\"148\":2}}],[\"默认返回\",{\"1\":{\"62\":1}}],[\"默认都是\",{\"1\":{\"55\":1}}],[\"默认为\",{\"1\":{\"17\":1}}],[\"默认\",{\"1\":{\"11\":1}}],[\"默认采用\",{\"1\":{\"5\":1}}],[\"项目下载到本地后\",{\"1\":{\"17\":1}}],[\"项目\",{\"0\":{\"176\":1},\"1\":{\"11\":1},\"2\":{\"140\":1,\"141\":1}}],[\"项目名称\",{\"1\":{\"11\":1}}],[\"项目页面\",{\"1\":{\"3\":1}}],[\"账户进行快捷登录\",{\"1\":{\"11\":1}}],[\"uidgenerator\",{\"1\":{\"105\":3}}],[\"uuid\",{\"1\":{\"103\":1,\"104\":1,\"105\":2,\"114\":1,\"115\":2,\"116\":4}}],[\"upgrades\",{\"1\":{\"67\":1}}],[\"unexpected\",{\"1\":{\"67\":1}}],[\"underscore\",{\"1\":{\"72\":1}}],[\"under\",{\"1\":{\"67\":1}}],[\"using\",{\"1\":{\"56\":1,\"67\":4}}],[\"user\",{\"1\":{\"67\":1,\"163\":46}}],[\"username\",{\"1\":{\"10\":1}}],[\"used\",{\"1\":{\"44\":1,\"67\":1}}],[\"use\",{\"1\":{\"3\":1,\"55\":1,\"67\":4,\"146\":1,\"147\":1}}],[\"u007f\",{\"1\":{\"42\":1}}],[\"u0000\",{\"1\":{\"42\":1}}],[\"uml\",{\"1\":{\"36\":2,\"90\":2}}],[\"url=https\",{\"1\":{\"11\":1}}],[\"污染影响\",{\"1\":{\"11\":1}}],[\"域名会发生\",{\"1\":{\"15\":1}}],[\"域名已受\",{\"1\":{\"11\":1}}],[\"域名需要备案\",{\"1\":{\"9\":1}}],[\"更灵活的支付结算服务\",{\"1\":{\"129\":1}}],[\"更新已有退款订单信息\",{\"1\":{\"135\":1}}],[\"更新已有订单信息\",{\"1\":{\"134\":1}}],[\"更新当前退款订单的退款状态\",{\"1\":{\"135\":1}}],[\"更新当前支付订单的状态\",{\"1\":{\"134\":1}}],[\"更新分片\",{\"1\":{\"124\":1}}],[\"更新和填充\",{\"1\":{\"122\":1,\"128\":1}}],[\"更新提交偏移量\",{\"1\":{\"109\":1,\"112\":1}}],[\"更新任务的状态为\",{\"1\":{\"108\":1}}],[\"更多语法及使用请参考\",{\"1\":{\"29\":1,\"83\":1}}],[\"更快\",{\"1\":{\"11\":1}}],[\"更重要的是\",{\"1\":{\"1\":1}}],[\"就从三级缓存singletonfactory\",{\"1\":{\"155\":1}}],[\"就再从二级缓存earlysingletonobjects中获取\",{\"1\":{\"155\":1}}],[\"就会抛出\",{\"1\":{\"63\":1}}],[\"就会创建对应的运行时常量池\",{\"1\":{\"47\":1}}],[\"就会将修改推送到服务器的\",{\"1\":{\"10\":1}}],[\"就可以直接使用缓冲池中的对象\",{\"1\":{\"42\":1}}],[\"就是利用它实现的\",{\"1\":{\"162\":1}}],[\"就是先判断值是否在缓存池中\",{\"1\":{\"42\":1}}],[\"就是一种\",{\"1\":{\"27\":1,\"81\":1}}],[\"就是你的\",{\"1\":{\"3\":1}}],[\"每隔一定时间调用\",{\"1\":{\"111\":1}}],[\"每隔一定时间\",{\"1\":{\"110\":1}}],[\"每隔一定时间拨动时间轮\",{\"1\":{\"109\":1,\"112\":1}}],[\"每个节点只有一个后续节点\",{\"1\":{\"95\":1}}],[\"每个节点只有一个前驱节点\",{\"1\":{\"95\":1}}],[\"每个类都有一个\",{\"1\":{\"67\":1}}],[\"每创建一个实例就会产生一个实例变量\",{\"1\":{\"66\":1}}],[\"每次客户端请求\",{\"1\":{\"161\":1}}],[\"每次改动牵一发而动全身\",{\"1\":{\"99\":1}}],[\"每次都会新建一个对象\",{\"1\":{\"42\":1}}],[\"每次新增文章都会在上一篇的基础上递减\",{\"1\":{\"5\":1}}],[\"每当文件发生变化时\",{\"1\":{\"10\":1}}],[\"feignclient\",{\"1\":{\"114\":1,\"119\":1,\"128\":1}}],[\"fetchrandomid\",{\"1\":{\"105\":2}}],[\"features\",{\"1\":{\"67\":1}}],[\"freezeproxy\",{\"1\":{\"147\":1}}],[\"frequently\",{\"1\":{\"67\":1}}],[\"frolyd\",{\"1\":{\"95\":2}}],[\"from\",{\"1\":{\"66\":4,\"67\":1,\"153\":1,\"163\":1}}],[\"framework组件的典型应用场景和基于这个场景设计出的简单案例\",{\"1\":{\"94\":1}}],[\"framework组件是如何配合工作的呢\",{\"1\":{\"94\":1}}],[\"framework的组件\",{\"1\":{\"94\":1}}],[\"framework的整体认知\",{\"1\":{\"94\":1}}],[\"fully\",{\"1\":{\"67\":1}}],[\"fun3\",{\"1\":{\"55\":1}}],[\"func2\",{\"1\":{\"55\":4,\"66\":1}}],[\"func1\",{\"1\":{\"55\":8,\"66\":2}}],[\"func\",{\"1\":{\"49\":4,\"56\":8}}],[\"f\",{\"1\":{\"50\":2,\"95\":3,\"126\":12}}],[\"factories\",{\"1\":{\"155\":1}}],[\"factory\",{\"1\":{\"147\":1,\"163\":7}}],[\"facility\",{\"1\":{\"147\":1}}],[\"fallback\",{\"1\":{\"114\":1,\"119\":1}}],[\"false\",{\"1\":{\"42\":3,\"47\":1,\"60\":7,\"145\":3,\"153\":4}}],[\"failed\",{\"0\":{\"15\":1},\"1\":{\"3\":1,\"8\":1,\"14\":1,\"15\":1}}],[\"flag\",{\"1\":{\"147\":1}}],[\"flushtobin\",{\"1\":{\"119\":1,\"121\":1,\"127\":1}}],[\"flushtoconsumer\",{\"1\":{\"119\":1,\"121\":1,\"127\":1}}],[\"flushtotrigger\",{\"1\":{\"119\":1,\"121\":1,\"127\":1}}],[\"flush\",{\"1\":{\"119\":1,\"121\":1,\"127\":1}}],[\"flowchart\",{\"1\":{\"126\":1}}],[\"flowing\",{\"1\":{\"98\":1}}],[\"float\",{\"0\":{\"50\":1},\"1\":{\"39\":1,\"41\":1,\"50\":4}}],[\"fly\",{\"1\":{\"31\":2,\"85\":2}}],[\"following\",{\"1\":{\"67\":1}}],[\"forname\",{\"1\":{\"67\":1}}],[\"for\",{\"1\":{\"28\":1,\"42\":1,\"44\":1,\"55\":1,\"63\":5,\"67\":1,\"69\":1,\"72\":2,\"74\":1,\"82\":1,\"145\":2,\"146\":4,\"147\":8,\"148\":1,\"153\":5,\"163\":10}}],[\"found\",{\"1\":{\"16\":1,\"52\":1,\"153\":1,\"166\":1}}],[\"fill\",{\"1\":{\"120\":1}}],[\"fillshards\",{\"1\":{\"119\":1,\"121\":1,\"127\":1}}],[\"filezilla\",{\"1\":{\"14\":1}}],[\"files\",{\"1\":{\"14\":1}}],[\"first\",{\"1\":{\"95\":2}}],[\"field\",{\"1\":{\"66\":3,\"67\":2}}],[\"fields\",{\"1\":{\"55\":1,\"67\":1}}],[\"finally\",{\"1\":{\"153\":3}}],[\"finalize\",{\"1\":{\"59\":1}}],[\"final\",{\"0\":{\"65\":1},\"1\":{\"39\":1,\"42\":3,\"44\":4,\"55\":2,\"59\":6,\"65\":6,\"155\":3}}],[\"findadvisorbeans\",{\"1\":{\"146\":1}}],[\"findadvisorsthatcanapply\",{\"1\":{\"146\":2}}],[\"findcandidateadvisors\",{\"1\":{\"146\":3}}],[\"findeligibleadvisors方法如下\",{\"1\":{\"146\":1}}],[\"findeligibleadvisors\",{\"1\":{\"146\":2}}],[\"find\",{\"1\":{\"16\":1,\"114\":1,\"116\":2,\"146\":3}}],[\"ftperror\",{\"1\":{\"14\":1}}],[\"ftp\",{\"1\":{\"10\":5,\"14\":2}}],[\"同样不适合进行查找\",{\"1\":{\"95\":1}}],[\"同时我们也总结了spring\",{\"1\":{\"144\":1}}],[\"同时提高支付和退款的处理效率\",{\"1\":{\"129\":1}}],[\"同时它的设计依赖散列函数的设计\",{\"1\":{\"95\":1}}],[\"同时以此发散了一些aop相关知识点\",{\"1\":{\"94\":1}}],[\"同时以此发散了一些ioc相关知识点\",{\"1\":{\"94\":1}}],[\"同时对ioc和aop进行案例使用分析\",{\"1\":{\"94\":1}}],[\"同时不会影响那些寻求干货文章的用户体验\",{\"1\":{\"5\":1}}],[\"同步执行任务\",{\"1\":{\"114\":1}}],[\"同步电商渠道物流信息等\",{\"1\":{\"99\":1}}],[\"同步服务器报错\",{\"0\":{\"14\":1}}],[\"同步到\",{\"1\":{\"10\":1}}],[\"同步到服务器时发生了错误\",{\"1\":{\"10\":1}}],[\"同步到服务器\",{\"0\":{\"10\":1}}],[\"国外服务可能会出现断网\",{\"1\":{\"9\":1}}],[\"viewpage\",{\"1\":{\"99\":1,\"142\":5}}],[\"virtual\",{\"1\":{\"67\":1}}],[\"via\",{\"1\":{\"67\":1}}],[\"visualizations在新窗口打开\",{\"1\":{\"96\":1}}],[\"visual\",{\"1\":{\"67\":2}}],[\"vary\",{\"1\":{\"147\":1}}],[\"variable\",{\"1\":{\"55\":1,\"65\":1}}],[\"values\",{\"1\":{\"42\":4}}],[\"value\",{\"1\":{\"42\":3,\"44\":4,\"49\":1,\"63\":6,\"65\":1,\"95\":1}}],[\"valueof\",{\"1\":{\"42\":7,\"54\":1,\"153\":1}}],[\"vm\",{\"1\":{\"42\":1}}],[\"ve\",{\"1\":{\"147\":1}}],[\"vehicle\",{\"1\":{\"35\":3,\"89\":3}}],[\"vehical\",{\"1\":{\"30\":3,\"84\":3}}],[\"very\",{\"1\":{\"26\":1,\"80\":1}}],[\"vercel\",{\"0\":{\"11\":1},\"1\":{\"9\":1,\"11\":10}}],[\"void\",{\"1\":{\"26\":1,\"28\":4,\"49\":5,\"54\":1,\"55\":7,\"56\":2,\"59\":6,\"63\":3,\"66\":6,\"69\":1,\"80\":1,\"82\":4,\"163\":11}}],[\"vuepress2\",{\"1\":{\"5\":1}}],[\"vuepress\",{\"1\":{\"1\":2,\"5\":6,\"6\":4,\"7\":1,\"8\":2,\"13\":1,\"15\":1,\"99\":1}}],[\"近期也发生过下架风波\",{\"1\":{\"9\":1}}],[\"免费版无法自定义域名\",{\"1\":{\"9\":1}}],[\"有两处比较重要的匿名内部类实现了该接口\",{\"1\":{\"155\":1}}],[\"有两个子类\",{\"1\":{\"28\":1,\"82\":1}}],[\"有助于简化业务流程\",{\"1\":{\"129\":1}}],[\"有助于实现支付流程的标准化\",{\"1\":{\"129\":1}}],[\"有一笔支付请求响应超时了\",{\"1\":{\"128\":1}}],[\"有依赖关系\",{\"1\":{\"95\":1}}],[\"有向无环图\",{\"1\":{\"95\":1}}],[\"有哪些主要的组件和核心功能呢\",{\"1\":{\"94\":1}}],[\"有永久代\",{\"1\":{\"47\":2}}],[\"有效地调节性能\",{\"1\":{\"26\":1,\"80\":1}}],[\"有很多限制\",{\"1\":{\"9\":1}}],[\"有评论插件的相关配置\",{\"1\":{\"5\":1}}],[\"但一般情况下\",{\"1\":{\"161\":1}}],[\"但无论何种退款\",{\"1\":{\"135\":1}}],[\"但不仅限于字符串\",{\"1\":{\"95\":1}}],[\"但计算机的内存是有限的\",{\"1\":{\"95\":1}}],[\"但可读性大大降低\",{\"1\":{\"66\":1}}],[\"但可以通过对象对外提供的接口来访问该对象\",{\"1\":{\"26\":1,\"80\":1}}],[\"但字符串常量池\",{\"1\":{\"47\":1}}],[\"但已经逐步\",{\"1\":{\"47\":1}}],[\"但\",{\"1\":{\"11\":1}}],[\"但出现了红色的叉叉提示\",{\"1\":{\"10\":1}}],[\"但是的在调用构造方法之前还未将其放入三级缓存之中\",{\"1\":{\"157\":1}}],[\"但是avl树的旋转过程非常麻烦\",{\"1\":{\"95\":1}}],[\"但是不可用\",{\"1\":{\"73\":1}}],[\"但是不能继承多个抽象类\",{\"1\":{\"55\":1}}],[\"但是被引用的对象本身是可以修改的\",{\"1\":{\"65\":1}}],[\"但是因为\",{\"1\":{\"61\":1}}],[\"但是散列值相同的两个对象不一定等价\",{\"1\":{\"61\":1}}],[\"但是参数类型\",{\"1\":{\"57\":1}}],[\"但是也有例外\",{\"1\":{\"54\":1}}],[\"但是这是语言内置支持的操作\",{\"1\":{\"73\":1}}],[\"但是这个访问修饰符对于类没有意义\",{\"1\":{\"54\":1}}],[\"但是这些独立的模块却有可能是可用的\",{\"1\":{\"26\":1,\"80\":1}}],[\"但是使用\",{\"1\":{\"51\":1}}],[\"但是如果在方法中改变对象的字段值会改变原对象该字段值\",{\"1\":{\"49\":1}}],[\"但是一个学生只属于一个学校\",{\"1\":{\"34\":1,\"88\":1}}],[\"但是公司和员工就属于聚合关系了\",{\"1\":{\"33\":1,\"87\":1}}],[\"但是整体和部分不是强依赖的\",{\"1\":{\"32\":1,\"86\":1}}],[\"但是\",{\"1\":{\"9\":1,\"26\":1,\"73\":1,\"80\":1}}],[\"但由于国内访问\",{\"1\":{\"9\":1}}],[\"但网页链接路径会是\",{\"1\":{\"5\":1}}],[\"后处理器\",{\"1\":{\"162\":1}}],[\"后来人们提出了二分查找\",{\"1\":{\"95\":1}}],[\"后面的数值为散列码的无符号十六进制表示\",{\"1\":{\"62\":1}}],[\"后\",{\"1\":{\"9\":1}}],[\"后台会自动抓取路径下的\",{\"1\":{\"5\":1}}],[\"🖥️\",{\"0\":{\"9\":1}}],[\"🔣\",{\"0\":{\"4\":1}}],[\"本系统采用\",{\"1\":{\"135\":1}}],[\"本系列主要介绍spring框架整体架构\",{\"1\":{\"93\":1}}],[\"本章节中有部分图源于这位作者\",{\"1\":{\"96\":1}}],[\"本质上是一个concurrenthashmap<string\",{\"1\":{\"94\":1,\"149\":1,\"150\":1,\"152\":1}}],[\"本质上是将对象的地址以值的方式传递到形参中\",{\"1\":{\"49\":1}}],[\"本节将在此基础上进一步解读aop的含义以及aop的使用方式\",{\"1\":{\"94\":1}}],[\"本节将在此基础上进一步解读ioc的含义以及ioc的使用方式\",{\"1\":{\"94\":1}}],[\"本文接着介绍postprocessafterinitialization的方法\",{\"1\":{\"144\":1}}],[\"本文是第二篇\",{\"1\":{\"94\":1}}],[\"本文是第一篇\",{\"1\":{\"94\":1}}],[\"本文在此基础上继续介绍\",{\"1\":{\"94\":1,\"143\":1}}],[\"本文将帮助你站在设计者的角度去看ioc最顶层的结构设计\",{\"1\":{\"94\":1}}],[\"本文通过这几个问题帮助你构筑spring和spring\",{\"1\":{\"94\":1}}],[\"本文主要研究如何从ioc容器已有的beandefinition信息\",{\"1\":{\"150\":1}}],[\"本文主要是springaop\",{\"1\":{\"94\":1}}],[\"本文主要介绍\",{\"1\":{\"95\":1}}],[\"本文主要介绍cglib动态代理的案例和springaop实现的原理\",{\"1\":{\"94\":1}}],[\"本文主要介绍spring\",{\"1\":{\"94\":1}}],[\"本文主要介绍springmvc的请求流程和基础案例的编写和运行\",{\"1\":{\"94\":1}}],[\"本文主要介绍java\",{\"1\":{\"24\":1,\"78\":1}}],[\"本文主要承接上文\",{\"1\":{\"94\":1}}],[\"本文主要对java基础知识点进行总结\",{\"1\":{\"39\":1}}],[\"本地服务运行后\",{\"1\":{\"17\":1}}],[\"本地运行\",{\"0\":{\"17\":1}}],[\"本地图片必须保存在\",{\"1\":{\"8\":1}}],[\"本地图片引用\",{\"0\":{\"8\":1}}],[\"本方法也适用于将附件部署到网站上\",{\"1\":{\"8\":1}}],[\"mybeanpostprocessor\",{\"1\":{\"163\":3}}],[\"mybeanfactorypostprocessor\",{\"1\":{\"163\":2}}],[\"myinstantiationawarebeanpostprocessor\",{\"1\":{\"163\":4}}],[\"mysql\",{\"1\":{\"67\":1}}],[\"mbd\",{\"1\":{\"153\":14,\"155\":1}}],[\"mch\",{\"1\":{\"128\":1}}],[\"mjshbdij\",{\"1\":{\"99\":1}}],[\"mvc\",{\"1\":{\"114\":1,\"119\":1}}],[\"mvc的规范推出的web开发框架\",{\"1\":{\"94\":1}}],[\"mvc是spring在spring\",{\"1\":{\"94\":1}}],[\"multiple\",{\"1\":{\"72\":1}}],[\"must\",{\"1\":{\"42\":1,\"147\":1}}],[\"music\",{\"1\":{\"28\":1,\"82\":1}}],[\"message\",{\"1\":{\"153\":1}}],[\"metadata\",{\"1\":{\"145\":1}}],[\"method指定的方法\",{\"1\":{\"162\":1}}],[\"method和destroy\",{\"1\":{\"162\":1}}],[\"methods\",{\"1\":{\"67\":1,\"72\":1}}],[\"method\",{\"1\":{\"67\":2,\"153\":1,\"162\":2}}],[\"merchant\",{\"0\":{\"139\":1}}],[\"merge\",{\"1\":{\"109\":1,\"112\":1}}],[\"members\",{\"1\":{\"67\":2}}],[\"m\",{\"1\":{\"42\":4,\"75\":2}}],[\"missing\",{\"1\":{\"153\":1}}],[\"misc\",{\"1\":{\"42\":1}}],[\"might\",{\"1\":{\"55\":1,\"153\":1}}],[\"mindmaps\",{\"1\":{\"142\":1}}],[\"mind\",{\"1\":{\"67\":1}}],[\"min\",{\"1\":{\"42\":1}}],[\"mockcallbackgateway\",{\"1\":{\"134\":1}}],[\"mooncakeexecutor\",{\"1\":{\"114\":1,\"116\":1}}],[\"mooncake\",{\"0\":{\"101\":1,\"109\":1,\"113\":1,\"118\":1,\"123\":1},\"1\":{\"106\":3,\"114\":1,\"119\":1,\"122\":1,\"124\":1,\"125\":1,\"128\":1}}],[\"modifiers\",{\"1\":{\"66\":1}}],[\"modifier\",{\"1\":{\"55\":4}}],[\"module\",{\"0\":{\"16\":1},\"1\":{\"16\":2}}],[\"move\",{\"1\":{\"35\":3,\"89\":3}}],[\"movebehavior\",{\"1\":{\"31\":3,\"35\":4,\"85\":3,\"89\":4}}],[\"mouse\",{\"1\":{\"32\":2,\"86\":2}}],[\"more\",{\"1\":{\"26\":1,\"80\":1}}],[\"map<string\",{\"1\":{\"155\":3}}],[\"markbeanascreated\",{\"1\":{\"153\":1}}],[\"marktaskdone\",{\"1\":{\"103\":1,\"114\":1,\"116\":4}}],[\"markdown\",{\"1\":{\"8\":1,\"18\":1,\"21\":1}}],[\"machine\",{\"1\":{\"67\":1}}],[\"making\",{\"1\":{\"67\":1}}],[\"make\",{\"1\":{\"67\":2}}],[\"maximum\",{\"1\":{\"42\":1}}],[\"max\",{\"1\":{\"42\":3}}],[\"math\",{\"1\":{\"42\":2}}],[\"may\",{\"1\":{\"42\":1,\"67\":5,\"146\":1,\"147\":1}}],[\"manually\",{\"1\":{\"153\":1}}],[\"management\",{\"1\":{\"99\":1}}],[\"manager\",{\"1\":{\"67\":1}}],[\"man\",{\"1\":{\"26\":1,\"80\":1}}],[\"main\",{\"1\":{\"14\":1,\"28\":2,\"49\":2,\"66\":3,\"73\":1,\"82\":2,\"163\":20}}],[\"md\",{\"1\":{\"5\":4}}],[\"则调用该初始化方法\",{\"1\":{\"162\":1}}],[\"则调用postprocessafterinstantiation方法和postprocessproperties\",{\"1\":{\"162\":1}}],[\"则调用postprocessbeforeinstantiation方法\",{\"1\":{\"162\":1}}],[\"则调用postprocessbeanfactory方法\",{\"1\":{\"162\":1}}],[\"则\",{\"1\":{\"162\":11}}],[\"则经过singletonfactory\",{\"1\":{\"155\":1}}],[\"则尝试从earlysingletonobjects\",{\"1\":{\"155\":1}}],[\"则直接抛出异常\",{\"1\":{\"153\":2}}],[\"则直接返回处理结果\",{\"1\":{\"135\":1,\"136\":1}}],[\"则说明需要增强\",{\"1\":{\"147\":1}}],[\"则使用配置的拦截器创建一个代理\",{\"1\":{\"145\":1}}],[\"则抛出由商户处理\",{\"1\":{\"137\":1}}],[\"则更新支付订单表记录\",{\"1\":{\"136\":1}}],[\"则更新订单状态\",{\"1\":{\"135\":1}}],[\"则将该\",{\"1\":{\"162\":2}}],[\"则将退款订单信息插入数据库\",{\"1\":{\"135\":1}}],[\"则将订单信息插入数据库\",{\"1\":{\"134\":1}}],[\"则修改支付订单表中支付回调状态\",{\"1\":{\"135\":1}}],[\"则返回处理失败\",{\"1\":{\"135\":1,\"136\":1}}],[\"则校验商户信息\",{\"1\":{\"135\":1,\"136\":1}}],[\"则依赖于渠道服务配置文件\",{\"1\":{\"99\":1}}],[\"则右子树上所有结点的值均大于它的根结点的值\",{\"1\":{\"95\":1}}],[\"则左子树上所有结点的值均小于它的根结点的值\",{\"1\":{\"95\":1}}],[\"则可以使用以下链接来引用该图片\",{\"1\":{\"8\":1}}],[\"则需将子页面路径\",{\"1\":{\"6\":1}}],[\"错误仅在本地运行\",{\"1\":{\"15\":1}}],[\"错误\",{\"1\":{\"8\":1}}],[\"或则在a的populatebean过程当中依赖了b对象\",{\"1\":{\"155\":1}}],[\"或者有执行\",{\"1\":{\"162\":2}}],[\"或者订单不存在\",{\"1\":{\"135\":1}}],[\"或者是具有下列性质的二叉树\",{\"1\":{\"95\":1}}],[\"或者\",{\"1\":{\"55\":1}}],[\"或者删除主目录下的\",{\"1\":{\"16\":1}}],[\"或将\",{\"1\":{\"11\":1}}],[\"或\",{\"1\":{\"9\":1,\"95\":1}}],[\"或使用\",{\"1\":{\"8\":1}}],[\"或不需统计阅读量和评论功能\",{\"1\":{\"7\":1}}],[\"或尝试修改仓库中的任意文件以手动启动\",{\"1\":{\"3\":1}}],[\"不再管理该\",{\"1\":{\"162\":1}}],[\"不需要创建代理\",{\"1\":{\"146\":1}}],[\"不受内部服务限制\",{\"1\":{\"135\":1}}],[\"不足位数前面补零\",{\"1\":{\"134\":1}}],[\"不同topic的处理逻辑\",{\"0\":{\"108\":1}}],[\"不同的虚拟机对虚拟机的规范\",{\"1\":{\"47\":1}}],[\"不要盯着代码\",{\"1\":{\"95\":1}}],[\"不要忘记点击\",{\"1\":{\"3\":1}}],[\"不属于操作符重载\",{\"1\":{\"73\":1}}],[\"不存在也可以加载进来\",{\"1\":{\"67\":1}}],[\"不支持条件编译\",{\"1\":{\"73\":1}}],[\"不支持操作符重载\",{\"1\":{\"73\":1}}],[\"不支持多重继承\",{\"1\":{\"73\":1}}],[\"不支持\",{\"1\":{\"52\":1}}],[\"不能重复提交请求\",{\"1\":{\"135\":1}}],[\"不能隐式执行向下转型\",{\"1\":{\"50\":1}}],[\"不能直接将\",{\"1\":{\"50\":1}}],[\"不能使用相对链接\",{\"1\":{\"7\":1}}],[\"不是线程安全的\",{\"1\":{\"46\":1}}],[\"不可变性天生具备线程安全\",{\"1\":{\"45\":1}}],[\"不可变性可以保证参数不可变\",{\"1\":{\"45\":1}}],[\"不可变的特性可以使得\",{\"1\":{\"45\":1}}],[\"不可变的好处\",{\"0\":{\"45\":1},\"1\":{\"39\":1}}],[\"不可变\",{\"1\":{\"44\":1,\"46\":2}}],[\"完成\",{\"1\":{\"7\":1}}],[\"完成设置后\",{\"1\":{\"3\":1}}],[\"因而尝试get\",{\"1\":{\"155\":1}}],[\"因为spring不会缓存\",{\"1\":{\"158\":1}}],[\"因为b拿到了a的对象引用\",{\"1\":{\"155\":1}}],[\"因为a经过objectfactory将本身提早曝光了\",{\"1\":{\"155\":1}}],[\"因为与\",{\"1\":{\"61\":1}}],[\"因为它是一个奇素数\",{\"1\":{\"61\":1}}],[\"因为接口没有抽象类严格的类层次结构要求\",{\"1\":{\"55\":1}}],[\"因为字面量\",{\"1\":{\"51\":1}}],[\"因为这么做的话就失去了对这个字段修改行为的控制\",{\"1\":{\"54\":1}}],[\"因为这会使得精度降低\",{\"1\":{\"50\":1}}],[\"因为这是向下转型\",{\"1\":{\"50\":1}}],[\"因为改变的是同一个地址指向的内容\",{\"1\":{\"49\":1}}],[\"因为\",{\"1\":{\"45\":1}}],[\"因为公司没了员工还在\",{\"1\":{\"33\":1,\"87\":1}}],[\"因为干货文章的排序始终保持在最上方\",{\"1\":{\"5\":1}}],[\"因此不能解决循环依赖\",{\"1\":{\"159\":1}}],[\"因此不能解决\",{\"1\":{\"157\":1}}],[\"因此不能隐式地将\",{\"1\":{\"51\":1}}],[\"因此后续的依赖调用构造方法的时候并不能从三级缓存中获取到依赖的bean\",{\"1\":{\"157\":1}}],[\"因此b如今hold住的a对象完成了初始化\",{\"1\":{\"155\":1}}],[\"因此b可以经过objectfactory\",{\"1\":{\"155\":1}}],[\"因此走create流程\",{\"1\":{\"155\":1}}],[\"因此spring此时将这个对象提早曝光出来让你们认识\",{\"1\":{\"155\":1}}],[\"因此是比较合适的\",{\"1\":{\"95\":1}}],[\"因此是线程安全的\",{\"1\":{\"46\":1}}],[\"因此插入和删除很慢\",{\"1\":{\"95\":1}}],[\"因此这两个对象的散列值是不同的\",{\"1\":{\"61\":1}}],[\"因此这是一种多对一的关系\",{\"1\":{\"34\":1,\"88\":1}}],[\"因此访问权限应当尽可能地使每个类或者成员不被外界访问\",{\"1\":{\"54\":1}}],[\"因此在方法中改变指针引用的对象\",{\"1\":{\"49\":1}}],[\"因此只需要进行一次计算\",{\"1\":{\"45\":1}}],[\"因此可以保证\",{\"1\":{\"44\":1}}],[\"因此它不可被继承\",{\"1\":{\"44\":1}}],[\"因此多个\",{\"1\":{\"42\":1}}],[\"因此也可以用\",{\"1\":{\"34\":1,\"88\":1}}],[\"因此\",{\"1\":{\"7\":1,\"9\":1,\"27\":1,\"47\":1,\"81\":1,\"95\":1}}],[\"juejin\",{\"1\":{\"165\":1}}],[\"just\",{\"1\":{\"147\":1}}],[\"july\",{\"1\":{\"97\":1}}],[\"july结构之法\",{\"1\":{\"97\":1}}],[\"jparepository\",{\"1\":{\"119\":1}}],[\"jediscluster\",{\"1\":{\"114\":2}}],[\"jianshu\",{\"1\":{\"98\":1}}],[\"jdbc\",{\"1\":{\"67\":1}}],[\"jdkdynamicaopproxy\",{\"1\":{\"148\":2}}],[\"jdk或cglib\",{\"0\":{\"148\":1},\"1\":{\"143\":1}}],[\"jdk动态代理的案例和实现部分\",{\"1\":{\"94\":1}}],[\"jdk1\",{\"1\":{\"47\":3}}],[\"jdk版本\",{\"1\":{\"47\":1}}],[\"jdk\",{\"0\":{\"74\":1},\"1\":{\"39\":1,\"74\":1,\"147\":1}}],[\"jvm\",{\"1\":{\"67\":1,\"68\":1,\"74\":1}}],[\"jls7\",{\"1\":{\"42\":1}}],[\"j++\",{\"1\":{\"42\":1}}],[\"j\",{\"1\":{\"42\":1,\"75\":1}}],[\"jre\",{\"0\":{\"74\":1},\"1\":{\"39\":1,\"74\":4}}],[\"java在新窗口打开\",{\"1\":{\"96\":1}}],[\"java配置和注解方式的差异\",{\"1\":{\"94\":1}}],[\"javac\",{\"1\":{\"74\":1}}],[\"javascript\",{\"1\":{\"72\":1}}],[\"java实现oop\",{\"1\":{\"36\":1,\"90\":1}}],[\"javaoop基础知识总结\",{\"1\":{\"36\":1,\"90\":1}}],[\"java\",{\"0\":{\"24\":1,\"39\":1,\"72\":1,\"73\":1,\"78\":1,\"168\":1,\"169\":1,\"170\":1},\"1\":{\"24\":1,\"30\":1,\"31\":1,\"36\":2,\"39\":3,\"42\":2,\"44\":1,\"45\":1,\"49\":2,\"50\":1,\"51\":1,\"52\":2,\"54\":1,\"55\":4,\"63\":3,\"67\":4,\"68\":1,\"69\":1,\"70\":2,\"72\":6,\"73\":10,\"74\":2,\"75\":2,\"78\":1,\"84\":1,\"85\":1,\"90\":2,\"96\":1},\"2\":{\"37\":1,\"38\":1,\"76\":1,\"77\":1,\"91\":1,\"92\":1}}],[\"json\",{\"1\":{\"16\":2}}],[\"js\",{\"1\":{\"6\":3}}],[\"jobs\",{\"1\":{\"3\":2,\"14\":1}}],[\"切换人物服饰和玩打飞机游戏\",{\"1\":{\"6\":1}}],[\"lazy注解解决\",{\"1\":{\"160\":1}}],[\"lazy注解\",{\"1\":{\"160\":1}}],[\"lambda\",{\"1\":{\"72\":1}}],[\"languages\",{\"1\":{\"72\":1}}],[\"lang\",{\"1\":{\"42\":1,\"63\":2,\"67\":2,\"73\":1}}],[\"l\",{\"1\":{\"55\":1}}],[\"let\",{\"1\":{\"147\":1}}],[\"level\",{\"1\":{\"67\":1,\"147\":1}}],[\"length\",{\"1\":{\"42\":1,\"63\":7}}],[\"learndata\",{\"0\":{\"3\":1,\"4\":1,\"17\":1},\"1\":{\"1\":2,\"3\":4,\"5\":2,\"6\":1,\"7\":1,\"9\":1,\"11\":3,\"13\":3,\"17\":3}}],[\"log\",{\"1\":{\"163\":19}}],[\"login\",{\"1\":{\"14\":1}}],[\"lombok\",{\"1\":{\"163\":2}}],[\"loop\",{\"1\":{\"110\":3,\"116\":1}}],[\"loader\",{\"1\":{\"147\":3}}],[\"loaded\",{\"1\":{\"147\":1}}],[\"load\",{\"1\":{\"109\":2,\"110\":3,\"112\":2}}],[\"low\",{\"1\":{\"42\":6,\"147\":1}}],[\"long\",{\"1\":{\"41\":1,\"52\":4,\"59\":2}}],[\"locally\",{\"1\":{\"147\":1}}],[\"localhost\",{\"1\":{\"15\":1,\"17\":1}}],[\"lock\",{\"1\":{\"16\":1}}],[\"list\",{\"1\":{\"146\":4}}],[\"list<advisor>\",{\"1\":{\"146\":8}}],[\"list<instrument>\",{\"1\":{\"28\":1,\"82\":1}}],[\"literals\",{\"1\":{\"72\":2}}],[\"like\",{\"1\":{\"55\":1}}],[\"link\",{\"1\":{\"7\":1}}],[\"live2d\",{\"1\":{\"6\":11}}],[\"版本开始\",{\"1\":{\"5\":1}}],[\"用一些工具和别人梳理的结果帮助自己构建知识体系等\",{\"1\":{\"95\":1}}],[\"用于实现整个系统功能的技术架构\",{\"1\":{\"132\":1}}],[\"用于和三方支付进行对接及管理\",{\"1\":{\"132\":1}}],[\"用于后续的支付流程\",{\"1\":{\"131\":1}}],[\"用于操作数据库中的任务实体\",{\"1\":{\"119\":1}}],[\"用于消费\",{\"1\":{\"119\":1}}],[\"用于处理服务调用失败的情况\",{\"1\":{\"114\":1,\"119\":1}}],[\"用于存储\",{\"1\":{\"114\":1}}],[\"用于自定义\",{\"1\":{\"114\":1}}],[\"用于触发任务的topic\",{\"1\":{\"106\":1}}],[\"用于持久化任务的topic\",{\"1\":{\"106\":1}}],[\"用于将任务发送到相应的处理器或持久化存储\",{\"1\":{\"103\":1}}],[\"用于一些工具在编译\",{\"1\":{\"70\":1}}],[\"用于修饰成员\",{\"1\":{\"54\":1}}],[\"用做\",{\"1\":{\"45\":1}}],[\"用来表示\",{\"1\":{\"68\":1}}],[\"用来实现一个接口\",{\"1\":{\"31\":1,\"85\":1}}],[\"用来描述继承关系\",{\"1\":{\"30\":1,\"84\":1}}],[\"用来存放草稿\",{\"1\":{\"5\":1}}],[\"用户支付成功后\",{\"1\":{\"137\":1}}],[\"用户支付完成后\",{\"1\":{\"131\":1}}],[\"用户在支付下单页\",{\"1\":{\"131\":1}}],[\"用户信息\",{\"1\":{\"131\":1}}],[\"用户从客户端下单\",{\"1\":{\"131\":1}}],[\"用户无需知道对象内部的细节\",{\"1\":{\"26\":1,\"80\":1}}],[\"用户名\",{\"1\":{\"3\":1}}],[\"上图只是给了几个例子\",{\"1\":{\"162\":1}}],[\"上文中我们知道beanfactory定义了bean容器的规范\",{\"1\":{\"151\":1}}],[\"上文中我们简单介绍了spring和spring\",{\"1\":{\"94\":1}}],[\"上文我们已经分析了ioc初始化的流程\",{\"1\":{\"152\":1}}],[\"上文我们学习了springaop\",{\"1\":{\"94\":1}}],[\"上文我们介绍了spring\",{\"1\":{\"94\":1,\"143\":1}}],[\"上文\",{\"1\":{\"94\":2,\"149\":1,\"150\":1}}],[\"上面的语句相当于将\",{\"1\":{\"51\":1}}],[\"上\",{\"1\":{\"5\":1,\"9\":1,\"10\":1}}],[\"区块的代码\",{\"1\":{\"14\":1}}],[\"区块\",{\"1\":{\"5\":1}}],[\"部分请求参数如下\",{\"1\":{\"128\":1}}],[\"部分删除\",{\"1\":{\"5\":1,\"15\":1}}],[\"部署后\",{\"1\":{\"13\":1}}],[\"部署成功提示\",{\"1\":{\"11\":1}}],[\"部署步骤如下\",{\"1\":{\"11\":1}}],[\"部署到\",{\"0\":{\"11\":1}}],[\"部署页面路径将变为\",{\"1\":{\"3\":1}}],[\"可是已经能被人认出来了\",{\"1\":{\"155\":1}}],[\"可靠的数据基础\",{\"1\":{\"99\":1}}],[\"可变\",{\"1\":{\"46\":1}}],[\"可变性\",{\"1\":{\"46\":1}}],[\"可参考环境部署教程\",{\"1\":{\"17\":1}}],[\"可以被\",{\"1\":{\"162\":1}}],[\"可以利用\",{\"1\":{\"161\":1}}],[\"可以参考fibonacci数列\",{\"1\":{\"95\":1}}],[\"可以\",{\"1\":{\"73\":1}}],[\"可以用来表示任何可以作为异常抛出的类\",{\"1\":{\"68\":1}}],[\"可以用\",{\"1\":{\"67\":1}}],[\"可以直接通过类名来访问它\",{\"1\":{\"66\":1}}],[\"可以是编译时常量\",{\"1\":{\"65\":1}}],[\"可以将每个域都当成\",{\"1\":{\"61\":1}}],[\"可以让编译器帮忙检查是否满足上面的两个限制条件\",{\"1\":{\"57\":1}}],[\"可以通过使用\",{\"1\":{\"56\":1}}],[\"可以通过剖析确定哪些模块影响了系统的性能\",{\"1\":{\"26\":1,\"80\":1}}],[\"可以灵活地为一个类添加行为\",{\"1\":{\"55\":1}}],[\"可以使用拷贝构造函数或者拷贝工厂来拷贝一个对象\",{\"1\":{\"63\":1}}],[\"可以使用\",{\"1\":{\"56\":1,\"67\":3,\"73\":1}}],[\"可以使用公有的\",{\"1\":{\"54\":1}}],[\"可以使用最新版本的\",{\"1\":{\"16\":1}}],[\"可以对类或类中的成员\",{\"1\":{\"54\":1}}],[\"可以在\",{\"1\":{\"52\":1}}],[\"可以在多个线程中安全地使用\",{\"1\":{\"45\":1}}],[\"可以保证相同内容的字符串变量引用同一的内存对象\",{\"1\":{\"47\":1}}],[\"可以缓存\",{\"1\":{\"45\":1}}],[\"可以当做\",{\"1\":{\"27\":1,\"81\":1}}],[\"可以继承自\",{\"1\":{\"27\":1,\"81\":1}}],[\"可以更容易被程序员理解\",{\"1\":{\"26\":1,\"80\":1}}],[\"可以独立地开发\",{\"1\":{\"26\":1,\"80\":1}}],[\"可以尝试关闭服务器防火墙\",{\"1\":{\"14\":1}}],[\"可以进入\",{\"1\":{\"14\":1}}],[\"可以删除\",{\"1\":{\"6\":1,\"14\":1}}],[\"可使用\",{\"1\":{\"14\":1}}],[\"可能是第三方插件或\",{\"1\":{\"16\":1}}],[\"可能是因为网站路径设置错误\",{\"1\":{\"13\":1}}],[\"可能需要设置子域名\",{\"1\":{\"3\":1}}],[\"可移除\",{\"1\":{\"7\":1}}],[\"可在终端中按下\",{\"1\":{\"17\":1}}],[\"可在\",{\"1\":{\"5\":1}}],[\"进去了一级缓存singletonobjects中\",{\"1\":{\"155\":1}}],[\"进而导致查询效率低下\",{\"1\":{\"95\":1}}],[\"进阶推荐\",{\"0\":{\"97\":1},\"1\":{\"95\":1}}],[\"进制的整数\",{\"1\":{\"61\":1}}],[\"进制的某一位\",{\"1\":{\"61\":1}}],[\"进行销毁\",{\"1\":{\"162\":1}}],[\"进行加工操作\",{\"1\":{\"162\":1}}],[\"进行失败重试\",{\"1\":{\"135\":1,\"136\":1}}],[\"进行模拟回调\",{\"1\":{\"134\":1}}],[\"进行颓废原因分析\",{\"1\":{\"99\":1}}],[\"进行标准化数据接入\",{\"1\":{\"99\":1}}],[\"进行通信\",{\"1\":{\"54\":1}}],[\"进行同步\",{\"1\":{\"46\":1}}],[\"进行网页部署\",{\"1\":{\"11\":1}}],[\"进行全文检索\",{\"1\":{\"5\":1}}],[\"进入你的项目仓库\",{\"1\":{\"3\":1}}],[\"博主个人介绍\",{\"1\":{\"5\":1}}],[\"博客文章内容\",{\"1\":{\"18\":1,\"21\":1}}],[\"博客文章样例2\",{\"0\":{\"21\":1}}],[\"博客文章样例\",{\"0\":{\"18\":1}}],[\"博客文章目录\",{\"1\":{\"5\":1}}],[\"博客\",{\"1\":{\"17\":1}}],[\"博客页面\",{\"1\":{\"5\":1}}],[\"博客汇总\",{\"1\":{\"2\":1}}],[\"博客自动化发布\",{\"1\":{\"1\":1}}],[\"illegalstateexception\",{\"1\":{\"153\":3}}],[\"illegal\",{\"1\":{\"66\":1,\"67\":1}}],[\"i++\",{\"1\":{\"63\":5}}],[\"ie2\",{\"1\":{\"55\":2}}],[\"ie1\",{\"1\":{\"55\":1}}],[\"identified\",{\"1\":{\"145\":1}}],[\"id>\",{\"1\":{\"128\":1}}],[\"id>1641714449<\",{\"1\":{\"128\":1}}],[\"id\",{\"1\":{\"54\":8,\"121\":2,\"127\":2,\"134\":1,\"162\":1}}],[\"it\",{\"1\":{\"42\":1,\"67\":3,\"74\":1,\"145\":1,\"153\":2}}],[\"ignore\",{\"1\":{\"42\":1}}],[\"issingletoncurrentlyincreation\",{\"1\":{\"155\":2}}],[\"issingleton\",{\"1\":{\"153\":1}}],[\"isdependent\",{\"1\":{\"153\":1}}],[\"isprototype\",{\"1\":{\"153\":1}}],[\"isprototypecurrentlyincreation\",{\"1\":{\"153\":1}}],[\"isproxyclass\",{\"1\":{\"147\":1,\"148\":1}}],[\"isproxytargetclass\",{\"1\":{\"147\":1,\"148\":2}}],[\"isinterface\",{\"1\":{\"148\":1}}],[\"isinfrastructureclass\",{\"1\":{\"145\":1}}],[\"isoptimize\",{\"1\":{\"148\":2}}],[\"isempty\",{\"1\":{\"146\":4}}],[\"is\",{\"1\":{\"26\":1,\"27\":2,\"28\":3,\"42\":1,\"44\":1,\"45\":1,\"49\":1,\"55\":5,\"67\":4,\"74\":2,\"80\":1,\"81\":2,\"82\":3,\"145\":3,\"146\":2,\"147\":1,\"148\":1}}],[\"ifc\",{\"1\":{\"147\":2}}],[\"ifndef\",{\"1\":{\"73\":1}}],[\"ifdef\",{\"1\":{\"73\":1}}],[\"if\",{\"1\":{\"26\":1,\"42\":3,\"52\":1,\"60\":5,\"67\":1,\"80\":1,\"145\":9,\"146\":7,\"147\":9,\"148\":3,\"153\":14,\"155\":3}}],[\"i\",{\"1\":{\"17\":1,\"42\":9,\"63\":20,\"145\":1}}],[\"ip\",{\"1\":{\"14\":1}}],[\"immutable\",{\"1\":{\"45\":1}}],[\"implements\",{\"1\":{\"31\":1,\"44\":1,\"55\":1,\"63\":3,\"85\":1,\"163\":4}}],[\"important\",{\"1\":{\"67\":1}}],[\"import\",{\"1\":{\"8\":1,\"66\":1,\"163\":10}}],[\"imgs\",{\"1\":{\"8\":3,\"99\":1}}],[\"innativeimage\",{\"1\":{\"148\":1}}],[\"inner\",{\"1\":{\"99\":1,\"104\":1,\"115\":1,\"142\":5}}],[\"innerclass\",{\"1\":{\"54\":6,\"66\":7}}],[\"incoming\",{\"1\":{\"146\":1}}],[\"incompatible\",{\"1\":{\"52\":1}}],[\"increment\",{\"1\":{\"134\":1}}],[\"initmethod\",{\"1\":{\"163\":1}}],[\"init\",{\"1\":{\"114\":1,\"162\":1,\"163\":2}}],[\"initializingbean\",{\"1\":{\"119\":1,\"128\":1,\"162\":1,\"163\":4}}],[\"initialized\",{\"1\":{\"55\":1}}],[\"initialordertest\",{\"1\":{\"66\":1}}],[\"info\",{\"1\":{\"163\":39}}],[\"info><out\",{\"1\":{\"128\":1}}],[\"info>web<\",{\"1\":{\"128\":1}}],[\"information\",{\"1\":{\"67\":1}}],[\"inference\",{\"1\":{\"72\":1}}],[\"involves\",{\"1\":{\"67\":1}}],[\"invoke\",{\"1\":{\"67\":1}}],[\"indiscriminately\",{\"1\":{\"67\":1}}],[\"index\",{\"1\":{\"7\":1,\"63\":12}}],[\"insure\",{\"1\":{\"67\":1}}],[\"instantiationawarebeanpostprocessor\",{\"1\":{\"162\":2,\"163\":10}}],[\"instantiate\",{\"1\":{\"153\":1}}],[\"instantiated\",{\"1\":{\"55\":2}}],[\"instanceof\",{\"1\":{\"146\":2,\"147\":2,\"153\":1}}],[\"instance\",{\"1\":{\"72\":1,\"145\":2,\"153\":2,\"155\":2,\"163\":2}}],[\"instances\",{\"1\":{\"67\":1}}],[\"instruments\",{\"1\":{\"28\":4,\"82\":4}}],[\"instrument\",{\"1\":{\"28\":11,\"82\":11}}],[\"in\",{\"1\":{\"42\":1,\"45\":1,\"63\":1,\"67\":11,\"72\":4,\"146\":1,\"147\":2}}],[\"into\",{\"1\":{\"42\":1}}],[\"integercachehighpropvalue\",{\"1\":{\"42\":3}}],[\"integercache\",{\"1\":{\"42\":6}}],[\"integer\",{\"1\":{\"41\":1,\"42\":26,\"52\":1,\"54\":1,\"60\":4}}],[\"interceptors\",{\"1\":{\"145\":1,\"146\":1,\"147\":2}}],[\"intercepttask\",{\"1\":{\"114\":1,\"116\":1}}],[\"interruptedexception\",{\"1\":{\"59\":3}}],[\"internalcontroller\",{\"1\":{\"114\":1,\"115\":1,\"116\":3,\"119\":1,\"120\":1,\"121\":4,\"124\":1,\"126\":1,\"127\":4,\"128\":1}}],[\"internals\",{\"1\":{\"67\":1}}],[\"interned\",{\"1\":{\"42\":1}}],[\"intern\",{\"0\":{\"47\":1},\"1\":{\"39\":1,\"47\":5}}],[\"interfaces\",{\"1\":{\"147\":3}}],[\"interface在新窗口打开\",{\"1\":{\"55\":2}}],[\"interfaceimplementexample\",{\"1\":{\"55\":2}}],[\"interfaceexample\",{\"1\":{\"55\":7}}],[\"interface\",{\"1\":{\"31\":1,\"35\":1,\"55\":2,\"85\":1,\"89\":1,\"148\":1,\"155\":1,\"163\":1}}],[\"int\",{\"1\":{\"26\":3,\"41\":2,\"42\":9,\"51\":2,\"52\":1,\"54\":4,\"55\":7,\"56\":8,\"59\":2,\"60\":6,\"61\":2,\"62\":2,\"63\":31,\"65\":1,\"66\":10,\"80\":3,\"163\":2}}],[\"introductions\",{\"1\":{\"147\":1}}],[\"introduction\",{\"1\":{\"147\":1}}],[\"introductionadvisor\",{\"1\":{\"146\":2}}],[\"intro\",{\"1\":{\"5\":1}}],[\"input\",{\"1\":{\"14\":1}}],[\"icon\",{\"1\":{\"7\":1}}],[\"ioc的初始化过程和bean的生命周期等\",{\"1\":{\"94\":1}}],[\"ioc实现原理详解之bean实例化\",{\"0\":{\"149\":1},\"1\":{\"94\":1,\"149\":1}}],[\"ioc实现原理详解之ioc初始化流程\",{\"1\":{\"94\":1}}],[\"ioc实现原理详解之ioc体系结构设计\",{\"1\":{\"94\":1}}],[\"ioc\",{\"0\":{\"179\":1},\"1\":{\"94\":2,\"162\":1}}],[\"ioc和aop\",{\"1\":{\"94\":2}}],[\"io\",{\"1\":{\"3\":3,\"6\":1,\"13\":2,\"44\":1}}],[\"自反性\",{\"1\":{\"60\":1}}],[\"自动重新部署网站\",{\"1\":{\"13\":1}}],[\"自动重新生成并部署网页\",{\"1\":{\"3\":1}}],[\"自\",{\"1\":{\"5\":1}}],[\"自定义笔记\",{\"1\":{\"5\":1}}],[\"读书笔记中可能会有大量的原文引用\",{\"1\":{\"7\":1}}],[\"读书笔记\",{\"0\":{\"7\":1},\"1\":{\"5\":1,\"7\":1}}],[\"草稿箱\",{\"1\":{\"5\":1}}],[\"└──\",{\"1\":{\"5\":2}}],[\"侧边栏\",{\"1\":{\"5\":1}}],[\"├──\",{\"1\":{\"5\":8}}],[\"│\",{\"1\":{\"5\":5}}],[\"值也不可变\",{\"1\":{\"45\":1}}],[\"值经常被使用\",{\"1\":{\"45\":1}}],[\"值\",{\"1\":{\"5\":1,\"45\":1,\"162\":1}}],[\"134\",{\"1\":{\"163\":1}}],[\"1是根节点\",{\"1\":{\"95\":1}}],[\"10\",{\"1\":{\"63\":3,\"134\":1}}],[\"1000\",{\"1\":{\"5\":1}}],[\"1730527725\",{\"1\":{\"165\":1}}],[\"1732690422\",{\"1\":{\"134\":2}}],[\"17\",{\"1\":{\"61\":1}}],[\"111\",{\"1\":{\"52\":3}}],[\"1f\",{\"1\":{\"50\":2}}],[\"12\",{\"1\":{\"163\":20}}],[\"127\",{\"1\":{\"42\":6}}],[\"123\",{\"1\":{\"42\":10,\"55\":1,\"62\":1,\"66\":2}}],[\"128~127\",{\"1\":{\"42\":1}}],[\"128\",{\"1\":{\"3\":1,\"42\":4}}],[\"16\",{\"1\":{\"41\":2,\"155\":2}}],[\"18\",{\"1\":{\"26\":1,\"80\":1,\"163\":2}}],[\"1\",{\"0\":{\"130\":1,\"132\":1,\"134\":1},\"1\":{\"5\":1,\"8\":3,\"34\":4,\"41\":1,\"42\":3,\"45\":1,\"46\":1,\"50\":8,\"51\":6,\"55\":1,\"56\":1,\"57\":1,\"60\":3,\"61\":6,\"63\":1,\"65\":3,\"66\":1,\"72\":2,\"88\":4,\"95\":2,\"99\":2}}],[\"99\",{\"1\":{\"5\":1}}],[\"到负无穷\",{\"1\":{\"5\":1}}],[\"到\",{\"1\":{\"5\":1}}],[\"000001\",{\"1\":{\"134\":2}}],[\"01\",{\"1\":{\"5\":1}}],[\"0\",{\"1\":{\"5\":2,\"26\":1,\"42\":1,\"55\":3,\"63\":5,\"68\":1,\"80\":1}}],[\"our\",{\"1\":{\"147\":1}}],[\"outerclass\",{\"1\":{\"66\":6}}],[\"out\",{\"1\":{\"26\":2,\"28\":3,\"42\":4,\"47\":3,\"49\":7,\"52\":4,\"55\":5,\"56\":2,\"60\":2,\"61\":2,\"62\":1,\"63\":3,\"66\":4,\"80\":2,\"82\":3,\"128\":2}}],[\"okhttpservice\",{\"1\":{\"114\":1}}],[\"okhttpclient\",{\"1\":{\"114\":5}}],[\"oms\",{\"1\":{\"99\":1}}],[\"o读写过于频繁\",{\"1\":{\"95\":1}}],[\"opencontroller\",{\"1\":{\"103\":1,\"105\":9}}],[\"operations\",{\"1\":{\"67\":2,\"72\":1}}],[\"operation\",{\"1\":{\"67\":1}}],[\"operators\",{\"1\":{\"51\":1}}],[\"optimizations\",{\"1\":{\"67\":1}}],[\"only\",{\"1\":{\"147\":1}}],[\"one\",{\"1\":{\"145\":1}}],[\"on\",{\"1\":{\"67\":2,\"74\":1,\"153\":2}}],[\"of\",{\"1\":{\"66\":1,\"67\":12,\"74\":1,\"114\":1,\"145\":1,\"146\":5,\"147\":4,\"155\":3,\"163\":1}}],[\"overriding\",{\"1\":{\"147\":1}}],[\"override\",{\"1\":{\"55\":2,\"56\":1,\"57\":2,\"60\":1,\"61\":1,\"63\":4,\"145\":1,\"146\":1,\"148\":1,\"155\":1,\"163\":11}}],[\"overview\",{\"1\":{\"95\":1}}],[\"overhead\",{\"1\":{\"67\":1}}],[\"overload\",{\"1\":{\"57\":1}}],[\"org\",{\"1\":{\"144\":1,\"163\":9}}],[\"originalbeanname\",{\"1\":{\"153\":1}}],[\"original\",{\"1\":{\"63\":4,\"147\":1}}],[\"or\",{\"0\":{\"74\":1},\"1\":{\"39\":1,\"49\":1,\"52\":1,\"145\":1,\"146\":1,\"147\":2,\"148\":1}}],[\"order\",{\"1\":{\"5\":4,\"99\":1,\"134\":1}}],[\"objenesiscglibaopproxy\",{\"1\":{\"148\":1}}],[\"objectfactory<object>\",{\"1\":{\"155\":1}}],[\"objectfactory<t>\",{\"1\":{\"155\":1}}],[\"objectfactory<\",{\"1\":{\"155\":3}}],[\"objectfactory\",{\"1\":{\"155\":1}}],[\"object>\",{\"1\":{\"94\":1,\"149\":1,\"150\":1,\"152\":1,\"155\":4}}],[\"objects\",{\"1\":{\"67\":1,\"155\":2}}],[\"object\",{\"0\":{\"58\":1},\"1\":{\"39\":1,\"59\":2,\"60\":2,\"63\":4,\"73\":1,\"145\":8,\"146\":2,\"147\":4,\"151\":5,\"153\":9,\"155\":4,\"163\":7}}],[\"obj\",{\"1\":{\"59\":1}}],[\"obsidian\",{\"1\":{\"1\":1}}],[\"o\",{\"1\":{\"32\":3,\"60\":5,\"86\":3}}],[\"oop\",{\"1\":{\"24\":1,\"78\":1}}],[\"oss\",{\"1\":{\"10\":1}}],[\"文件\",{\"1\":{\"7\":1,\"16\":1,\"67\":1}}],[\"文件中的\",{\"1\":{\"15\":1}}],[\"文件中看板娘区块代码\",{\"1\":{\"6\":1}}],[\"文件中修改文件夹路径\",{\"1\":{\"5\":1}}],[\"文件第三行的\",{\"1\":{\"6\":1}}],[\"文件夹名前缀为\",{\"1\":{\"5\":1}}],[\"文件夹\",{\"1\":{\"5\":1,\"6\":1}}],[\"文件夹默认不同步到\",{\"1\":{\"5\":1}}],[\"文件夹中\",{\"1\":{\"5\":1}}],[\"文件的\",{\"1\":{\"5\":1}}],[\"文件来生成侧边栏\",{\"1\":{\"5\":1}}],[\"文档结构\",{\"0\":{\"5\":1}}],[\"文章和页面的配置可参考主目录下的\",{\"1\":{\"5\":1}}],[\"文章\",{\"1\":{\"1\":1}}],[\"配置类\",{\"1\":{\"114\":1}}],[\"配置信息\",{\"1\":{\"114\":1}}],[\"配置的功能\",{\"1\":{\"70\":1}}],[\"配置项的值更改为你的子路径\",{\"1\":{\"13\":1}}],[\"配置案例来调整配置\",{\"1\":{\"5\":1}}],[\"配置\",{\"0\":{\"4\":1},\"1\":{\"15\":1,\"114\":3}}],[\"稍等几分钟再刷新页面\",{\"1\":{\"3\":1}}],[\"请不要更换退款单号\",{\"1\":{\"135\":1}}],[\"请求执行任务\",{\"1\":{\"117\":1}}],[\"请求\",{\"1\":{\"114\":1,\"116\":2}}],[\"请浏览\",{\"1\":{\"17\":1}}],[\"请按照上方的网站部署步骤检查配置\",{\"1\":{\"14\":1}}],[\"请使用原商户退款单号\",{\"1\":{\"135\":1}}],[\"请使用\",{\"1\":{\"11\":1}}],[\"请调整\",{\"1\":{\"7\":1}}],[\"请注意添加跨域配置\",{\"1\":{\"6\":1}}],[\"请参考\",{\"1\":{\"6\":1}}],[\"请在\",{\"1\":{\"5\":1}}],[\"请回到第三步重新触发一次\",{\"1\":{\"3\":1}}],[\"请进入菜单栏顶部的\",{\"1\":{\"3\":1}}],[\"slf4j\",{\"1\":{\"163\":7}}],[\"slower\",{\"1\":{\"67\":1}}],[\"smartclassloader\",{\"1\":{\"147\":2}}],[\"small\",{\"1\":{\"98\":1}}],[\"specific\",{\"1\":{\"147\":1}}],[\"specificinterceptors\",{\"1\":{\"145\":3,\"147\":3}}],[\"springcontextshutdownhook\",{\"1\":{\"163\":2}}],[\"spring解决循环依赖主要是依赖三级缓存\",{\"1\":{\"157\":1}}],[\"spring解决循环依赖的诀窍就在于singletonfactories这个三级cache\",{\"1\":{\"155\":1}}],[\"spring首先从一级缓存singletonobjects中获取\",{\"1\":{\"155\":1}}],[\"spring首先从singletonobjects\",{\"1\":{\"155\":1}}],[\"spring只是解决了单例模式下属性依赖的循环问题\",{\"1\":{\"154\":1}}],[\"spring中bean的生命周期\",{\"0\":{\"161\":1},\"1\":{\"149\":1,\"150\":1}}],[\"spring中getbean的主体思路\",{\"0\":{\"153\":1},\"1\":{\"149\":1}}],[\"spring为了解决单例的循环依赖问题\",{\"1\":{\"154\":1}}],[\"spring为什么不能解决多例的循环依赖\",{\"0\":{\"159\":1},\"1\":{\"149\":1}}],[\"spring为什么不能解决prototype作用域循环依赖\",{\"0\":{\"158\":1},\"1\":{\"149\":1}}],[\"spring为什么不能解决构造器的循环依赖\",{\"0\":{\"157\":1},\"1\":{\"149\":1}}],[\"spring为何不能解决非单例属性之外的循环依赖\",{\"0\":{\"156\":1},\"1\":{\"149\":1}}],[\"spring单例模式下的属性依赖\",{\"0\":{\"155\":1},\"1\":{\"149\":1}}],[\"spring如何解决循环依赖问题\",{\"0\":{\"154\":1},\"1\":{\"149\":1,\"150\":1}}],[\"spring如何实现将资源配置\",{\"1\":{\"94\":1}}],[\"spring默认在目标类实现接口时是通过jdk代理实现的\",{\"1\":{\"148\":1}}],[\"springframework\",{\"1\":{\"144\":1,\"163\":30}}],[\"springmvc实现原理之dispatcherservlet处理请求的过程\",{\"1\":{\"94\":1}}],[\"springmvc实现原理之dispatcherservlet初始化的过程\",{\"1\":{\"94\":1}}],[\"springmvc请求流程和案例\",{\"1\":{\"94\":1}}],[\"spring进阶\",{\"0\":{\"143\":1,\"149\":1},\"1\":{\"94\":10,\"143\":1,\"149\":1}}],[\"spring\",{\"0\":{\"143\":1,\"149\":1,\"162\":1,\"163\":1,\"164\":1,\"171\":1},\"1\":{\"94\":8,\"114\":2,\"119\":1,\"143\":1,\"149\":4,\"153\":1,\"161\":8,\"162\":19}}],[\"spring核心之面向切面编程\",{\"1\":{\"94\":1}}],[\"spring核心之控制反转\",{\"1\":{\"94\":1}}],[\"spring简单例子引入spring的核心中向你展示了aop的基础含义\",{\"1\":{\"94\":1}}],[\"spring简单例子引入spring的核心中向你展示了ioc的基础含义\",{\"1\":{\"94\":1}}],[\"spring简单例子引入spring的核心\",{\"1\":{\"94\":1}}],[\"spring是什么\",{\"1\":{\"94\":1}}],[\"spring和spring框架组成\",{\"1\":{\"94\":1}}],[\"spring基础\",{\"1\":{\"94\":5}}],[\"spring的核心ioc\",{\"1\":{\"93\":1}}],[\"skywang12345\",{\"1\":{\"96\":1}}],[\"skywang12345写的数据结构\",{\"1\":{\"96\":1}}],[\"shutdown\",{\"1\":{\"163\":2}}],[\"shimo\",{\"1\":{\"142\":1}}],[\"shared\",{\"1\":{\"163\":1}}],[\"sharedinstance\",{\"1\":{\"153\":5}}],[\"shardconfigvalue\",{\"1\":{\"119\":1}}],[\"shard\",{\"1\":{\"119\":1,\"120\":3}}],[\"shardmanagerimpl\",{\"1\":{\"119\":1}}],[\"shardmanager\",{\"1\":{\"119\":2,\"121\":4,\"122\":1,\"124\":1,\"126\":1,\"127\":4,\"128\":2}}],[\"shallowcloneexample\",{\"1\":{\"63\":7}}],[\"shouldproxytargetclass\",{\"1\":{\"147\":1}}],[\"shouldskip\",{\"1\":{\"145\":1}}],[\"should\",{\"1\":{\"67\":3}}],[\"short\",{\"1\":{\"41\":1,\"42\":1,\"51\":4,\"52\":2}}],[\"s\",{\"1\":{\"51\":1,\"52\":2,\"147\":3,\"153\":1,\"163\":4}}],[\"s5\",{\"1\":{\"47\":2}}],[\"s4\",{\"1\":{\"47\":2}}],[\"s3\",{\"1\":{\"47\":4}}],[\"s2\",{\"1\":{\"47\":3}}],[\"s1\",{\"1\":{\"47\":8,\"51\":7}}],[\"singletonfactory\",{\"1\":{\"155\":3}}],[\"singletonfactories\",{\"1\":{\"155\":4}}],[\"singletonobject\",{\"1\":{\"155\":8}}],[\"singletonobjects\",{\"1\":{\"155\":4}}],[\"singletons\",{\"1\":{\"153\":1}}],[\"singleton\",{\"1\":{\"153\":2,\"155\":3,\"161\":1,\"162\":1,\"163\":1}}],[\"singletontargetsource\",{\"1\":{\"145\":1}}],[\"since\",{\"1\":{\"67\":1}}],[\"side\",{\"1\":{\"67\":1}}],[\"sidebar\",{\"1\":{\"5\":2,\"7\":1}}],[\"size\",{\"1\":{\"42\":1,\"61\":1}}],[\"sublist\",{\"1\":{\"146\":2}}],[\"subclass\",{\"1\":{\"145\":1}}],[\"submitinner\",{\"1\":{\"103\":2}}],[\"submit\",{\"1\":{\"103\":1,\"104\":2,\"105\":1,\"115\":1}}],[\"success\",{\"1\":{\"116\":2}}],[\"such\",{\"1\":{\"67\":2}}],[\"suite\",{\"1\":{\"67\":1}}],[\"sun\",{\"1\":{\"42\":1}}],[\"support\",{\"1\":{\"72\":1,\"163\":1}}],[\"supplied\",{\"1\":{\"14\":1}}],[\"superset\",{\"1\":{\"74\":1}}],[\"super在新窗口打开\",{\"1\":{\"56\":1}}],[\"superextendexample\",{\"1\":{\"56\":5}}],[\"superexample\",{\"1\":{\"56\":6}}],[\"super\",{\"0\":{\"56\":1},\"1\":{\"39\":1,\"49\":1,\"56\":4,\"63\":4,\"66\":1,\"163\":5}}],[\"switch\",{\"0\":{\"52\":1},\"1\":{\"39\":1,\"52\":6,\"72\":1}}],[\"sortadvisors\",{\"1\":{\"146\":2}}],[\"sort\",{\"1\":{\"95\":2}}],[\"solid\",{\"1\":{\"36\":1,\"90\":1}}],[\"socket\",{\"1\":{\"14\":1}}],[\"scope=\",{\"1\":{\"162\":2}}],[\"scopenotactiveexception\",{\"1\":{\"153\":1}}],[\"scopename\",{\"1\":{\"153\":5}}],[\"scopedinstance\",{\"1\":{\"153\":2}}],[\"scopes\",{\"1\":{\"153\":1}}],[\"scope\",{\"1\":{\"153\":7}}],[\"scenarios\",{\"1\":{\"147\":1}}],[\"school\",{\"1\":{\"34\":2,\"88\":2}}],[\"screen\",{\"1\":{\"32\":2,\"86\":2}}],[\"structure\",{\"1\":{\"96\":1}}],[\"streams\",{\"1\":{\"72\":1}}],[\"stringvalueresolver\",{\"1\":{\"162\":1}}],[\"stringutils\",{\"1\":{\"153\":1}}],[\"strings\",{\"1\":{\"72\":1}}],[\"stringbuilder在新窗口打开\",{\"1\":{\"46\":1}}],[\"stringbuilder\",{\"0\":{\"46\":1},\"1\":{\"39\":1,\"46\":2}}],[\"stringbuffer\",{\"0\":{\"46\":1},\"1\":{\"39\":1,\"46\":3}}],[\"string\",{\"0\":{\"43\":1,\"46\":1,\"47\":1},\"1\":{\"26\":3,\"28\":1,\"39\":3,\"42\":1,\"44\":4,\"45\":14,\"46\":3,\"47\":11,\"49\":7,\"52\":3,\"54\":3,\"59\":1,\"66\":5,\"73\":1,\"80\":3,\"82\":1,\"145\":2,\"146\":2,\"147\":1,\"151\":3,\"152\":1,\"153\":11,\"155\":1,\"163\":10}}],[\"storage\",{\"1\":{\"44\":1}}],[\"student\",{\"1\":{\"34\":2,\"88\":2}}],[\"standard\",{\"1\":{\"153\":1}}],[\"stands\",{\"1\":{\"69\":1}}],[\"stage\",{\"1\":{\"114\":1}}],[\"startupstep\",{\"1\":{\"153\":1}}],[\"startuml\",{\"1\":{\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1}}],[\"start>\",{\"1\":{\"128\":1}}],[\"start>20241108190424<\",{\"1\":{\"128\":1}}],[\"start\",{\"1\":{\"109\":2,\"110\":1,\"111\":1,\"112\":2,\"153\":1}}],[\"state\",{\"1\":{\"146\":1}}],[\"statement\",{\"1\":{\"52\":1,\"72\":1}}],[\"staticfield\",{\"1\":{\"66\":1}}],[\"staticinnerclass\",{\"1\":{\"66\":4}}],[\"static\",{\"0\":{\"66\":1},\"1\":{\"28\":1,\"39\":1,\"42\":5,\"49\":4,\"55\":2,\"66\":20,\"82\":1,\"146\":1,\"163\":1}}],[\"stackoverflow\",{\"1\":{\"46\":1,\"49\":1,\"51\":1,\"52\":1}}],[\"syntax\",{\"1\":{\"72\":1}}],[\"synchronized\",{\"1\":{\"46\":1,\"155\":1}}],[\"sync\",{\"1\":{\"14\":1}}],[\"systematically\",{\"1\":{\"67\":1}}],[\"system\",{\"1\":{\"26\":2,\"28\":3,\"42\":4,\"47\":3,\"49\":7,\"52\":4,\"55\":5,\"56\":2,\"60\":2,\"61\":2,\"62\":1,\"63\":3,\"66\":4,\"80\":2,\"82\":3,\"99\":1}}],[\"src=\",{\"1\":{\"6\":2}}],[\"see\",{\"1\":{\"145\":1,\"146\":3,\"147\":1}}],[\"send\",{\"1\":{\"103\":1}}],[\"sensitive\",{\"1\":{\"67\":1}}],[\"search\",{\"1\":{\"95\":3}}],[\"searchpro\",{\"1\":{\"5\":1}}],[\"se\",{\"1\":{\"72\":2}}],[\"security\",{\"1\":{\"67\":3}}],[\"sections\",{\"1\":{\"67\":1}}],[\"secrets\",{\"1\":{\"10\":1}}],[\"setage\",{\"1\":{\"163\":4}}],[\"setapplicationcontext\",{\"1\":{\"162\":1,\"163\":3}}],[\"setembeddedvalueresolver\",{\"1\":{\"162\":1}}],[\"setenvironment\",{\"1\":{\"162\":1}}],[\"setbeanfactory\",{\"1\":{\"162\":1,\"163\":3}}],[\"setbeanclassloader\",{\"1\":{\"162\":1}}],[\"setbeanname\",{\"1\":{\"162\":1,\"163\":3}}],[\"setprefiltered\",{\"1\":{\"147\":1}}],[\"setproxytargetclass\",{\"1\":{\"147\":1}}],[\"setfrozen\",{\"1\":{\"147\":1}}],[\"setifabsent\",{\"1\":{\"134\":1}}],[\"setid\",{\"1\":{\"54\":1}}],[\"set\",{\"1\":{\"61\":4,\"63\":6,\"67\":2,\"69\":1,\"147\":2}}],[\"settargetsource\",{\"1\":{\"147\":1}}],[\"setter\",{\"1\":{\"54\":1}}],[\"setting\",{\"1\":{\"10\":1}}],[\"settings\",{\"1\":{\"3\":3,\"147\":1}}],[\"setname\",{\"1\":{\"49\":2,\"163\":4}}],[\"serializable\",{\"1\":{\"44\":1}}],[\"server\",{\"1\":{\"14\":1}}],[\"serverurl\",{\"1\":{\"7\":1}}],[\"sequencediagram\",{\"1\":{\"105\":1,\"110\":1,\"116\":1,\"121\":1,\"127\":1}}],[\"sequence\",{\"1\":{\"36\":1,\"90\":1}}],[\"samplepage\",{\"1\":{\"5\":1}}],[\"save\",{\"1\":{\"3\":1}}],[\"网页模板\",{\"1\":{\"5\":1}}],[\"网页显示异常\",{\"0\":{\"13\":1},\"1\":{\"3\":1}}],[\"网站部署\",{\"0\":{\"9\":1}}],[\"网站将转用本地全文索引来进行搜索\",{\"1\":{\"5\":1}}],[\"网站关键词和统计\",{\"1\":{\"5\":1}}],[\"网站环境依赖和网站属性\",{\"1\":{\"5\":1}}],[\"网站配置\",{\"1\":{\"5\":1}}],[\"网站的配置和文本都存放在\",{\"1\":{\"5\":1}}],[\"网站运行目录保持默认的\",{\"1\":{\"3\":1}}],[\"的销毁方法\",{\"1\":{\"162\":1}}],[\"的缓存池中\",{\"1\":{\"162\":1}}],[\"的作用范围为\",{\"1\":{\"162\":2}}],[\"的实例就交给客户端代码管理\",{\"1\":{\"161\":1}}],[\"的实例后\",{\"1\":{\"161\":1}}],[\"的实现过程\",{\"1\":{\"94\":1}}],[\"的生命周期管理\",{\"1\":{\"162\":1}}],[\"的生命周期流程\",{\"1\":{\"162\":1}}],[\"的生命周期是一个很复杂的执行过程\",{\"1\":{\"162\":1}}],[\"的生命周期\",{\"1\":{\"161\":2,\"162\":1}}],[\"的完整生命周期\",{\"1\":{\"161\":1}}],[\"的整个过程\",{\"1\":{\"155\":1}}],[\"的创建过程\",{\"1\":{\"143\":1,\"144\":1,\"162\":1}}],[\"的相应方法进行分片管理\",{\"1\":{\"128\":1}}],[\"的管理和配置\",{\"1\":{\"114\":1}}],[\"的接口\",{\"1\":{\"114\":1}}],[\"的访问日志配置\",{\"1\":{\"114\":1}}],[\"的执行器\",{\"1\":{\"111\":1}}],[\"的触发\",{\"1\":{\"111\":1}}],[\"的问题\",{\"1\":{\"99\":1}}],[\"的方式进行店铺和直播间管理\",{\"1\":{\"99\":1}}],[\"的方式新建了两个不同对象\",{\"1\":{\"47\":1}}],[\"的替代方案\",{\"1\":{\"63\":1}}],[\"的一个\",{\"1\":{\"63\":1}}],[\"的对象\",{\"1\":{\"60\":1}}],[\"的比较\",{\"1\":{\"60\":1}}],[\"的设计初衷是对那些只有少数的几个值进行等值判断\",{\"1\":{\"52\":1}}],[\"的计算结果进行了向下转型\",{\"1\":{\"51\":1}}],[\"的参数是以值传递的形式传入方法中\",{\"1\":{\"49\":1}}],[\"的需要\",{\"1\":{\"45\":1}}],[\"的区别在于\",{\"1\":{\"42\":1}}],[\"的区别\",{\"0\":{\"73\":1},\"1\":{\"39\":1}}],[\"的代码中\",{\"1\":{\"28\":1}}],[\"的属性和方法\",{\"1\":{\"27\":1,\"81\":1}}],[\"的高级技巧\",{\"1\":{\"17\":1}}],[\"的报错\",{\"1\":{\"16\":1}}],[\"的有效性\",{\"1\":{\"14\":1}}],[\"的速度相对\",{\"1\":{\"11\":1}}],[\"的速度不稳定\",{\"1\":{\"9\":1}}],[\"的密钥\",{\"1\":{\"10\":1}}],[\"的\",{\"1\":{\"5\":1,\"7\":1,\"45\":2,\"49\":1,\"55\":3,\"63\":1,\"73\":1,\"111\":6,\"114\":2,\"161\":1,\"162\":3}}],[\"的源\",{\"1\":{\"3\":1}}],[\"的分支\",{\"1\":{\"3\":1}}],[\"将触发\",{\"1\":{\"162\":1}}],[\"将调用该方法对\",{\"1\":{\"162\":1}}],[\"将调用该接口的初始化方法\",{\"1\":{\"162\":1}}],[\"将调用该接口的预初始化方法\",{\"1\":{\"162\":1}}],[\"将调用\",{\"1\":{\"162\":1}}],[\"将当前bean实例放入alreadycreated集合里\",{\"1\":{\"153\":1}}],[\"将三方支付与商户系统完全解耦\",{\"1\":{\"135\":1}}],[\"将支付订单放入到延时队列中\",{\"1\":{\"134\":1}}],[\"将支付类型编号\",{\"1\":{\"134\":1}}],[\"将签名和其他必要参数组装成统一的支付请求\",{\"1\":{\"134\":1}}],[\"将订单号序列格式化为\",{\"1\":{\"134\":1}}],[\"将任务添加到检查点服务中\",{\"1\":{\"111\":1,\"112\":1,\"117\":1}}],[\"将任务添加到具体的时间槽中\",{\"1\":{\"111\":1}}],[\"将任务添加到时间轮中\",{\"1\":{\"109\":2,\"111\":1,\"112\":2}}],[\"将任务发送到\",{\"1\":{\"111\":1}}],[\"将任务发送到指定的kafka\",{\"1\":{\"103\":1}}],[\"将任务发送到不同的kafka\",{\"1\":{\"103\":1}}],[\"将任务分发到相应的处理器\",{\"1\":{\"103\":1}}],[\"将外部电商与有道业务系统隔离\",{\"1\":{\"99\":1}}],[\"将渠道的接入与业务系统进行解耦\",{\"1\":{\"99\":2}}],[\"将森林里的树逐渐合并\",{\"1\":{\"95\":1}}],[\"将结点的最低利用率从1\",{\"1\":{\"95\":1}}],[\"将切面类的所有切面方法根据使用的注解生成对应advice\",{\"1\":{\"94\":2,\"143\":1,\"144\":1}}],[\"将网页部署到云存储上\",{\"1\":{\"10\":1}}],[\"将新文档同步到\",{\"1\":{\"9\":1}}],[\"将干货类长文的\",{\"1\":{\"5\":1}}],[\"将\",{\"1\":{\"3\":1,\"6\":2,\"7\":1,\"13\":1,\"17\":1,\"60\":1}}],[\"将我所有的笔记与文章聚合到同一页面形成知识库\",{\"1\":{\"1\":1}}],[\"中指定了该\",{\"1\":{\"162\":2}}],[\"中所有属性值的配置注入\",{\"1\":{\"162\":1}}],[\"中获取\",{\"1\":{\"155\":1}}],[\"中尝试获取\",{\"1\":{\"155\":1}}],[\"中已经有该键\",{\"1\":{\"134\":1}}],[\"中消费任务\",{\"1\":{\"111\":1}}],[\"中出现\",{\"1\":{\"95\":1}}],[\"中有三个访问权限修饰符\",{\"1\":{\"54\":1}}],[\"中取得引用\",{\"1\":{\"45\":1}}],[\"中使用\",{\"1\":{\"30\":1,\"31\":1,\"84\":1,\"85\":1}}],[\"中的持久化任务和触发任务\",{\"1\":{\"128\":1}}],[\"中的持久化任务并保存到数据库\",{\"1\":{\"124\":1,\"125\":1}}],[\"中的持久化任务并保存到数据库中\",{\"1\":{\"122\":1}}],[\"中的持久化任务并将其保存到数据库中\",{\"1\":{\"119\":1}}],[\"中的触发任务并保存到数据库\",{\"1\":{\"125\":1}}],[\"中的\",{\"1\":{\"7\":1,\"11\":1,\"162\":1}}],[\"中\",{\"1\":{\"3\":1,\"14\":1,\"42\":1,\"47\":2,\"61\":1,\"67\":1,\"134\":1,\"162\":1}}],[\"b拿到a对象后顺利完成了初始化阶段一\",{\"1\":{\"155\":1}}],[\"b在初始化第一步的时候发现本身依赖了对象a\",{\"1\":{\"155\":1}}],[\"b对象setter依赖a对象\",{\"1\":{\"155\":1}}],[\"bfs\",{\"1\":{\"95\":1}}],[\"black\",{\"1\":{\"95\":1}}],[\"bloch\",{\"1\":{\"75\":1}}],[\"blog\",{\"1\":{\"5\":1,\"36\":1,\"90\":1,\"98\":1}}],[\"balanced\",{\"1\":{\"95\":1}}],[\"base\",{\"1\":{\"13\":5}}],[\"bst\",{\"1\":{\"95\":2}}],[\"b+树总是到叶子结点才命中\",{\"1\":{\"95\":1}}],[\"b+树在b树基础上\",{\"1\":{\"95\":1}}],[\"b树+叶子有序链表\",{\"1\":{\"95\":1}}],[\"b树适用于读写相对大的数据块的存储系统\",{\"1\":{\"95\":1}}],[\"b树与自平衡二叉查找树不同\",{\"1\":{\"95\":1}}],[\"binary\",{\"1\":{\"72\":1,\"95\":2}}],[\"boy\",{\"1\":{\"98\":1}}],[\"box<t>\",{\"1\":{\"69\":1}}],[\"boolean\",{\"1\":{\"41\":1,\"42\":1,\"59\":1,\"60\":1,\"145\":4,\"146\":1,\"153\":1,\"155\":1,\"163\":1}}],[\"bucket\",{\"1\":{\"109\":2,\"112\":2}}],[\"but\",{\"1\":{\"67\":1,\"147\":1}}],[\"buildadvisors\",{\"1\":{\"147\":2}}],[\"build\",{\"1\":{\"3\":1}}],[\"breadth\",{\"1\":{\"95\":1}}],[\"breaks\",{\"1\":{\"67\":1}}],[\"break\",{\"1\":{\"52\":4}}],[\"browser\",{\"1\":{\"67\":1}}],[\"browsers\",{\"1\":{\"67\":1}}],[\"branch\",{\"1\":{\"3\":1}}],[\"bbb\",{\"1\":{\"47\":3,\"52\":1}}],[\"by\",{\"1\":{\"42\":1,\"49\":2,\"67\":1,\"145\":1,\"153\":1}}],[\"byte\",{\"1\":{\"41\":1,\"42\":1,\"52\":2}}],[\"beforeprototypecreation\",{\"1\":{\"153\":2}}],[\"being\",{\"1\":{\"145\":1}}],[\"bean级生命周期接口方法\",{\"1\":{\"162\":1}}],[\"bean自身的方法\",{\"1\":{\"162\":1}}],[\"bean的完整生命周期经历了各种方法调用\",{\"1\":{\"162\":1}}],[\"beanpostprocessor\",{\"1\":{\"162\":3,\"163\":7}}],[\"beana也需要在beanb的构造函数中完成初始化\",{\"1\":{\"157\":1}}],[\"beantype\",{\"1\":{\"153\":1}}],[\"beansconfig\",{\"1\":{\"163\":1}}],[\"beans\",{\"1\":{\"153\":2,\"163\":9}}],[\"beansexception\",{\"1\":{\"151\":5,\"153\":7,\"155\":2,\"163\":9}}],[\"beancreationexception\",{\"1\":{\"153\":2}}],[\"beancreation\",{\"1\":{\"153\":5}}],[\"beancurrentlyincreationexception\",{\"1\":{\"153\":1}}],[\"beanclassloaderaware\",{\"1\":{\"162\":1}}],[\"beanclass\",{\"1\":{\"146\":5,\"147\":8,\"163\":2}}],[\"beaninstance\",{\"1\":{\"153\":6}}],[\"bean实例是否包含一个类型检查\",{\"1\":{\"153\":1}}],[\"bean生命周期源码\",{\"0\":{\"164\":1},\"1\":{\"149\":1}}],[\"bean生命周期案例\",{\"0\":{\"163\":1},\"1\":{\"149\":1}}],[\"bean生命周期流程\",{\"0\":{\"162\":1},\"1\":{\"149\":1}}],[\"beanfactorypostprocessor\",{\"1\":{\"162\":1,\"163\":3}}],[\"beanfactory实现getbean方法在abstractbeanfactory中\",{\"1\":{\"153\":1}}],[\"beanfactory中getbean的主体思路\",{\"0\":{\"151\":1},\"1\":{\"149\":1,\"150\":1}}],[\"beanfactory\",{\"1\":{\"147\":2,\"153\":1,\"163\":7}}],[\"beanfactoryaware\",{\"1\":{\"162\":2,\"163\":5}}],[\"beanfactoryaware和beanpostprocessor\",{\"1\":{\"144\":1}}],[\"beanfactoryadvisorretrievalhelper\",{\"1\":{\"146\":1}}],[\"beannameaware\",{\"1\":{\"162\":1,\"163\":4}}],[\"beanname\",{\"1\":{\"145\":10,\"146\":5,\"147\":5,\"153\":32,\"155\":9,\"163\":17}}],[\"bean加载方法栈中找到parsecustomelement方法\",{\"1\":{\"144\":1}}],[\"bean\",{\"1\":{\"114\":1,\"145\":23,\"146\":1,\"147\":7,\"153\":4,\"155\":6,\"161\":11,\"162\":33,\"163\":12}}],[\"behavior\",{\"1\":{\"67\":1}}],[\"because\",{\"1\":{\"67\":1}}],[\"benefit\",{\"1\":{\"67\":1}}],[\"been\",{\"1\":{\"55\":1,\"153\":1}}],[\"between\",{\"1\":{\"42\":2,\"72\":1,\"73\":1,\"153\":1}}],[\"beta\",{\"1\":{\"5\":1}}],[\"be\",{\"1\":{\"42\":3,\"52\":1,\"55\":2,\"66\":4,\"67\":8,\"146\":1,\"147\":2}}],[\"b\",{\"1\":{\"35\":5,\"49\":4,\"52\":1,\"63\":3,\"66\":2,\"75\":1,\"89\":5,\"95\":4,\"126\":8,\"134\":1,\"155\":1}}],[\"ds在新窗口打开\",{\"1\":{\"96\":3}}],[\"dfs\",{\"1\":{\"95\":1}}],[\"d\",{\"1\":{\"95\":1,\"126\":6,\"134\":1}}],[\"dynamic\",{\"1\":{\"72\":1}}],[\"dynamically\",{\"1\":{\"67\":1}}],[\"dysfunctional\",{\"1\":{\"67\":1}}],[\"drawbacks\",{\"1\":{\"67\":1}}],[\"driver\",{\"1\":{\"67\":1}}],[\"dijkstra\",{\"1\":{\"95\":2}}],[\"disposablebean接口\",{\"1\":{\"163\":1}}],[\"disposablebean\",{\"1\":{\"162\":1,\"163\":4}}],[\"dispatch\",{\"1\":{\"103\":2,\"105\":1}}],[\"dispatcherimpl\",{\"1\":{\"103\":1}}],[\"dispatcher\",{\"1\":{\"103\":2,\"105\":5}}],[\"dispatcherservlet处理请求的过程的源码解析\",{\"1\":{\"94\":1}}],[\"dispatcherservlet的初始化过程的源码解析\",{\"1\":{\"94\":1}}],[\"discoverable\",{\"1\":{\"67\":1}}],[\"differences\",{\"1\":{\"73\":1}}],[\"difference\",{\"1\":{\"72\":1}}],[\"diamond\",{\"1\":{\"72\":1}}],[\"diagram在新窗口打开\",{\"1\":{\"36\":1,\"90\":1}}],[\"date\",{\"1\":{\"72\":1}}],[\"data\",{\"1\":{\"52\":1,\"96\":1}}],[\"dashboard\",{\"1\":{\"11\":1}}],[\"dodestroy\",{\"1\":{\"163\":4}}],[\"doinit\",{\"1\":{\"163\":4}}],[\"do\",{\"1\":{\"145\":1,\"146\":1}}],[\"dotrigger\",{\"1\":{\"109\":1,\"110\":2,\"111\":2,\"112\":1}}],[\"done\",{\"1\":{\"104\":1,\"105\":2,\"114\":1,\"115\":1}}],[\"don\",{\"1\":{\"51\":1}}],[\"dogetbean\",{\"1\":{\"153\":6}}],[\"dog\",{\"1\":{\"49\":31}}],[\"double\",{\"0\":{\"50\":1},\"1\":{\"39\":1,\"41\":1,\"50\":1}}],[\"doconsumerinner\",{\"1\":{\"109\":1,\"112\":1}}],[\"doconsume\",{\"1\":{\"109\":2,\"110\":2,\"111\":2,\"112\":2}}],[\"docsify\",{\"1\":{\"7\":3}}],[\"docsearch\",{\"1\":{\"5\":1}}],[\"docs\",{\"1\":{\"5\":8,\"6\":4,\"7\":3,\"8\":2,\"13\":1,\"15\":2,\"17\":1,\"99\":1}}],[\"docker\",{\"1\":{\"2\":2}}],[\"debug\",{\"1\":{\"163\":1}}],[\"debuggers\",{\"1\":{\"67\":2}}],[\"demo\",{\"1\":{\"163\":1}}],[\"destory\",{\"1\":{\"162\":2}}],[\"destroymethod\",{\"1\":{\"163\":1}}],[\"destroysingleton\",{\"1\":{\"153\":1}}],[\"destroy\",{\"1\":{\"67\":1,\"163\":3}}],[\"delegate\",{\"1\":{\"153\":1}}],[\"delegation\",{\"1\":{\"153\":1}}],[\"determine\",{\"1\":{\"146\":1,\"148\":1}}],[\"details\",{\"1\":{\"36\":1,\"90\":1,\"98\":1}}],[\"decrement\",{\"1\":{\"109\":1,\"112\":1}}],[\"deregister\",{\"1\":{\"109\":1,\"112\":1}}],[\"deepcloneexample\",{\"1\":{\"63\":8}}],[\"dep\",{\"1\":{\"153\":6}}],[\"depends\",{\"1\":{\"153\":2}}],[\"dependson产生的循环依赖\",{\"1\":{\"160\":1}}],[\"dependson注解循环依赖的地方\",{\"1\":{\"160\":1}}],[\"dependson注解\",{\"1\":{\"160\":1}}],[\"dependson\",{\"1\":{\"153\":3}}],[\"dependency\",{\"0\":{\"35\":1,\"89\":1},\"1\":{\"24\":1,\"35\":1,\"78\":1,\"89\":1,\"95\":1}}],[\"depth\",{\"1\":{\"95\":1}}],[\"departmentb\",{\"1\":{\"33\":2,\"87\":2}}],[\"departmenta\",{\"1\":{\"33\":2,\"87\":2}}],[\"deployment\",{\"1\":{\"3\":1}}],[\"device\",{\"1\":{\"128\":1}}],[\"developing\",{\"1\":{\"74\":1}}],[\"developer\",{\"1\":{\"67\":1}}],[\"development\",{\"1\":{\"67\":2}}],[\"dev\",{\"1\":{\"15\":1,\"17\":1}}],[\"definition\",{\"1\":{\"153\":2}}],[\"defined\",{\"1\":{\"67\":2,\"153\":1}}],[\"defineuserconfig\",{\"1\":{\"13\":1}}],[\"defaultlistablebeanfactory\",{\"1\":{\"163\":1}}],[\"defaultaopproxyfactory\",{\"1\":{\"148\":1}}],[\"default\",{\"1\":{\"13\":1,\"55\":1,\"72\":1,\"147\":2}}],[\"dns\",{\"1\":{\"11\":1}}],[\"你好\",{\"1\":{\"128\":1}}],[\"你需要安装\",{\"1\":{\"17\":1}}],[\"你需要进入项目仓库的\",{\"1\":{\"10\":1}}],[\"你也可以参考文章\",{\"1\":{\"10\":1}}],[\"你可以手动在本地建立\",{\"1\":{\"5\":1}}],[\"你可以参考注释和\",{\"1\":{\"5\":1}}],[\"你可以选择任意其他名称\",{\"1\":{\"3\":1}}],[\"你的网站将能够加载所有必要的资源文件\",{\"1\":{\"13\":1}}],[\"你的个人知识库已经成功搭建\",{\"1\":{\"3\":1}}],[\"你的用户名\",{\"1\":{\"3\":3,\"11\":1}}],[\"你将看到一个新的访问链接提示\",{\"1\":{\"3\":1}}],[\"here\",{\"1\":{\"55\":3}}],[\"h\",{\"1\":{\"42\":3,\"126\":2}}],[\"highlights\",{\"1\":{\"72\":2}}],[\"high\",{\"1\":{\"42\":7,\"67\":1}}],[\"handleafterexecution\",{\"1\":{\"114\":1,\"116\":2}}],[\"handlehttptaskresponse\",{\"1\":{\"114\":1}}],[\"handling\",{\"1\":{\"72\":1,\"147\":1}}],[\"harnesses\",{\"1\":{\"67\":1}}],[\"hard\",{\"1\":{\"26\":1,\"80\":1}}],[\"haslength\",{\"1\":{\"153\":1}}],[\"hasnousersuppliedproxyinterfaces\",{\"1\":{\"148\":2}}],[\"hasintroductions\",{\"1\":{\"146\":2}}],[\"has\",{\"1\":{\"63\":1,\"67\":1}}],[\"hascode\",{\"1\":{\"61\":1}}],[\"hashset<>\",{\"1\":{\"61\":1}}],[\"hashset<equalexample>\",{\"1\":{\"61\":1}}],[\"hashset\",{\"1\":{\"61\":1}}],[\"hashmap<string\",{\"1\":{\"155\":2}}],[\"hashmap\",{\"1\":{\"45\":1}}],[\"hash\",{\"1\":{\"45\":3,\"95\":1}}],[\"hashcode\",{\"0\":{\"61\":1},\"1\":{\"39\":1,\"59\":1,\"61\":3}}],[\"have\",{\"1\":{\"55\":1,\"67\":1,\"153\":1}}],[\"hubei\",{\"1\":{\"36\":1,\"90\":1}}],[\"hotspot考虑逐渐去永久代\",{\"1\":{\"47\":1}}],[\"hotspot也是发展的\",{\"1\":{\"47\":1}}],[\"hotspot\",{\"1\":{\"47\":1}}],[\"hotspot中字符串常量池保存哪里\",{\"1\":{\"47\":1}}],[\"host\",{\"1\":{\"10\":1}}],[\"hope\",{\"1\":{\"1\":1,\"5\":1}}],[\"httprequest\",{\"1\":{\"114\":1}}],[\"httptaskhandler\",{\"1\":{\"114\":2,\"116\":9}}],[\"http\",{\"1\":{\"17\":1,\"29\":1,\"36\":1,\"83\":1,\"90\":1,\"114\":3,\"116\":2,\"117\":1}}],[\"https\",{\"1\":{\"3\":2,\"6\":1,\"7\":2,\"11\":1,\"13\":2,\"36\":2,\"90\":2,\"98\":3,\"99\":2,\"142\":6,\"165\":2}}],[\"html\",{\"1\":{\"5\":1,\"6\":1,\"7\":2,\"18\":1,\"21\":1,\"36\":2,\"90\":2,\"98\":1}}],[\"例如给地理位置\",{\"1\":{\"95\":1}}],[\"例如磁盘\",{\"1\":{\"95\":1}}],[\"例如除\",{\"1\":{\"68\":1}}],[\"例如不相关的类都可以实现\",{\"1\":{\"55\":1}}],[\"例如下面的例子中\",{\"1\":{\"54\":1}}],[\"例如在作为网络连接参数的情况下如果\",{\"1\":{\"45\":1}}],[\"例如必须实名认证\",{\"1\":{\"9\":1}}],[\"例如文章路径为\",{\"1\":{\"5\":1}}],[\"例如\",{\"1\":{\"3\":2,\"13\":1,\"27\":1,\"45\":1,\"81\":1,\"95\":1,\"134\":1}}],[\"为后面给代理进行增强实现做准备\",{\"1\":{\"144\":1}}],[\"为后续交给代理增强实现做准备的过程\",{\"1\":{\"94\":1}}],[\"为订单号计数器\",{\"1\":{\"134\":1}}],[\"为企业提供更广泛\",{\"1\":{\"129\":1}}],[\"为促销活动提供依据\",{\"1\":{\"99\":1}}],[\"为业务决策提供有力支持\",{\"1\":{\"99\":1}}],[\"为非叶子结点也增加链表指针\",{\"1\":{\"95\":1}}],[\"为叶子结点增加链表指针\",{\"1\":{\"95\":1}}],[\"为构建上层web应用\",{\"1\":{\"94\":1}}],[\"为保证国内用户访问稳定\",{\"1\":{\"11\":1}}],[\"为了兼容\",{\"1\":{\"73\":1}}],[\"为了满足里式替换原则\",{\"1\":{\"57\":1}}],[\"为了本地运行\",{\"1\":{\"17\":1}}],[\"为了确保网站能够正常访问\",{\"1\":{\"9\":1}}],[\"为了避免在生成静态页面时出现\",{\"1\":{\"8\":1}}],[\"为\",{\"1\":{\"3\":1}}],[\"为此\",{\"1\":{\"1\":1}}],[\"修改文件名称\",{\"1\":{\"160\":1}}],[\"修改文件时页面会同步更新预览\",{\"1\":{\"17\":1}}],[\"修改数据库异常\",{\"1\":{\"137\":1}}],[\"修改为\",{\"1\":{\"6\":2}}],[\"修改\",{\"1\":{\"3\":1,\"13\":1}}],[\"返回beanname的实例instance\",{\"1\":{\"152\":1}}],[\"返回支付页面\",{\"1\":{\"131\":1}}],[\"返回任务列表\",{\"1\":{\"121\":3,\"127\":3}}],[\"返回分片任务\",{\"1\":{\"121\":1,\"127\":1}}],[\"返回分发结果\",{\"1\":{\"105\":1}}],[\"返回结果\",{\"1\":{\"105\":1,\"116\":3,\"121\":5,\"127\":5}}],[\"返回uuid\",{\"1\":{\"105\":2}}],[\"返回散列值\",{\"1\":{\"61\":1}}],[\"返回值不同\",{\"1\":{\"57\":1}}],[\"返回\",{\"1\":{\"3\":1}}],[\"并让它实现beannameaware\",{\"1\":{\"163\":1}}],[\"并在回调失败的24小时内不断重试\",{\"1\":{\"135\":1}}],[\"并在其中部署你的页面\",{\"1\":{\"3\":1}}],[\"并异步回调商户系统通知支付结果\",{\"1\":{\"135\":1}}],[\"并设置过期时间为\",{\"1\":{\"134\":1}}],[\"并设置日志保留天数为1天\",{\"1\":{\"114\":1}}],[\"并校验商户号\",{\"1\":{\"134\":1,\"135\":1}}],[\"并提示用户重新进行支付\",{\"1\":{\"131\":1}}],[\"并提供了任务状态管理和分片管理机制\",{\"1\":{\"128\":1}}],[\"并引导用户进行后续操作\",{\"1\":{\"131\":1}}],[\"并引导用户进行支付操作\",{\"1\":{\"131\":1}}],[\"并通知用户重新进行支付\",{\"1\":{\"131\":1}}],[\"并进行相应的业务处理\",{\"1\":{\"131\":1}}],[\"并保存到数据库中\",{\"1\":{\"128\":1}}],[\"并清除过期任务\",{\"1\":{\"122\":1}}],[\"并触发过期任务\",{\"1\":{\"109\":1,\"112\":1}}],[\"并启动kafka消费者\",{\"1\":{\"109\":1,\"112\":1}}],[\"并返回提交结果\",{\"1\":{\"103\":1}}],[\"并调用\",{\"1\":{\"103\":1}}],[\"并以此引出spring的核心要点\",{\"1\":{\"94\":1}}],[\"并将结果转换为字符串\",{\"1\":{\"134\":1}}],[\"并将支付相关功能\",{\"1\":{\"130\":1}}],[\"并将任务添加到检查点服务中\",{\"1\":{\"109\":1,\"112\":1}}],[\"并将advice连同切入点匹配器和切面类等信息一并封装到advisor\",{\"1\":{\"94\":2,\"143\":1,\"144\":2}}],[\"并将它们添加到\",{\"1\":{\"61\":1}}],[\"并将其放置于\",{\"1\":{\"7\":1}}],[\"并不要求接口和实现接口的类具有\",{\"1\":{\"55\":1}}],[\"并且不会管那些被配置成\",{\"1\":{\"161\":1}}],[\"并且不允许定义为\",{\"1\":{\"55\":1}}],[\"并且更加幸运的是\",{\"1\":{\"155\":1}}],[\"并且左右两个子树都是一棵平衡二叉树\",{\"1\":{\"95\":1}}],[\"并且beandefinition接口中包含了这个类的class信息以及是否是单例等\",{\"1\":{\"94\":1,\"149\":1,\"150\":1,\"152\":1}}],[\"并且可以从异常中恢复\",{\"1\":{\"68\":1}}],[\"并且可以通过此链接访问了\",{\"1\":{\"3\":1}}],[\"并且这个类可以在运行时才加载进来\",{\"1\":{\"67\":1}}],[\"并且还需要类型转换\",{\"1\":{\"63\":1}}],[\"并且从\",{\"1\":{\"55\":1}}],[\"并且\",{\"1\":{\"44\":1}}],[\"并且在实现时需要应用到之前拓扑排序的算法\",{\"1\":{\"95\":1}}],[\"并且在\",{\"1\":{\"28\":1,\"82\":1}}],[\"并且在需要修改\",{\"1\":{\"26\":1,\"80\":1}}],[\"并且在调试的时候可以不影响其他模块\",{\"1\":{\"26\":1,\"80\":1}}],[\"并添加\",{\"1\":{\"10\":1}}],[\"并激活\",{\"1\":{\"5\":1}}],[\"并点击保存\",{\"1\":{\"3\":1}}],[\"raw\",{\"1\":{\"145\":2}}],[\"range\",{\"1\":{\"42\":2}}],[\"r树是用来做空间数据存储的树状数据结构\",{\"1\":{\"95\":1}}],[\"r\",{\"1\":{\"61\":3,\"95\":2}}],[\"rockbenben\",{\"1\":{\"11\":2}}],[\"rollup\",{\"1\":{\"8\":1}}],[\"rootbeandefinition\",{\"1\":{\"153\":1}}],[\"root\",{\"1\":{\"3\":1}}],[\"running\",{\"1\":{\"67\":1}}],[\"runtime\",{\"1\":{\"47\":1,\"67\":1}}],[\"run\",{\"1\":{\"3\":2,\"14\":1,\"31\":2,\"67\":1,\"74\":1,\"85\":2}}],[\"received\",{\"1\":{\"153\":1}}],[\"relationship\",{\"1\":{\"153\":1}}],[\"repeatedly\",{\"1\":{\"147\":1}}],[\"repository\",{\"1\":{\"3\":2,\"11\":1}}],[\"retrieve\",{\"1\":{\"163\":1}}],[\"retrynexttask\",{\"1\":{\"116\":1}}],[\"return\",{\"1\":{\"26\":2,\"42\":2,\"49\":2,\"54\":2,\"60\":5,\"61\":1,\"63\":7,\"69\":1,\"80\":2,\"145\":8,\"146\":9,\"147\":4,\"148\":3,\"153\":11,\"155\":2,\"163\":6}}],[\"remove\",{\"1\":{\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"145\":1,\"147\":1,\"153\":2,\"155\":1}}],[\"removed\",{\"1\":{\"72\":1,\"147\":1}}],[\"registershutdownhook\",{\"1\":{\"163\":1}}],[\"registerdependentbean\",{\"1\":{\"153\":1}}],[\"registered\",{\"1\":{\"153\":2}}],[\"register\",{\"1\":{\"109\":1,\"112\":1}}],[\"redis\",{\"1\":{\"114\":3,\"116\":3,\"134\":5}}],[\"redis缓存管理\",{\"1\":{\"113\":1}}],[\"red\",{\"1\":{\"95\":1}}],[\"redundant\",{\"1\":{\"55\":1}}],[\"render\",{\"1\":{\"67\":1}}],[\"reflective\",{\"1\":{\"67\":4}}],[\"reflection\",{\"1\":{\"67\":11}}],[\"reflect\",{\"1\":{\"67\":2}}],[\"referenced\",{\"1\":{\"66\":4}}],[\"reference\",{\"1\":{\"49\":1,\"153\":2}}],[\"resolution\",{\"1\":{\"95\":1,\"153\":1}}],[\"resolved\",{\"1\":{\"67\":1}}],[\"resolve\",{\"1\":{\"8\":1}}],[\"resources\",{\"1\":{\"72\":1}}],[\"restricted\",{\"1\":{\"67\":1}}],[\"restrictions\",{\"1\":{\"67\":1}}],[\"resultdto<\",{\"1\":{\"105\":1}}],[\"resultdto<uuidresultvo>\",{\"1\":{\"105\":1}}],[\"resultdto<submitresultvo>\",{\"1\":{\"105\":1}}],[\"result\",{\"1\":{\"61\":8,\"63\":4,\"67\":1}}],[\"requires\",{\"1\":{\"67\":1}}],[\"require\",{\"1\":{\"51\":1}}],[\"requiredtype\",{\"1\":{\"151\":3,\"153\":11}}],[\"required\",{\"1\":{\"14\":1,\"52\":1,\"148\":1}}],[\"realization\",{\"0\":{\"31\":1,\"85\":1},\"1\":{\"24\":1,\"31\":1,\"78\":1,\"85\":1}}],[\"readme\",{\"1\":{\"6\":1}}],[\"reading\",{\"1\":{\"5\":1,\"7\":3}}],[\"read\",{\"1\":{\"3\":1,\"7\":1}}],[\"re\",{\"1\":{\"3\":2,\"14\":1}}],[\"页面配置\",{\"2\":{\"20\":1,\"23\":1}}],[\"页面构建和独立的读书笔记搜索索引\",{\"1\":{\"7\":1}}],[\"页面\",{\"1\":{\"3\":1,\"14\":1}}],[\"页面开发攻略和网站相关的工具和知识收集\",{\"1\":{\"2\":1}}],[\"页签\",{\"1\":{\"3\":1}}],[\"报错\",{\"1\":{\"3\":1}}],[\"在应用上下文装配配置文件之后立即调用\",{\"1\":{\"162\":1}}],[\"在其存活期间的指定时刻完成一些相关操作\",{\"1\":{\"161\":1}}],[\"在此作用域下\",{\"1\":{\"161\":1}}],[\"在此基础上还引入了不同的配置方式\",{\"1\":{\"94\":1}}],[\"在创建好交给使用者之后则不会再管理后续的生命周期\",{\"1\":{\"161\":1}}],[\"在bean建立过程当中\",{\"1\":{\"155\":1}}],[\"在b+树基础上\",{\"1\":{\"95\":1}}],[\"在b+树的非根和非叶子结点再增加指向兄弟的指针\",{\"1\":{\"95\":1}}],[\"在支付订单落库的同时\",{\"1\":{\"134\":1}}],[\"在进行对接之前\",{\"1\":{\"134\":1}}],[\"在数据层面上及时\",{\"1\":{\"99\":1}}],[\"在根结点的基础上建起一棵树\",{\"1\":{\"95\":1}}],[\"在计算机科学中\",{\"1\":{\"95\":1}}],[\"在一个增删查改比较频繁的数据结构中\",{\"1\":{\"95\":1}}],[\"在构建其知识体系时要避免自己再造轮子\",{\"1\":{\"95\":1}}],[\"在对ioc有了初步的认知后\",{\"1\":{\"94\":1}}],[\"在spring基础\",{\"1\":{\"94\":2}}],[\"在使用静态变量和方法时不用再指明\",{\"1\":{\"66\":1}}],[\"在使用这些基本类型对应的包装类型时\",{\"1\":{\"42\":1}}],[\"在覆盖\",{\"1\":{\"61\":1}}],[\"在很多情况下\",{\"1\":{\"55\":1}}],[\"在加载类和结构到虚拟机后\",{\"1\":{\"47\":1}}],[\"在新窗口打开\",{\"1\":{\"45\":1,\"49\":1,\"51\":1,\"52\":1,\"72\":1,\"73\":1}}],[\"在运行开始之前就可以确定\",{\"1\":{\"34\":1,\"88\":1}}],[\"在最开始就可以确定\",{\"1\":{\"34\":1,\"88\":1}}],[\"在终端中输入命令\",{\"1\":{\"17\":1}}],[\"在项目目录下打开终端\",{\"1\":{\"17\":1}}],[\"在你的项目中\",{\"1\":{\"13\":1}}],[\"在将一个参数传入一个方法时\",{\"1\":{\"49\":1}}],[\"在将\",{\"1\":{\"9\":1}}],[\"在生成静态页面后\",{\"1\":{\"7\":1}}],[\"在生成链接时将被省略\",{\"1\":{\"5\":1}}],[\"在\",{\"1\":{\"3\":1,\"28\":1,\"30\":1,\"31\":1,\"42\":1,\"55\":2,\"82\":1,\"84\":1,\"85\":1,\"162\":1}}],[\"在页面右上方点击\",{\"1\":{\"3\":1}}],[\"在部署时能够正确访问和修改你的仓库内容\",{\"1\":{\"3\":1}}],[\"在弹出的页面中选择\",{\"1\":{\"3\":1}}],[\"pvs\",{\"1\":{\"163\":2}}],[\"ps\",{\"1\":{\"152\":1}}],[\"put\",{\"1\":{\"145\":4,\"153\":1,\"155\":1}}],[\"public\",{\"1\":{\"6\":3,\"8\":2,\"26\":4,\"28\":8,\"42\":1,\"44\":1,\"49\":4,\"54\":9,\"55\":13,\"56\":6,\"59\":9,\"60\":3,\"61\":1,\"62\":2,\"63\":17,\"66\":14,\"69\":3,\"80\":4,\"82\":8,\"99\":1,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"153\":4,\"155\":2,\"163\":24}}],[\"pipelines\",{\"1\":{\"72\":1}}],[\"prd\",{\"1\":{\"99\":1}}],[\"predestroy注解替代\",{\"1\":{\"162\":1}}],[\"predestroy注解的方法\",{\"1\":{\"162\":1}}],[\"pre\",{\"1\":{\"147\":1}}],[\"present\",{\"1\":{\"67\":1}}],[\"preferable\",{\"1\":{\"67\":1}}],[\"prototypeinstance\",{\"1\":{\"153\":3}}],[\"prototype\",{\"1\":{\"153\":1,\"158\":1,\"161\":4,\"162\":1}}],[\"protected\",{\"1\":{\"54\":2,\"55\":4,\"56\":2,\"59\":2,\"63\":7,\"145\":1,\"146\":3,\"147\":1,\"153\":1,\"155\":1}}],[\"processor\",{\"1\":{\"163\":6}}],[\"process\",{\"1\":{\"153\":1}}],[\"processed\",{\"1\":{\"146\":1}}],[\"proxied\",{\"1\":{\"145\":1,\"146\":1}}],[\"proxytargetclass\",{\"1\":{\"147\":1}}],[\"proxytypes\",{\"1\":{\"145\":1}}],[\"proxyfactory\",{\"1\":{\"147\":15}}],[\"proxying\",{\"1\":{\"146\":2}}],[\"proxy\",{\"1\":{\"145\":7,\"146\":2,\"147\":11,\"148\":3,\"163\":1}}],[\"props\",{\"1\":{\"114\":1}}],[\"propertyvalues\",{\"1\":{\"163\":2}}],[\"property\",{\"1\":{\"42\":2}}],[\"producer\",{\"0\":{\"109\":1}}],[\"professional\",{\"1\":{\"75\":1}}],[\"provides\",{\"1\":{\"74\":1}}],[\"programs\",{\"1\":{\"74\":1}}],[\"program\",{\"1\":{\"45\":1,\"74\":1}}],[\"prim算法是从顶点出发\",{\"1\":{\"95\":1}}],[\"prim\",{\"1\":{\"95\":2}}],[\"print\",{\"1\":{\"163\":1}}],[\"printstacktrace\",{\"1\":{\"63\":3}}],[\"println\",{\"1\":{\"26\":2,\"28\":3,\"42\":4,\"47\":3,\"49\":7,\"52\":4,\"55\":5,\"56\":2,\"60\":2,\"61\":2,\"62\":1,\"63\":3,\"66\":4,\"80\":2,\"82\":3}}],[\"private\",{\"1\":{\"11\":1,\"26\":3,\"27\":1,\"44\":1,\"49\":2,\"54\":4,\"55\":6,\"56\":1,\"60\":3,\"62\":1,\"63\":9,\"65\":2,\"66\":4,\"67\":2,\"69\":1,\"80\":3,\"81\":1,\"155\":3,\"163\":5}}],[\"pdai\",{\"1\":{\"39\":1,\"93\":1,\"95\":2,\"143\":1,\"149\":1,\"163\":29}}],[\"p\",{\"1\":{\"36\":2,\"90\":2,\"98\":2}}],[\"platform\",{\"1\":{\"67\":1}}],[\"plantuml\",{\"1\":{\"29\":1,\"83\":1}}],[\"plantuml在新窗口打开\",{\"1\":{\"29\":1,\"83\":1}}],[\"playing\",{\"1\":{\"28\":3,\"82\":3}}],[\"play\",{\"1\":{\"28\":7,\"82\":7}}],[\"plugins\",{\"1\":{\"5\":1,\"15\":1}}],[\"persistentconsumer\",{\"1\":{\"119\":1,\"121\":5,\"122\":1,\"124\":1,\"126\":1,\"127\":5,\"128\":1}}],[\"persistentconsumer会从triggeredpersistenttask\",{\"1\":{\"108\":1}}],[\"persistentconsumer会从persistenttask\",{\"1\":{\"108\":1}}],[\"persistenttask\",{\"1\":{\"106\":1,\"108\":1,\"119\":1,\"121\":1,\"127\":1}}],[\"persistent\",{\"1\":{\"106\":4}}],[\"person\",{\"1\":{\"26\":3,\"80\":3}}],[\"permgen\",{\"1\":{\"72\":1}}],[\"permission\",{\"1\":{\"67\":1}}],[\"permissions\",{\"1\":{\"3\":2}}],[\"performed\",{\"1\":{\"67\":1}}],[\"performance\",{\"1\":{\"67\":3}}],[\"perform\",{\"1\":{\"67\":2}}],[\"percussion\",{\"1\":{\"28\":5,\"82\":5}}],[\"pnpm\",{\"1\":{\"15\":1,\"16\":1,\"17\":3}}],[\"png\",{\"1\":{\"8\":3,\"99\":1}}],[\"pop\",{\"1\":{\"119\":1,\"120\":1,\"121\":1,\"127\":1}}],[\"pointcuts\",{\"1\":{\"146\":1}}],[\"pointto\",{\"1\":{\"109\":1,\"110\":1,\"111\":1,\"112\":1}}],[\"point\",{\"1\":{\"96\":1}}],[\"postconstruct和\",{\"1\":{\"162\":1}}],[\"postconstruct注解的方法\",{\"1\":{\"162\":1}}],[\"postprocessproperties\",{\"1\":{\"163\":4}}],[\"postprocessafterinstantiation\",{\"1\":{\"163\":4}}],[\"postprocessafterinitialization\",{\"1\":{\"144\":1,\"145\":1,\"162\":1,\"163\":4}}],[\"postprocessbeanfactory\",{\"1\":{\"163\":3}}],[\"postprocessbeforeinitialization\",{\"1\":{\"163\":4}}],[\"postprocessbeforeinitialzation\",{\"1\":{\"162\":1}}],[\"postprocessbeforeinstantiation\",{\"1\":{\"144\":1,\"163\":4}}],[\"postprocessbeforeinstantiation和postprocessafterinitialization\",{\"1\":{\"144\":1}}],[\"post\",{\"1\":{\"104\":3,\"105\":2,\"165\":1}}],[\"posts\",{\"0\":{\"167\":1},\"1\":{\"5\":3}}],[\"possible\",{\"1\":{\"67\":1}}],[\"powerful\",{\"1\":{\"67\":1}}],[\"pool\",{\"1\":{\"45\":3,\"47\":3}}],[\"portability\",{\"1\":{\"67\":1}}],[\"port\",{\"1\":{\"10\":1}}],[\"pay\",{\"0\":{\"139\":1},\"1\":{\"134\":1}}],[\"parent\",{\"1\":{\"153\":2}}],[\"parentbeanfactory\",{\"1\":{\"153\":7}}],[\"param\",{\"1\":{\"145\":3,\"146\":4,\"147\":5,\"163\":1}}],[\"parallel\",{\"1\":{\"72\":1}}],[\"participant\",{\"1\":{\"105\":5,\"110\":6,\"116\":8,\"121\":8,\"127\":8}}],[\"parsed\",{\"1\":{\"42\":1}}],[\"parseint\",{\"1\":{\"42\":1}}],[\"pass\",{\"1\":{\"49\":2}}],[\"passbyvalueexample\",{\"1\":{\"49\":2}}],[\"password\",{\"1\":{\"10\":1}}],[\"package\",{\"1\":{\"16\":1,\"72\":1,\"163\":1}}],[\"pacakge\",{\"1\":{\"16\":1}}],[\"path\",{\"1\":{\"6\":2}}],[\"pageid=281806270\",{\"1\":{\"142\":1}}],[\"pageid=247627340\",{\"1\":{\"99\":1}}],[\"pageid=328384322\",{\"1\":{\"142\":1}}],[\"pageid=321251922\",{\"1\":{\"142\":1}}],[\"pageid=331116336\",{\"1\":{\"142\":1}}],[\"pageid=318935708\",{\"1\":{\"142\":1}}],[\"pages\",{\"1\":{\"3\":3,\"9\":4,\"11\":2,\"99\":1,\"142\":5}}],[\"page\",{\"1\":{\"3\":3}}],[\"given\",{\"1\":{\"145\":1,\"146\":2,\"147\":2}}],[\"gitmind\",{\"1\":{\"99\":1}}],[\"gitee\",{\"1\":{\"9\":5}}],[\"github\",{\"1\":{\"3\":10,\"5\":1,\"6\":1,\"9\":3,\"10\":3,\"11\":3,\"13\":3,\"14\":2}}],[\"gateclient\",{\"1\":{\"114\":1,\"115\":1,\"116\":2}}],[\"gate\",{\"0\":{\"101\":1},\"1\":{\"114\":1}}],[\"graph\",{\"1\":{\"95\":1}}],[\"g\",{\"1\":{\"74\":1,\"126\":12}}],[\"generic\",{\"1\":{\"72\":1}}],[\"generalization\",{\"0\":{\"30\":1,\"84\":1},\"1\":{\"24\":1,\"30\":1,\"78\":1,\"84\":1}}],[\"general\",{\"1\":{\"3\":1}}],[\"gender\",{\"1\":{\"26\":6,\"80\":6}}],[\"getearlybeanreference\",{\"1\":{\"155\":1}}],[\"getexpiretime\",{\"1\":{\"109\":1,\"112\":1}}],[\"getmessage\",{\"1\":{\"153\":1}}],[\"getmergedlocalbeandefinition\",{\"1\":{\"153\":1}}],[\"getresourcedescription\",{\"1\":{\"153\":2}}],[\"getdependson\",{\"1\":{\"153\":1}}],[\"getparentbeanfactory\",{\"1\":{\"153\":1}}],[\"getproxy\",{\"1\":{\"147\":4}}],[\"getproxyclassloader\",{\"1\":{\"147\":1}}],[\"getbean\",{\"1\":{\"151\":5,\"152\":1,\"153\":9,\"163\":1}}],[\"gettargetclass\",{\"1\":{\"148\":1}}],[\"getter\",{\"1\":{\"54\":1}}],[\"getobject拿到a对象\",{\"1\":{\"155\":1}}],[\"getobject\",{\"1\":{\"155\":5}}],[\"getobjectforbeaninstance\",{\"1\":{\"153\":4}}],[\"getobjectaddress\",{\"1\":{\"49\":5}}],[\"getoriginalclassloader\",{\"1\":{\"147\":1}}],[\"getinterfaces\",{\"1\":{\"147\":1}}],[\"getid\",{\"1\":{\"54\":1}}],[\"getcachekey\",{\"1\":{\"145\":1}}],[\"getclassloader\",{\"1\":{\"147\":1}}],[\"getclass\",{\"1\":{\"59\":1,\"60\":2,\"145\":6,\"153\":1}}],[\"getadvicesandadvisorsforbean\",{\"1\":{\"145\":2,\"146\":1}}],[\"getscope\",{\"1\":{\"153\":1}}],[\"getsingleton\",{\"1\":{\"153\":2,\"155\":1}}],[\"getshard\",{\"1\":{\"119\":1,\"121\":1,\"127\":1}}],[\"getsavedproperty\",{\"1\":{\"42\":1}}],[\"getjediscluster\",{\"1\":{\"114\":1}}],[\"getvalue\",{\"1\":{\"54\":1,\"114\":1}}],[\"getgender\",{\"1\":{\"26\":1,\"80\":1}}],[\"getname\",{\"1\":{\"26\":1,\"49\":4,\"80\":1}}],[\"get\",{\"0\":{\"15\":1},\"1\":{\"15\":1,\"26\":1,\"63\":6,\"67\":1,\"69\":1,\"80\":1,\"104\":1,\"105\":1,\"145\":1,\"153\":2,\"155\":3}}],[\"goto\",{\"1\":{\"73\":2}}],[\"go\",{\"1\":{\"11\":1}}],[\"gh\",{\"1\":{\"3\":3,\"11\":1}}],[\"这两个接口实现\",{\"1\":{\"162\":1}}],[\"这些方法可以划分为以下几类\",{\"1\":{\"162\":1}}],[\"这些任务是已经到达执行时间\",{\"1\":{\"107\":1}}],[\"这些任务通常是需要在未来某个时间点执行的任务\",{\"1\":{\"107\":1}}],[\"这类循环依赖问题可以通过使用\",{\"1\":{\"160\":1}}],[\"这类循环依赖问题可以通过把bean改成单例的解决\",{\"1\":{\"160\":1}}],[\"这类循环依赖问题要找到\",{\"1\":{\"160\":1}}],[\"这类循环依赖问题解决方法很多\",{\"1\":{\"160\":1}}],[\"这段代码发生在createbeaninstance以后\",{\"1\":{\"155\":1}}],[\"这段代码很长\",{\"1\":{\"153\":1}}],[\"这时的a就是处于建立中的状态\",{\"1\":{\"155\":1}}],[\"这里是user\",{\"1\":{\"163\":1}}],[\"这里的对象是半成品对象\",{\"1\":{\"155\":1}}],[\"这里的对象是成熟对象\",{\"1\":{\"155\":1}}],[\"这里还会包括三块重点内容\",{\"1\":{\"150\":1}}],[\"这里展示树的整体知识体系结构和几种常见树类型\",{\"1\":{\"95\":1}}],[\"这在我们的各种管理系统\",{\"1\":{\"95\":1}}],[\"这便是springmvc\",{\"1\":{\"94\":1}}],[\"这就要求了散列函数要把所有域的值都考虑进来\",{\"1\":{\"61\":1}}],[\"这个包括了aspectjweavingenabler\",{\"1\":{\"162\":1}}],[\"这个包括了instantiationawarebeanpostprocessor\",{\"1\":{\"162\":1}}],[\"这个包括了beannameaware\",{\"1\":{\"162\":1}}],[\"这个包括了bean本身调用的方法和通过配置文件中<bean>的init\",{\"1\":{\"162\":1}}],[\"这个对象已经被生产出来了\",{\"1\":{\"155\":1}}],[\"这个cache的类型是objectfactory\",{\"1\":{\"155\":1}}],[\"这个方法很长\",{\"1\":{\"153\":1}}],[\"这个方法重载都是调用dogetbean方法进行实现的\",{\"1\":{\"153\":1}}],[\"这个方法的思路\",{\"1\":{\"152\":1}}],[\"这个类似于一个递归的数列\",{\"1\":{\"95\":1}}],[\"这个映射函数叫做散列函数\",{\"1\":{\"95\":1}}],[\"这个概念被称为信息隐藏或封装\",{\"1\":{\"54\":1}}],[\"这个时期方法区在hotspot中由本地内存的元空间\",{\"1\":{\"47\":1}}],[\"这个时期方法区在hotspot中由永久代\",{\"1\":{\"47\":1}}],[\"这个时期方法区在hotspot中是由永久代来实现的\",{\"1\":{\"47\":1}}],[\"这意味着\",{\"1\":{\"44\":1}}],[\"这是本文主要研究的内容\",{\"1\":{\"94\":1,\"149\":1}}],[\"这是因为\",{\"1\":{\"63\":1}}],[\"这是因为不支持默认方法的接口的维护成本太高了\",{\"1\":{\"55\":1}}],[\"这是为了确保可以使用父类实例的地方都可以使用子类实例\",{\"1\":{\"54\":1}}],[\"这是一种静态关系\",{\"1\":{\"34\":1,\"88\":1}}],[\"这是由评论插件\",{\"1\":{\"15\":1}}],[\"这通常发生在将仓库作为子路径部署时\",{\"1\":{\"13\":1}}],[\"这可能是\",{\"1\":{\"10\":1}}],[\"这与\",{\"1\":{\"7\":1}}],[\"这样下次获取这个单例的实例时只需要从缓存中获取\",{\"1\":{\"152\":1}}],[\"这样我们初步有了实现object\",{\"1\":{\"152\":1}}],[\"这样导致二叉查找树结构由于树的深度过大而造成磁盘i\",{\"1\":{\"95\":1}}],[\"这样的话就可以控制对字段的修改行为\",{\"1\":{\"54\":1}}],[\"这样\",{\"1\":{\"5\":1}}],[\"这样做可以触发\",{\"1\":{\"3\":1}}],[\"这种时刻可能有很多\",{\"1\":{\"161\":1}}],[\"这种循环依赖同样无法解决\",{\"1\":{\"158\":1}}],[\"这种情况的结果就是两个bean都不能完成初始化\",{\"1\":{\"157\":1}}],[\"这种方式来控制类的加载\",{\"1\":{\"67\":1}}],[\"这种方式导致我的资料分散\",{\"1\":{\"1\":1}}],[\"这种形式\",{\"1\":{\"62\":1}}],[\"这种使用双引号的形式创建字符串实例\",{\"1\":{\"47\":1}}],[\"这种设置使我能随时记录低于\",{\"1\":{\"5\":1}}],[\"这一步骤是确保\",{\"1\":{\"3\":1}}],[\"选择哪种或两者皆由具体业务场景决定\",{\"1\":{\"135\":1}}],[\"选择对应的三方支付接口\",{\"1\":{\"134\":2,\"135\":1}}],[\"选择最新的\",{\"1\":{\"3\":1}}],[\"选项\",{\"1\":{\"3\":1}}],[\"选中\",{\"1\":{\"3\":1}}],[\"wrapping\",{\"1\":{\"145\":1}}],[\"wrap\",{\"1\":{\"145\":1}}],[\"wrapifnecessary方法主要用于判断是否需要创建代理\",{\"1\":{\"145\":1}}],[\"wrapifnecessary\",{\"1\":{\"145\":2}}],[\"writing\",{\"1\":{\"67\":1}}],[\"write\",{\"1\":{\"3\":1}}],[\"we\",{\"1\":{\"147\":1}}],[\"webserverfactorycustomizer<tomcatservletwebserverfactory>\",{\"1\":{\"114\":1}}],[\"wesley\",{\"1\":{\"75\":1}}],[\"weixin\",{\"1\":{\"36\":1,\"90\":1}}],[\"watcher\",{\"0\":{\"118\":1}}],[\"wait\",{\"1\":{\"59\":3}}],[\"waline\",{\"1\":{\"7\":4,\"15\":2}}],[\"whz在新窗口打开\",{\"1\":{\"96\":1}}],[\"whz数据结构图画的好\",{\"1\":{\"96\":1}}],[\"what\",{\"1\":{\"73\":1}}],[\"which\",{\"1\":{\"67\":4}}],[\"when\",{\"1\":{\"55\":1,\"67\":2}}],[\"why\",{\"1\":{\"45\":1,\"51\":1,\"52\":1}}],[\"wujing\",{\"1\":{\"36\":1,\"90\":1}}],[\"www\",{\"1\":{\"36\":2,\"90\":2,\"98\":2,\"165\":1}}],[\"would\",{\"1\":{\"67\":1}}],[\"woman\",{\"1\":{\"26\":1,\"80\":1}}],[\"working\",{\"1\":{\"26\":1,\"80\":1}}],[\"work\",{\"1\":{\"26\":3,\"80\":3}}],[\"workflows\",{\"1\":{\"14\":1}}],[\"workflow\",{\"1\":{\"3\":3}}],[\"will\",{\"1\":{\"147\":1}}],[\"wind\",{\"1\":{\"28\":5,\"82\":5,\"98\":1}}],[\"windows\",{\"1\":{\"2\":1}}],[\"widget\",{\"1\":{\"6\":8}}],[\"without\",{\"1\":{\"67\":1}}],[\"with\",{\"0\":{\"15\":1},\"1\":{\"3\":1,\"15\":1,\"67\":1,\"72\":1,\"145\":1,\"147\":1,\"153\":1}}],[\">的解析类是aspectjautoproxybeandefinitionparser\",{\"1\":{\"144\":1}}],[\">|删除过期任务|\",{\"1\":{\"126\":1}}],[\">|查询过期任务|\",{\"1\":{\"126\":1}}],[\">|查询需要执行的任务|\",{\"1\":{\"126\":1}}],[\">|查询需要触发的任务|\",{\"1\":{\"126\":1}}],[\">|执行任务|\",{\"1\":{\"126\":1}}],[\">|发送任务到触发器|\",{\"1\":{\"126\":1}}],[\">|消费触发任务|\",{\"1\":{\"126\":1}}],[\">|消费持久化任务|\",{\"1\":{\"126\":1}}],[\">|提交消费偏移量|\",{\"1\":{\"126\":2}}],[\">|返回任务列表|\",{\"1\":{\"126\":3}}],[\">|返回结果|\",{\"1\":{\"126\":5}}],[\">|返回分片任务|\",{\"1\":{\"126\":2}}],[\">|保存任务到数据库|\",{\"1\":{\"126\":2}}],[\">|创建或更新分片总数|\",{\"1\":{\"126\":1}}],[\">|创建分片|\",{\"1\":{\"126\":1}}],[\">|createorupdateshardtotal|\",{\"1\":{\"126\":1}}],[\">|getshard|\",{\"1\":{\"126\":1}}],[\">|获取分片任务|\",{\"1\":{\"126\":1}}],[\">|填充分片|\",{\"1\":{\"126\":1}}],[\">|fillshards|\",{\"1\":{\"126\":1}}],[\">|刷新分片|\",{\"1\":{\"126\":1}}],[\">>\",{\"1\":{\"155\":2}}],[\">>persistentconsumer\",{\"1\":{\"121\":4,\"127\":4}}],[\">>shardmanager\",{\"1\":{\"121\":5,\"127\":5}}],[\">>gateclient\",{\"1\":{\"116\":1}}],[\">>httptaskhandler\",{\"1\":{\"116\":4}}],[\">>tasklifecyclemanager\",{\"1\":{\"121\":6,\"127\":6}}],[\">>taskrepository\",{\"1\":{\"121\":6,\"127\":6}}],[\">>taskhandlers\",{\"1\":{\"116\":2}}],[\">>timewheel\",{\"1\":{\"110\":2}}],[\">>timer\",{\"1\":{\"110\":1}}],[\">>timerservice\",{\"1\":{\"110\":5}}],[\">>redis\",{\"1\":{\"116\":5}}],[\">>internalcontroller\",{\"1\":{\"116\":2,\"121\":4,\"127\":4}}],[\">>queue\",{\"1\":{\"110\":1}}],[\">>cakeexecutor\",{\"1\":{\"116\":10}}],[\">>checkpointservice\",{\"1\":{\"110\":3}}],[\">>consumerclient\",{\"1\":{\"105\":1,\"121\":1,\"127\":1}}],[\">>客户端\",{\"1\":{\"105\":3}}],[\">>kafka\",{\"1\":{\"105\":3,\"110\":3,\"121\":3,\"127\":3}}],[\">>dispatcher\",{\"1\":{\"105\":1}}],[\">>uidgenerator\",{\"1\":{\"105\":2}}],[\">>opencontroller\",{\"1\":{\"105\":8}}],[\">=\",{\"1\":{\"42\":2}}],[\">\",{\"1\":{\"3\":6,\"6\":2,\"10\":2,\"35\":1,\"59\":1,\"89\":1,\"105\":1,\"146\":3,\"147\":2,\"148\":2,\"153\":5,\"155\":4,\"163\":1}}],[\"点击支付\",{\"1\":{\"131\":1}}],[\"点击右侧按钮\",{\"1\":{\"14\":1}}],[\"点击\",{\"1\":{\"3\":1,\"11\":2}}],[\"a此时能拿到b的对象顺利完成本身的初始化阶段二\",{\"1\":{\"155\":1}}],[\"a首先完成了初始化的第一步\",{\"1\":{\"155\":1}}],[\"a对象setter依赖b对象\",{\"1\":{\"155\":1}}],[\"afterprototypecreation\",{\"1\":{\"153\":2}}],[\"afterpropertiesset\",{\"1\":{\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"119\":2,\"162\":1,\"163\":3}}],[\"aoe\",{\"1\":{\"95\":2}}],[\"aopconfigexception\",{\"1\":{\"148\":2}}],[\"aopproxy\",{\"1\":{\"148\":1}}],[\"aopnamespacehandler注册了<aop\",{\"1\":{\"144\":1}}],[\"aopnamespacehandler\",{\"1\":{\"144\":1}}],[\"aop初始化的过程\",{\"1\":{\"144\":1}}],[\"aop实现原理详解之jdk代理实现\",{\"1\":{\"94\":1}}],[\"aop实现原理详解之cglib代理实现\",{\"1\":{\"94\":1}}],[\"aop实现原理详解之aop代理的创建\",{\"0\":{\"143\":1},\"1\":{\"143\":1}}],[\"aop实现原理详解之aop代理\",{\"1\":{\"94\":1}}],[\"aop实现原理详解之切面实现\",{\"1\":{\"94\":1}}],[\"aop原理解析的切面实现过程\",{\"1\":{\"94\":2,\"143\":1,\"144\":1}}],[\"aop也是基于ioc的bean加载来实现的\",{\"1\":{\"94\":1}}],[\"aop以及springmvc的源码分析\",{\"1\":{\"94\":1}}],[\"aop的代理\",{\"1\":{\"144\":1}}],[\"aop的基础\",{\"1\":{\"94\":1}}],[\"aop的案例和具体实现机制\",{\"1\":{\"93\":1}}],[\"aop\",{\"0\":{\"178\":1},\"1\":{\"94\":1,\"144\":2,\"147\":2,\"162\":1}}],[\"avl\",{\"1\":{\"95\":3}}],[\"avl树是为了解决可能退化成链表问题\",{\"1\":{\"95\":1}}],[\"avoided\",{\"1\":{\"67\":1}}],[\"avoid\",{\"1\":{\"67\":1}}],[\"available\",{\"1\":{\"67\":1,\"146\":1}}],[\"aid\",{\"1\":{\"67\":1}}],[\"able\",{\"1\":{\"67\":2}}],[\"abstractbeanfactory\",{\"1\":{\"153\":2}}],[\"abstractions\",{\"1\":{\"67\":1}}],[\"abstractextendclassexample\",{\"1\":{\"55\":2}}],[\"abstractclassexample\",{\"1\":{\"55\":6}}],[\"abstract\",{\"1\":{\"55\":7,\"66\":4}}],[\"adaptbeaninstance\",{\"1\":{\"153\":1}}],[\"advice\",{\"1\":{\"147\":1}}],[\"advisedsupport\",{\"1\":{\"148\":1}}],[\"advisedbeans\",{\"1\":{\"145\":4}}],[\"advisor\",{\"1\":{\"146\":2,\"147\":1}}],[\"advisorretrievalhelper\",{\"1\":{\"146\":2}}],[\"advisorsprefiltered\",{\"1\":{\"147\":1}}],[\"advisors\",{\"1\":{\"146\":9,\"147\":2}}],[\"advantages\",{\"1\":{\"67\":1}}],[\"addsingletonfactory\",{\"1\":{\"155\":1}}],[\"added\",{\"1\":{\"147\":1}}],[\"addadvisors\",{\"1\":{\"147\":1}}],[\"addinterface\",{\"1\":{\"147\":1}}],[\"addison\",{\"1\":{\"75\":1}}],[\"add\",{\"1\":{\"28\":2,\"61\":2,\"82\":2,\"109\":4,\"110\":3,\"111\":3,\"112\":4,\"146\":2,\"147\":1}}],[\"a2\",{\"1\":{\"66\":1}}],[\"a1\",{\"1\":{\"66\":1}}],[\"according\",{\"1\":{\"147\":1}}],[\"accumulators\",{\"1\":{\"72\":1}}],[\"accesslogvalve\",{\"1\":{\"114\":1}}],[\"accessing\",{\"1\":{\"67\":2}}],[\"access\",{\"1\":{\"63\":1,\"145\":1,\"147\":1}}],[\"accesswithinnerclassexample\",{\"1\":{\"54\":2}}],[\"accessexample\",{\"1\":{\"54\":3}}],[\"ac2\",{\"1\":{\"55\":2}}],[\"ac1\",{\"1\":{\"55\":1}}],[\"action\",{\"1\":{\"3\":1,\"10\":1,\"99\":1,\"142\":5}}],[\"actions\",{\"1\":{\"3\":2,\"9\":1,\"10\":2,\"13\":1,\"14\":1}}],[\"aaa\",{\"1\":{\"47\":2,\"52\":1}}],[\"aspect注解的切面类\",{\"1\":{\"144\":1}}],[\"aspectjawareadvisorautoproxycreator实现了两类接口\",{\"1\":{\"144\":1}}],[\"aspectjautoproxybeandefinitionparser的parse\",{\"1\":{\"144\":1}}],[\"aspectj\",{\"1\":{\"144\":2}}],[\"assign\",{\"1\":{\"65\":1}}],[\"assignment\",{\"1\":{\"51\":1}}],[\"assert\",{\"1\":{\"42\":1,\"146\":1}}],[\"association\",{\"0\":{\"34\":1,\"88\":1},\"1\":{\"24\":1,\"34\":1,\"78\":1,\"88\":1}}],[\"as\",{\"1\":{\"35\":1,\"67\":2,\"89\":1,\"145\":2,\"146\":1}}],[\"arithmetic\",{\"1\":{\"68\":1}}],[\"are\",{\"1\":{\"67\":2,\"73\":1,\"146\":1}}],[\"arr\",{\"1\":{\"63\":28}}],[\"array\",{\"1\":{\"42\":1}}],[\"arraylist<>\",{\"1\":{\"28\":1,\"82\":1,\"146\":1}}],[\"article\",{\"1\":{\"36\":1,\"90\":1,\"98\":1}}],[\"args\",{\"1\":{\"28\":1,\"49\":2,\"66\":3,\"82\":1,\"151\":2,\"153\":15,\"163\":3}}],[\"age=18\",{\"1\":{\"163\":1}}],[\"age\",{\"1\":{\"26\":6,\"80\":6,\"163\":6}}],[\"aggregation\",{\"0\":{\"32\":1,\"86\":1},\"1\":{\"24\":1,\"32\":1,\"78\":1,\"86\":1}}],[\"author\",{\"1\":{\"163\":6}}],[\"authentication\",{\"1\":{\"14\":1}}],[\"auto\",{\"1\":{\"146\":2}}],[\"autoproxyutils\",{\"1\":{\"147\":1}}],[\"autoproxy\",{\"1\":{\"144\":1}}],[\"autoproxy的handler\",{\"1\":{\"144\":1}}],[\"autoload\",{\"1\":{\"6\":3}}],[\"appid\",{\"1\":{\"105\":1,\"116\":4}}],[\"apply\",{\"1\":{\"146\":1,\"147\":1}}],[\"applicable\",{\"1\":{\"146\":1}}],[\"applicationcontext\",{\"1\":{\"162\":1,\"163\":7}}],[\"applicationcontextaware接口和initializingbean\",{\"1\":{\"163\":1}}],[\"applicationcontextaware\",{\"1\":{\"162\":2,\"163\":4}}],[\"applicationstartup\",{\"1\":{\"153\":1}}],[\"applications\",{\"1\":{\"67\":1}}],[\"application\",{\"1\":{\"67\":1,\"74\":1,\"163\":5}}],[\"applet\",{\"1\":{\"67\":1}}],[\"app\",{\"1\":{\"11\":1,\"99\":1,\"129\":3,\"163\":4}}],[\"apis\",{\"1\":{\"67\":1}}],[\"api\",{\"1\":{\"6\":1,\"54\":2,\"72\":1,\"104\":1,\"105\":1}}],[\"also\",{\"1\":{\"153\":1}}],[\"already\",{\"1\":{\"146\":1,\"147\":1}}],[\"alanlee\",{\"1\":{\"36\":1,\"90\":1}}],[\"algolia\",{\"1\":{\"5\":2}}],[\"allowearlyreference\",{\"1\":{\"155\":3}}],[\"allowed\",{\"1\":{\"55\":3}}],[\"allow\",{\"1\":{\"147\":1,\"153\":1}}],[\"allows\",{\"1\":{\"67\":1}}],[\"all\",{\"1\":{\"3\":1,\"14\":1,\"42\":1,\"146\":2}}],[\"answer\",{\"1\":{\"165\":1}}],[\"annotationconfigapplicationcontext\",{\"1\":{\"163\":2}}],[\"annotations\",{\"1\":{\"72\":1}}],[\"an\",{\"1\":{\"42\":1,\"52\":1,\"67\":4,\"146\":1,\"147\":1,\"148\":1}}],[\"animal\",{\"1\":{\"27\":7,\"81\":7}}],[\"any\",{\"1\":{\"26\":1,\"80\":1,\"153\":1}}],[\"anyname\",{\"1\":{\"5\":1}}],[\"and\",{\"0\":{\"46\":1},\"1\":{\"3\":2,\"14\":1,\"39\":1,\"42\":3,\"46\":1,\"55\":1,\"66\":1,\"67\":6,\"72\":3,\"73\":1,\"147\":1,\"153\":1,\"163\":1}}],[\"a\",{\"1\":{\"3\":1,\"27\":2,\"35\":4,\"49\":3,\"52\":2,\"55\":3,\"63\":3,\"65\":3,\"66\":20,\"67\":8,\"74\":1,\"81\":2,\"89\":4,\"95\":1,\"126\":4,\"134\":1,\"145\":2,\"147\":1,\"148\":1,\"153\":3,\"155\":1}}],[\"circular\",{\"1\":{\"153\":2}}],[\"customautowireconfigurer等等非常有用的工厂后处理器接口的方法\",{\"1\":{\"162\":1}}],[\"customizeproxyfactory\",{\"1\":{\"147\":1}}],[\"customize\",{\"1\":{\"114\":1}}],[\"currently\",{\"1\":{\"146\":1}}],[\"currenttime\",{\"1\":{\"110\":1}}],[\"cn\",{\"1\":{\"99\":1,\"165\":1}}],[\"cnblogs\",{\"1\":{\"36\":2,\"90\":2,\"98\":1}}],[\"cglib\",{\"1\":{\"163\":1}}],[\"cglib或jdk\",{\"1\":{\"144\":2}}],[\"cglib动态代理的实现\",{\"1\":{\"94\":1}}],[\"cglib代理和jdk代理\",{\"1\":{\"94\":1,\"143\":1}}],[\"certain\",{\"1\":{\"67\":1}}],[\"creation\",{\"1\":{\"72\":1,\"147\":1,\"148\":1,\"153\":1}}],[\"creating\",{\"1\":{\"67\":1,\"163\":1}}],[\"createbean\",{\"1\":{\"153\":3}}],[\"createaopproxy\",{\"1\":{\"147\":1,\"148\":2}}],[\"createproxy\",{\"1\":{\"145\":1,\"147\":1}}],[\"createorupdateshardtotal\",{\"1\":{\"119\":1,\"121\":1,\"127\":1}}],[\"createshard\",{\"1\":{\"119\":1,\"121\":1,\"127\":1}}],[\"createload\",{\"1\":{\"109\":1,\"112\":1}}],[\"createtask\",{\"1\":{\"105\":1}}],[\"create\",{\"1\":{\"3\":1,\"11\":1,\"120\":1,\"145\":1,\"147\":3,\"153\":1,\"163\":2}}],[\"creek\",{\"1\":{\"45\":1}}],[\"checkmergedbeandefinition\",{\"1\":{\"153\":1}}],[\"check\",{\"1\":{\"153\":2}}],[\"checks\",{\"1\":{\"147\":1}}],[\"checkpoint\",{\"1\":{\"109\":2,\"112\":2}}],[\"checkpointservice\",{\"1\":{\"109\":2,\"110\":2,\"111\":3,\"112\":2}}],[\"change\",{\"1\":{\"67\":1}}],[\"character\",{\"1\":{\"44\":1,\"52\":1}}],[\"charsequence\",{\"1\":{\"44\":1}}],[\"char\",{\"1\":{\"41\":1,\"42\":1,\"44\":2,\"52\":1}}],[\"chrome\",{\"1\":{\"2\":1}}],[\"c++\",{\"0\":{\"73\":1},\"1\":{\"39\":1,\"73\":9}}],[\"csdn\",{\"1\":{\"36\":1,\"90\":1,\"98\":1}}],[\"cakeexecutor\",{\"1\":{\"114\":3,\"116\":9}}],[\"called\",{\"1\":{\"67\":1,\"147\":1}}],[\"call\",{\"1\":{\"67\":1}}],[\"case\",{\"1\":{\"52\":4}}],[\"casting\",{\"1\":{\"51\":1}}],[\"cachekey\",{\"1\":{\"145\":10}}],[\"cache\",{\"1\":{\"42\":5,\"145\":1,\"153\":2,\"155\":3}}],[\"car\",{\"1\":{\"30\":2,\"84\":2}}],[\"catch\",{\"1\":{\"42\":1,\"63\":3,\"68\":1,\"153\":4}}],[\"cat\",{\"1\":{\"27\":5,\"81\":5}}],[\"canapply\",{\"1\":{\"146\":2}}],[\"candidate\",{\"1\":{\"146\":10}}],[\"candidateadvisors\",{\"1\":{\"146\":9}}],[\"can\",{\"1\":{\"26\":1,\"52\":1,\"67\":4,\"80\":1,\"146\":1,\"147\":2}}],[\"cannot\",{\"1\":{\"16\":1,\"42\":1,\"55\":2,\"65\":1,\"66\":4,\"148\":1}}],[\"cleanupafterbeancreationfailure\",{\"1\":{\"153\":1}}],[\"clazz\",{\"1\":{\"146\":5}}],[\"class类型和参数等来得到bean实例\",{\"1\":{\"151\":1}}],[\"class为true时在目标类不是接口或者代理类时优先使用cglib代理实现\",{\"1\":{\"148\":1}}],[\"class=\",{\"1\":{\"148\":1}}],[\"classloader\",{\"1\":{\"147\":13}}],[\"classes\",{\"1\":{\"67\":3}}],[\"classname\",{\"1\":{\"66\":2}}],[\"class<t>\",{\"1\":{\"151\":2,\"153\":3}}],[\"class<\",{\"1\":{\"59\":1,\"146\":3,\"147\":2,\"148\":1,\"163\":1}}],[\"class\",{\"1\":{\"26\":1,\"28\":4,\"30\":3,\"31\":2,\"32\":4,\"33\":3,\"34\":2,\"35\":1,\"44\":1,\"49\":3,\"54\":4,\"55\":5,\"56\":2,\"60\":1,\"62\":1,\"63\":6,\"66\":7,\"67\":11,\"69\":1,\"80\":1,\"82\":4,\"84\":3,\"85\":2,\"86\":4,\"87\":3,\"88\":2,\"89\":1,\"146\":4,\"147\":5,\"148\":1,\"151\":1,\"163\":6}}],[\"client\",{\"1\":{\"114\":1}}],[\"cloneconstructorexample\",{\"1\":{\"63\":8}}],[\"cloneexample\",{\"1\":{\"63\":13}}],[\"cloneable\",{\"1\":{\"63\":8}}],[\"clonenotsupportedexception\",{\"1\":{\"59\":1,\"63\":10}}],[\"clone\",{\"0\":{\"63\":1},\"1\":{\"11\":1,\"39\":1,\"59\":1,\"63\":22}}],[\"c\",{\"1\":{\"17\":1,\"73\":2,\"95\":1,\"126\":8,\"134\":1}}],[\"ctrl\",{\"1\":{\"17\":1}}],[\"copyfrom\",{\"1\":{\"147\":1}}],[\"course\",{\"1\":{\"106\":3}}],[\"counterparts\",{\"1\":{\"67\":1}}],[\"counter\",{\"0\":{\"15\":1},\"1\":{\"15\":1}}],[\"coreconfig\",{\"1\":{\"114\":1}}],[\"core和aop等技术基础上\",{\"1\":{\"94\":1}}],[\"correct\",{\"1\":{\"67\":1}}],[\"coverage\",{\"1\":{\"67\":1}}],[\"confluence\",{\"1\":{\"99\":1,\"142\":5}}],[\"configure\",{\"1\":{\"163\":1}}],[\"configured\",{\"1\":{\"42\":1,\"145\":1,\"147\":1,\"163\":1}}],[\"configuration\",{\"1\":{\"163\":1}}],[\"configurationclasspostprocessor\",{\"1\":{\"162\":1}}],[\"configurablelistablebeanfactory\",{\"1\":{\"147\":2,\"163\":2}}],[\"config\",{\"1\":{\"5\":1,\"13\":1,\"144\":1,\"148\":12}}],[\"concurrenthashmap<string\",{\"1\":{\"155\":1}}],[\"concurrent\",{\"1\":{\"72\":1}}],[\"concerns\",{\"1\":{\"67\":1}}],[\"consumer\",{\"0\":{\"113\":1},\"1\":{\"119\":1,\"122\":1,\"124\":1,\"125\":1,\"128\":1}}],[\"consumerclient\",{\"1\":{\"105\":1,\"119\":1,\"120\":1,\"121\":2,\"122\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":2,\"128\":1}}],[\"consideration\",{\"1\":{\"67\":1}}],[\"consequently\",{\"1\":{\"67\":1}}],[\"constructor\",{\"1\":{\"67\":2}}],[\"constant\",{\"1\":{\"47\":1}}],[\"const\",{\"1\":{\"6\":2}}],[\"continue\",{\"1\":{\"146\":1}}],[\"containsbeandefinition\",{\"1\":{\"153\":1}}],[\"contains\",{\"1\":{\"145\":1}}],[\"container\",{\"1\":{\"94\":1}}],[\"context\",{\"1\":{\"66\":4,\"67\":1,\"163\":10}}],[\"control\",{\"1\":{\"14\":1}}],[\"commitcallback\",{\"1\":{\"116\":2}}],[\"combination\",{\"1\":{\"66\":1}}],[\"compiler\",{\"1\":{\"74\":1}}],[\"component\",{\"1\":{\"163\":3}}],[\"compound\",{\"1\":{\"51\":1}}],[\"composition\",{\"0\":{\"33\":1,\"87\":1},\"1\":{\"24\":1,\"33\":1,\"78\":1,\"87\":1}}],[\"compareto\",{\"1\":{\"55\":1}}],[\"compareable\",{\"1\":{\"55\":1}}],[\"comparable<string>\",{\"1\":{\"44\":1}}],[\"company\",{\"1\":{\"33\":3,\"87\":3}}],[\"computer\",{\"1\":{\"32\":4,\"86\":4}}],[\"com\",{\"1\":{\"3\":1,\"11\":2,\"29\":1,\"36\":2,\"66\":1,\"67\":1,\"83\":1,\"90\":2,\"98\":2,\"99\":1,\"142\":6,\"165\":1}}],[\"code\",{\"1\":{\"3\":1,\"67\":9,\"146\":2,\"147\":1}}],[\"按钮\",{\"1\":{\"3\":1}}],[\"td\",{\"1\":{\"126\":1}}],[\"tag\",{\"1\":{\"153\":4}}],[\"targetclass\",{\"1\":{\"148\":4}}],[\"targets\",{\"1\":{\"147\":1}}],[\"targetsource\",{\"1\":{\"146\":2,\"147\":5,\"148\":1}}],[\"targetsourcedbeans\",{\"1\":{\"145\":1}}],[\"target\",{\"1\":{\"146\":1,\"148\":4}}],[\"take\",{\"1\":{\"110\":1}}],[\"taskid\",{\"1\":{\"119\":1}}],[\"taskentity\",{\"1\":{\"119\":1}}],[\"taskrepositoryhelper\",{\"1\":{\"119\":1}}],[\"taskrepository\",{\"1\":{\"119\":1,\"121\":7,\"124\":1,\"126\":1,\"127\":7,\"128\":1}}],[\"tasklifecyclemanagerimpl\",{\"1\":{\"119\":1}}],[\"tasklifecyclemanager\",{\"1\":{\"119\":2,\"121\":7,\"122\":1,\"124\":1,\"126\":1,\"127\":7,\"128\":1}}],[\"taskmanager\",{\"1\":{\"114\":1}}],[\"taskhandler\",{\"1\":{\"114\":2}}],[\"taskhandlers\",{\"1\":{\"114\":1,\"116\":3}}],[\"task\",{\"1\":{\"104\":1,\"105\":2,\"110\":2,\"116\":7}}],[\"table\",{\"1\":{\"95\":1}}],[\"typecheckonly\",{\"1\":{\"153\":3}}],[\"type\",{\"1\":{\"52\":1,\"67\":1,\"69\":1,\"72\":2}}],[\"types\",{\"1\":{\"52\":1,\"67\":1}}],[\"transformedbeanname\",{\"1\":{\"153\":1}}],[\"trade\",{\"1\":{\"128\":3}}],[\"triggeredpersistenttask\",{\"1\":{\"106\":1,\"108\":1,\"119\":1,\"121\":1,\"127\":1}}],[\"triggered\",{\"1\":{\"106\":2}}],[\"trigger\",{\"1\":{\"106\":3}}],[\"trie\",{\"1\":{\"95\":3}}],[\"trie树本身是一种有限状态自动机\",{\"1\":{\"95\":1}}],[\"trie树是自然语言处理中最常用的数据结构\",{\"1\":{\"95\":1}}],[\"treap\",{\"1\":{\"95\":1}}],[\"tree\",{\"1\":{\"11\":1,\"95\":5}}],[\"tryruntask\",{\"1\":{\"114\":1,\"116\":2}}],[\"tryupdatecommitoffset\",{\"1\":{\"109\":1,\"112\":1}}],[\"trymark\",{\"1\":{\"109\":1,\"112\":1}}],[\"try\",{\"1\":{\"42\":1,\"63\":3,\"68\":1,\"72\":1,\"153\":6}}],[\"true\",{\"1\":{\"42\":3,\"47\":2,\"60\":7,\"61\":1,\"145\":1,\"147\":2,\"148\":1}}],[\"truck\",{\"1\":{\"30\":2,\"84\":2}}],[\"timewheel\",{\"1\":{\"109\":2,\"110\":1,\"111\":3,\"112\":2}}],[\"timerservice\",{\"1\":{\"109\":2,\"110\":11,\"111\":11,\"112\":2}}],[\"timer\",{\"1\":{\"109\":2,\"110\":3,\"111\":3,\"112\":2}}],[\"time\",{\"1\":{\"72\":1,\"128\":1}}],[\"timeout\",{\"1\":{\"14\":1,\"59\":2}}],[\"title\",{\"1\":{\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1}}],[\"t\",{\"1\":{\"26\":1,\"51\":1,\"52\":1,\"69\":9,\"80\":1,\"147\":1,\"151\":2,\"153\":5,\"155\":1}}],[\"toarray\",{\"1\":{\"146\":1}}],[\"total\",{\"1\":{\"121\":1,\"127\":1}}],[\"todo\",{\"1\":{\"114\":1}}],[\"tomcat\",{\"1\":{\"114\":2}}],[\"tomcataccesslogcustomizer\",{\"1\":{\"114\":1}}],[\"tools\",{\"1\":{\"67\":1,\"74\":1}}],[\"tostringexample\",{\"1\":{\"62\":6}}],[\"tostring\",{\"0\":{\"62\":1},\"1\":{\"39\":1,\"49\":1,\"59\":1,\"62\":1,\"153\":2,\"163\":3}}],[\"to\",{\"1\":{\"8\":1,\"11\":1,\"42\":1,\"55\":1,\"65\":1,\"67\":11,\"74\":1,\"145\":1,\"146\":5,\"147\":5,\"153\":4}}],[\"topic中消费消息\",{\"1\":{\"108\":2}}],[\"topic的处理逻辑\",{\"1\":{\"108\":2}}],[\"topic\",{\"0\":{\"106\":1},\"1\":{\"103\":2,\"106\":3,\"107\":2,\"111\":2}}],[\"topological\",{\"1\":{\"95\":2}}],[\"top\",{\"1\":{\"7\":3}}],[\"tech\",{\"1\":{\"163\":21}}],[\"test\",{\"1\":{\"67\":3}}],[\"text\",{\"1\":{\"7\":1}}],[\"temporary\",{\"1\":{\"153\":1}}],[\"temp\",{\"1\":{\"5\":3}}],[\"templatebuild\",{\"1\":{\"5\":1,\"6\":1}}],[\"template\",{\"1\":{\"3\":1}}],[\"ts\",{\"1\":{\"5\":7,\"7\":1,\"13\":1,\"15\":1}}],[\"than\",{\"1\":{\"67\":1}}],[\"that\",{\"1\":{\"60\":4,\"67\":2,\"146\":2,\"147\":1,\"153\":1}}],[\"throw\",{\"1\":{\"148\":1,\"153\":8}}],[\"throwable\",{\"1\":{\"59\":1,\"68\":1}}],[\"throws\",{\"1\":{\"59\":5,\"63\":4,\"148\":1,\"151\":5,\"153\":5,\"155\":2,\"163\":10}}],[\"there\",{\"1\":{\"146\":1,\"153\":1}}],[\"therefore\",{\"1\":{\"67\":1}}],[\"thealgorithms\",{\"1\":{\"96\":1}}],[\"then\",{\"1\":{\"67\":1}}],[\"their\",{\"1\":{\"67\":2}}],[\"the\",{\"1\":{\"42\":2,\"44\":1,\"56\":1,\"67\":5,\"73\":1,\"74\":2,\"145\":10,\"146\":12,\"147\":18,\"153\":2}}],[\"theme\",{\"1\":{\"1\":1,\"5\":4,\"15\":1}}],[\"this\",{\"1\":{\"3\":1,\"49\":3,\"54\":1,\"56\":3,\"60\":4,\"62\":1,\"66\":4,\"67\":1,\"69\":1,\"145\":7,\"146\":3,\"147\":6,\"153\":2,\"155\":6,\"163\":5}}],[\"然后将切面类的所有切面方法根据使用的注解生成对应advice\",{\"1\":{\"144\":1}}],[\"然后更新退款记录订单状态\",{\"1\":{\"136\":1}}],[\"然后分发到不同的topic\",{\"1\":{\"102\":1}}],[\"然后理解数据结构中逻辑结构之树\",{\"1\":{\"95\":1}}],[\"然后组成一个\",{\"1\":{\"61\":1}}],[\"然后返回这个对象引用\",{\"1\":{\"47\":1}}],[\"然后点击\",{\"1\":{\"11\":1}}],[\"然后点击页面右上角的\",{\"1\":{\"3\":1}}],[\"然后会跳转至\",{\"1\":{\"11\":1}}],[\"然后\",{\"1\":{\"3\":1}}],[\"然而\",{\"1\":{\"1\":1}}],[\"访问父类的成员\",{\"1\":{\"56\":1}}],[\"访问父类的构造函数\",{\"1\":{\"56\":1}}],[\"访问权限\",{\"0\":{\"54\":1},\"1\":{\"39\":1}}],[\"访问\",{\"1\":{\"3\":1}}],[\"搭建线上数据看板等方式统一数据出口\",{\"1\":{\"99\":1}}],[\"搭建\",{\"0\":{\"3\":1}}],[\"🍥\",{\"0\":{\"3\":1}}],[\"说明书\",{\"1\":{\"2\":1}}],[\"以秒为单位获取当前时间戳\",{\"1\":{\"134\":1}}],[\"以订单维度进行根据不同的业务需求进行处理\",{\"1\":{\"99\":1}}],[\"以统计电商平台售后单量\",{\"1\":{\"99\":1}}],[\"以加快查找的速度\",{\"1\":{\"95\":1}}],[\"以xml配置为例\",{\"1\":{\"94\":2,\"149\":1,\"150\":1}}],[\"以上抛出了\",{\"1\":{\"63\":1}}],[\"以及何时被销毁\",{\"1\":{\"161\":1}}],[\"以及与其他服务的通信等功能\",{\"1\":{\"113\":1,\"118\":1}}],[\"以及spring如何实现将资源配置\",{\"1\":{\"94\":1,\"149\":1}}],[\"以及springmvc框架的案例和实现机制\",{\"1\":{\"93\":1}}],[\"以及\",{\"1\":{\"54\":1}}],[\"以至于这个时期说方法区就是指永久代\",{\"1\":{\"47\":1}}],[\"以下是主要流程的详细描述\",{\"1\":{\"111\":1}}],[\"以下代码中\",{\"1\":{\"49\":1}}],[\"以下类图使用\",{\"1\":{\"29\":1,\"83\":1}}],[\"以下\",{\"1\":{\"26\":1,\"80\":1}}],[\"以创建一个基于此模板的新仓库\",{\"1\":{\"3\":1}}],[\"以分类\",{\"1\":{\"2\":1}}],[\"以\",{\"1\":{\"2\":1}}],[\"n个节点离散分配\",{\"1\":{\"95\":1}}],[\"nio\",{\"1\":{\"72\":1}}],[\"nosuchbeandefinitionexception\",{\"1\":{\"153\":1}}],[\"no\",{\"1\":{\"146\":2,\"147\":1,\"153\":3}}],[\"no>\",{\"1\":{\"128\":1}}],[\"no>317310638640000046083<\",{\"1\":{\"128\":1}}],[\"no是\",{\"1\":{\"128\":1}}],[\"non\",{\"1\":{\"66\":2,\"67\":2}}],[\"notifyall\",{\"1\":{\"59\":1}}],[\"notify\",{\"1\":{\"59\":1}}],[\"notion\",{\"1\":{\"1\":1}}],[\"note\",{\"1\":{\"35\":1,\"89\":1}}],[\"not\",{\"1\":{\"14\":1,\"16\":1,\"55\":4,\"67\":3,\"145\":1,\"146\":3,\"147\":2,\"153\":1,\"166\":1}}],[\"nfe\",{\"1\":{\"42\":1}}],[\"number\",{\"1\":{\"62\":4}}],[\"numberformatexception\",{\"1\":{\"42\":1}}],[\"nullable\",{\"1\":{\"145\":1,\"146\":2,\"147\":3,\"153\":4}}],[\"null\",{\"1\":{\"42\":1,\"60\":5,\"63\":2,\"145\":3,\"146\":2,\"147\":2,\"148\":1,\"153\":14,\"155\":5}}],[\"necessary\",{\"1\":{\"145\":1,\"147\":1}}],[\"need\",{\"1\":{\"67\":1,\"74\":1}}],[\"needstore\",{\"1\":{\"103\":1}}],[\"needs\",{\"1\":{\"67\":1}}],[\"net\",{\"1\":{\"36\":1,\"90\":1,\"98\":1}}],[\"newzone\",{\"1\":{\"7\":3}}],[\"new\",{\"1\":{\"3\":1,\"11\":1,\"27\":1,\"28\":3,\"42\":7,\"47\":3,\"49\":3,\"54\":1,\"55\":4,\"56\":1,\"60\":2,\"61\":3,\"62\":1,\"63\":11,\"65\":1,\"66\":7,\"72\":2,\"81\":1,\"82\":3,\"145\":1,\"146\":1,\"147\":2,\"148\":4,\"153\":7,\"155\":4,\"163\":4}}],[\"n\",{\"1\":{\"34\":1,\"35\":2,\"42\":4,\"88\":1,\"89\":2,\"95\":5}}],[\"npm\",{\"1\":{\"17\":1}}],[\"npmrc\",{\"1\":{\"16\":1}}],[\"nanos\",{\"1\":{\"59\":1}}],[\"nativedetector\",{\"1\":{\"148\":1}}],[\"native\",{\"1\":{\"59\":6}}],[\"navbar\",{\"1\":{\"5\":1}}],[\"name=pdai\",{\"1\":{\"163\":1}}],[\"nametolookup\",{\"1\":{\"153\":5}}],[\"name前缀会加\",{\"1\":{\"153\":2}}],[\"names\",{\"1\":{\"67\":1}}],[\"name\",{\"1\":{\"3\":1,\"26\":6,\"49\":8,\"80\":6,\"145\":1,\"146\":1,\"147\":1,\"151\":3,\"152\":1,\"153\":19,\"155\":3,\"163\":8}}],[\"nashhorn\",{\"1\":{\"72\":1}}],[\"nas\",{\"1\":{\"2\":1}}],[\"服务端将支付结果返回给客户端并展示给用户\",{\"1\":{\"131\":1}}],[\"服务端将支付信息返回给客户端\",{\"1\":{\"131\":1}}],[\"服务端会更新订单状态为支付失败\",{\"1\":{\"131\":1}}],[\"服务端会更新订单状态为已支付\",{\"1\":{\"131\":1}}],[\"服务端会组装支付参数请求第三方支付进行下单\",{\"1\":{\"131\":1}}],[\"服务端接收到支付结果通知后\",{\"1\":{\"131\":1}}],[\"服务通信\",{\"1\":{\"114\":1,\"119\":1,\"122\":1,\"124\":1,\"125\":1,\"128\":1}}],[\"服务解耦\",{\"1\":{\"99\":2}}],[\"服务单\",{\"1\":{\"99\":2}}],[\"服务器\",{\"1\":{\"14\":1}}],[\"服务\",{\"1\":{\"2\":1}}],[\"扩展和相关教程\",{\"1\":{\"2\":1}}],[\"软件应用\",{\"1\":{\"2\":1}}],[\"阅读\",{\"1\":{\"2\":1}}],[\"健身\",{\"1\":{\"2\":1}}],[\"日常习惯\",{\"1\":{\"2\":1}}],[\"置顶\",{\"1\":{\"2\":1}}],[\"=f\",{\"1\":{\"95\":1}}],[\"==\",{\"1\":{\"26\":1,\"42\":4,\"47\":3,\"60\":9,\"61\":1,\"80\":1,\"148\":1,\"153\":2,\"155\":2}}],[\"=\",{\"1\":{\"1\":1,\"6\":2,\"27\":1,\"28\":1,\"41\":2,\"42\":20,\"47\":5,\"49\":5,\"50\":2,\"51\":6,\"52\":2,\"54\":2,\"55\":8,\"56\":4,\"60\":9,\"61\":7,\"62\":2,\"63\":31,\"65\":4,\"66\":15,\"69\":1,\"81\":1,\"82\":1,\"145\":7,\"146\":7,\"147\":5,\"148\":1,\"153\":23,\"155\":9,\"163\":11}}],[\"+1\",{\"1\":{\"95\":1}}],[\"+f\",{\"1\":{\"95\":1}}],[\"+=\",{\"1\":{\"51\":3}}],[\"+\",{\"1\":{\"1\":1,\"17\":1,\"26\":2,\"42\":2,\"51\":3,\"54\":1,\"55\":1,\"61\":3,\"74\":1,\"80\":2,\"99\":2,\"148\":1,\"153\":12}}],[\"笔记结构\",{\"0\":{\"2\":1}}],[\"笔记\",{\"1\":{\"1\":2}}],[\"笔记里的知识并不属于你\",{\"1\":{\"1\":1}}],[\"便于集中管理和分享\",{\"1\":{\"1\":1}}],[\"我们通过一个例子来验证上面的整个流程\",{\"1\":{\"163\":1}}],[\"我们通过这个线索将知识点串联起来\",{\"1\":{\"95\":1}}],[\"我们可以利用\",{\"1\":{\"162\":1}}],[\"我们可以看下源码的实现了\",{\"1\":{\"94\":1}}],[\"我们主要看它的整体思路和设计要点\",{\"1\":{\"153\":1}}],[\"我们来看下dogetbean方法\",{\"1\":{\"153\":1}}],[\"我们看下获取所有advisor的方法getadvicesandadvisorsforbean\",{\"1\":{\"146\":1}}],[\"我们看了ioc设计要点和设计结构\",{\"1\":{\"94\":2,\"149\":1,\"150\":1}}],[\"我们经常使用的是查找和排序操作\",{\"1\":{\"95\":1}}],[\"我们便可以进一步深入理解springmvc主要实现原理\",{\"1\":{\"94\":2}}],[\"我们在前文中已经介绍了springaop的切面实现和创建动态代理的过程\",{\"1\":{\"94\":1}}],[\"我们分析了spring\",{\"1\":{\"94\":1}}],[\"我们开始对ioc的实现原理进行深入理解\",{\"1\":{\"94\":1}}],[\"我们希望将这两个对象当成一样的\",{\"1\":{\"61\":1}}],[\"我们想要使用\",{\"1\":{\"54\":1}}],[\"我们使用\",{\"1\":{\"7\":1}}],[\"我没有选择\",{\"1\":{\"9\":1}}],[\"我已添加了详细的注释\",{\"1\":{\"5\":1}}],[\"我个人的偏好是将非干货或随想短文的\",{\"1\":{\"5\":1}}],[\"我基于\",{\"1\":{\"1\":1}}],[\"我采用了\",{\"1\":{\"1\":1}}],[\"飞书\",{\"1\":{\"1\":1}}],[\"和上文一样\",{\"1\":{\"146\":1}}],[\"和根据值获取阶段的方法\",{\"1\":{\"114\":1}}],[\"和树的先序遍历比较类似\",{\"1\":{\"95\":1}}],[\"和操作系统的文件系统中\",{\"1\":{\"95\":1}}],[\"和堆\",{\"1\":{\"47\":2}}],[\"和关联关系不同的是\",{\"1\":{\"35\":1,\"89\":1}}],[\"和聚合不同\",{\"1\":{\"33\":1,\"87\":1}}],[\"和修改说明\",{\"1\":{\"6\":1}}],[\"和服务器上的后端应用\",{\"1\":{\"2\":1}}],[\"和\",{\"1\":{\"1\":2,\"10\":1,\"16\":1,\"17\":1,\"18\":1,\"21\":1,\"27\":1,\"28\":2,\"46\":1,\"47\":2,\"54\":1,\"55\":3,\"66\":1,\"67\":2,\"68\":1,\"81\":1,\"82\":2,\"114\":2,\"162\":6}}],[\"曾经\",{\"1\":{\"1\":1}}],[\"✨\",{\"0\":{\"1\":1}}],[\"心理学探索的自我提升笔记\",{\"1\":{\"0\":1}}],[\"效率方法\",{\"1\":{\"0\":1}}],[\"达伽马\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
